%YAML 1.2
---
# "ini_config_file Syntax"
# Author: Addons zz
#
# Note that due to the YAML syntax, tab characters are not allowed within .sublime-syntax files.


# This defines the name shown for the syntax in the menu. It's optional, and will be
# derived from the file name if not used.
name: ini_config_file

# A list of strings, defining what file extensions this syntax should be used for.
file_extensions:
  - ini

# The default scope assigned to all text in the file.
scope: text.ini_config_file

# "Global Variables"
variables:
  words_pawn: '[A-Za-z_0-9]+'

# For most languages, you'll need more than one context. For example, in C, we don't
# want a for word in the middle of a string to be highlighted as a keyword.
contexts:

  # The context name main special: Every syntax must define a main context, as it will be
  # used at the start of the file.
  main:
    - include: comment
    - include: numbers
    - include: keywords
    - include: variables

  ########################################################



  # "Comments"
  comment:
    # The regex used to match against the text. YAML allows many strings to be written without
    # quotes, which can help make the regex clearer, but it's important to understand when you
    # need to quote the regex. If your regex includes the characters #, :, -, {, [ or > then you
    # likely need to quote it. Regexes are only ever run against a single line of text at a time.
    # The match key is a regex, using the Ruby syntax.
    - match: //
      # The scope assigned to the matched text.
      scope: punctuation.definition.comment.ini_config_file
      # The contexts to push onto the stack. This may be either a single context name, a list
      # of context names, or an inline, anonymous context.
      push:
        # This assigns the given scope to all text within this context, including the
        # patterns that push the context onto the stack and pop it off.
        - meta_scope: comment.line.double-slash.ini_config_file
        - match: '(\\)$\n'
          captures:
            # A mapping of numbers to scope, assigning scopes to captured portions of the match regex.
            1: punctuation.separator.continuation.ini_config_file
        - match: \n
          # Pops the current context off the stack. The only accepted value for this key is true.
          pop: true

    - match: ;
      scope: function.definition
      push:
        - meta_scope: function.definition
        - match: \n
          pop: true

  ########################################################



  # "Numbers"
  numbers:
    - match: '(\d+)(\.{2})(\d+)'
      captures:
        1: constant.numeric.int.ini_config_file
        2: keyword.operator.switch-range.ini_config_file
        3: constant.numeric.int.ini_config_file

    - match: ([-]?0x[\da-f]+)
      scope: constant.numeric.hex.ini_config_file

    - match: \b(\d+\.\d+)\b
      scope: constant.numeric.float.ini_config_file

    - match: \b(\d+)\b
      scope: constant.numeric.int.ini_config_file

  ########################################################



  # Variables
  variables:
    - match: '^\s*({{words_pawn}})'
      captures:
        1: variable.definition.ini_config_file

  ########################################################


  # "PAWN Keywords"

  keywords:

    - match: (\-|\+|\*|\/|%|&|\||\^|<<|>>)?=
      scope: keyword.operator.assignment.ini_config_file

    - match: (==|!=|<=|>=|<>|<|>)
      scope: keyword.operator.comparison.ini_config_file

    - match: (\-\-|\+\+)
      scope: keyword.operator.increment-decrement.ini_config_file

    - match: (\?|:)
      scope: keyword.operator.ternary.ini_config_file

    - match: (\-|\+|\*|\/|%)
      scope: keyword.operator.arithmetic.ini_config_file

    - match: (!|&&|\|\|)
      scope: keyword.operator.logical.ini_config_file

    - match: (~|&|\||\^|<<|>>)
      scope: keyword.operator.bitwise.ini_config_file

    - match: (\,)
      scope: keyword.other.ini_config_file

    - match: '\(|\)|\[|\]'
      scope: keyword.brackets.ini_config_file

  ########################################################

