%YAML 1.2
---
# "AmxxPawn Syntax"
# Author: ppalex7/Destro-/Addons zz
#
# https://github.com/ppalex7/SourcePawnCompletions
# https://forums.alliedmods.net/showthread.php?t=284385
#
# Note that due to the YAML syntax, tab characters are not allowed within .sublime-syntax files.


# This defines the name shown for the syntax in the menu. It's optional, and will be
# derived from the file name if not used.
name: AmxxPawn

# A list of strings, defining what file extensions this syntax should be used for.
file_extensions:
  - bbcode
  - inc
  - sma

# The default scope assigned to all text in the file.
scope: source.AmxxPawn, source.sma

# When a file is opened without a recognized extension, the first line of the file
# contents will be tested against this regex, to see if the syntax should be applied.
first_line_match: '(?i:amxx\-?pawn)'

# "Global Variables"
variables:
  identifiers: 'Float|enum|char|const|static|Array|bool|Trie'
  words_pawn: '[A-Za-z_0-9]+'
  reserved_keywords: 'sizeof|charsmax|assert|break|case|continue|default|do|else|exit|for|goto|if|return|state|switch|while|new|false|true'

# For most languages, you'll need more than one context. For example, in C, we don't
# want a for word in the middle of a string to be highlighted as a keyword.
contexts:

  # The context name main special: Every syntax must define a main context, as it will be
  # used at the start of the file.
  main:
    - include: pawn_character
    - include: pawn_comment
    - include: pawn_preprocessor
    - include: pawn_numbers
    - include: pawn_variables
    - include: pawn_keywords
    - include: pawn_function
    - include: pawn_post_keywords

  # Constants
  #- include: Packages/amxmodx/const.sublime-syntax
  # TODO: Create a parser to find the constants on the amxx include/scripting folder.

  ########################################################



  # Pawn register_cvar() and create_cvar() symbols definitions
  pawn_cvars:
    - match: '((register_cvar)|(create_cvar))\s*(\()\s*(\")([A-Za-z_0-9]+)(\")'
      captures:
        1: function.call.AmxxPawn
        4: keyword.brackets.AmxxPawn
        5: punctuation.definition.string.begin.AmxxPawn
        6: cvardefinition.AmxxPawn, string.quoted.double.AmxxPawn
        7: punctuation.definition.string.end.AmxxPawn

  ########################################################



  # "PAWN Comments"
  pawn_comment:

    # The regex used to match against the text. YAML allows many strings to be written without
    # quotes, which can help make the regex clearer, but it's important to understand when you
    # need to quote the regex. If your regex includes the characters #, :, -, {, [ or > then you
    # likely need to quote it. Regexes are only ever run against a single line of text at a time.
    # The match key is a regex, using the Ruby syntax.
    - match: /\*\*
      # The scope assigned to the matched text.
      scope: punctuation.definition.comment.AmxxPawn
      # The contexts to push onto the stack. This may be either a single context name, a list
      # of context names, or an inline, anonymous context.
      push:
        # This assigns the given scope to all text within this context, including the
        # patterns that push the context onto the stack and pop it off.
        - meta_scope: doccomment.block.AmxxPawn
        - match: \*/
          scope: punctuation.definition.comment.AmxxPawn
          # Pops the current context off the stack. The only accepted value for this key is true.
          pop: true

    - match: /\*
      scope: punctuation.definition.comment.AmxxPawn

      push:
        - meta_scope: comment.block.AmxxPawn
        - match: \*/
          scope: punctuation.definition.comment.AmxxPawn
          pop: true

    - match: \*/
      scope: invalid.illegal.stray-comment-end.AmxxPawn

    - match: \/\/\/
      scope: punctuation.definition.doccomment.AmxxPawn
      push:
        - meta_scope: comment.line.triple-slash.AmxxPawn
        - match: \n
          pop: true

    - match: \/\/
      scope: punctuation.definition.comment.AmxxPawn
      push:
        - meta_scope: comment.line.double-slash.AmxxPawn
        - match: \n
          pop: true

  ########################################################



  # "Pawn Directives"
  # Colored %0, %1, %2, ...
  pawn_preprocessor:
    # For lines ending with a pawn word, we need to catch here, otherwise the next regex cannot
    # consume enough to catch '[^\\]\n'
    - include: preprocessor_define
    - include: preprocessor_others

  preprocessor_define:
    # Handle preprocessor declaration ending a `words_pawn` only
    - match: '^\s*\#(define\s+({{words_pawn}}))\n'
      # A mapping of numbers to scope, assigning scopes to captured portions of the match regex.
      captures:
        0: meta.preprocessor.AmxxPawn
        2: function.definition.AmxxPawn

    # Handle preprocessor declaration ending a triple slash commentary ///
    - match: '^\s*\#(define\s+({{words_pawn}})).*(///)(.*)\n'
      captures:
        0: meta.preprocessor.AmxxPawn
        2: function.definition.AmxxPawn
        3: punctuation.definition.doccomment.AmxxPawn comment.line.triple-slash.AmxxPawn
        4: comment.line.triple-slash.AmxxPawn

    # Handle preprocessor declaration ending a double slash commentary //
    - match: '^\s*\#(define\s+({{words_pawn}})).*(//)(.*)\n'
      captures:
        0: meta.preprocessor.AmxxPawn
        2: function.definition.AmxxPawn
        3: punctuation.definition.comment.AmxxPawn comment.line.double-slash.AmxxPawn
        4: comment.line.double-slash.AmxxPawn

    # Handle preprocessor declaration ending with double quotes "
    - match: '^\s*\#(define\s+({{words_pawn}})).*(".*")\n'
      captures:
        0: meta.preprocessor.AmxxPawn
        2: function.definition.AmxxPawn
        3: string.quoted.double.AmxxPawn

    # Handle all the remaining preprocessor declarations
    - match: '^\s*\#(define\s+({{words_pawn}}))'
      captures:
        2: function.definition.AmxxPawn
      push:
        - meta_scope: meta.preprocessor.AmxxPawn
        - include: preprocessor_string
        - include: pawn_comment
        - include: preprocessor_numbers

  # Here are not multiline strings support due we cannot handle strings ending with double quotes "
  # and lines ending with strings will not be highlighted.
  preprocessor_string:
    - match: '(").*("[^\n])'
      captures:
        0: string.quoted.double.AmxxPawn
        1: punctuation.definition.string.begin.AmxxPawn
        2: punctuation.definition.string.end.AmxxPawn

  preprocessor_others:
    - match: '^(\s*\#.*)(///)(.*)'
      captures:
        1: meta.preprocessor.AmxxPawn
        2: punctuation.definition.doccomment.AmxxPawn comment.line.triple-slash.AmxxPawn
        3: comment.line.triple-slash.AmxxPawn

    - match: '^(\s*\#.*)(//)(.*)'
      captures:
        1: meta.preprocessor.AmxxPawn
        2: punctuation.definition.comment.AmxxPawn comment.line.double-slash.AmxxPawn
        3: comment.line.double-slash.AmxxPawn

    - match: '^(\s*\#)'
      captures:
        1: meta.preprocessor.AmxxPawn
      push:
        - meta_scope: meta.preprocessor.AmxxPawn
        - include: pawn_string
        - include: pawn_comment
        - include: preprocessor_numbers
        - match: '[^\\\n]$'
          pop: true

  preprocessor_numbers:
    - match: '%\d'
      scope: constant.numeric.AmxxPawn

    # For lines ending with digits
    - match: '\d\n'
      scope: constant.numeric.AmxxPawn
      pop: true

    # For the digits anywhere on the line, except its end
    - match: '\d'
      scope: constant.numeric.AmxxPawn

    # For \ signs on the line's middle
    - match: '\\.+'
      pop: true

    # For lines which does continue using \
    - match: '[^\\]\n'
      pop: true

  ########################################################



  # "PAWN String"
  pawn_string:
    - include: pawn_cvars
    - match: '"'
      scope: punctuation.definition.string.begin.AmxxPawn
      push:
      - meta_scope: string.quoted.double.AmxxPawn
      - match: '(")|(?<=^|[^\\])\s*(\n)'
        captures:
          1: punctuation.definition.string.end.AmxxPawn
          2: invalid.illegal.unexpected-end-of-line.AmxxPawn
        pop: true
        # Frequently it's convenient to include the contents of one context within another.
        # For example, you may define several different contexts for parsing the C language,
        # and almost all of them can include comments. Rather than copying the relevant match
        # patterns into each of these contexts, you can include them.
      - include: string_escaped_char
      - include: string_placeholder

  string_escaped_char:
    - match: \^(\^|[abefnprtv\'"?]|[0-3]\d{,2}|[4-7]\d?|x[a-fA-F0-9]{,2}|u[a-fA-F0-9]{,4}|U[a-fA-F0-9]{,8})
      scope: constant.character.escape.AmxxPawn
    - match: \^.
      scope: invalid.illegal.unknown-escape.AmxxPawn

  string_placeholder:
    - match: |-
        (?x)%
            ((-?\d+)|\*(-?\d+\$)?)?         # minimum field width
            (\.((-?\d+)|\*(-?\d+\$)?)?)?    # precision
            [cbdiufXxasLNn%]                # conversion type
      scope: constant.other.placeholder.AmxxPawn

  pawn_character:
    - match: ('[\^]?.')|('.(.+'))
      captures:
        1: string.quoted.single.AmxxPawn
        2: invalid.illegal.invalid-character.AmxxPawn

  ########################################################



  # "PAWN Function"
  pawn_function:
    - include: function_definition
    - match: '{'
      scope: keyword.brackets.AmxxPawn
      push:
        - meta_scope: meta.block.AmxxPawn
        - include: function_call
        - match: '}'
          scope: keyword.brackets.AmxxPawn
          pop: true
        - include: pawn_function
    - include: pawn_function_includes

  # We cannot include the whole main context here, otherwise we would re-include this own context
  # creating an infinity context include loop. Then we need to include all main contexts except
  # this own context.
  pawn_function_includes:
    - include: pawn_string
    - include: pawn_character
    - include: pawn_comment
    - include: pawn_preprocessor
    - include: pawn_numbers
    - include: pawn_variables_local
    - include: pawn_keywords
    - include: pawn_post_keywords

  pawn_function_includes_no_variables:
    - include: pawn_string
    - include: pawn_character
    - include: pawn_comment
    - include: pawn_preprocessor
    - include: pawn_numbers
    - include: pawn_keywords
    - include: pawn_post_keywords

  function_call:
    - include: pawn_function_includes
    - match: '\s*([A-Za-z_][\w_]+)\s*(?<!register_cvar|create_cvar)\s*(\()'
      captures:
        1: function.call.AmxxPawn
        2: keyword.brackets.AmxxPawn

  function_definition:
    - match: '^(\s*(public|stock|native|forward)\s+)([A-Za-z_]\w*:\s*)?([A-Za-z_][\w_]*)[\s]*'
      captures:
        2: storage.type.function.AmxxPawn
        3: storage.modifier.tag.AmxxPawn
        4: function.definition.AmxxPawn, entity.name.function.AmxxPawn
      push:
        - match: \)
          scope: keyword.brackets.AmxxPawn
          pop: true
        - include: pawn_function_includes_no_variables
        - match: '({{words_pawn}})(\s*(=)\s)?'
          captures:
            1: parameter.definition.AmxxPawn
            3: keyword.operator.assignment.AmxxPawn
        - match: ','
          scope: punctuation.separator.AmxxPawn

  ########################################################



  # "PAWN Numbers"
  pawn_numbers:
    - match: '(\d+)(\.{2})(\d+)'
      captures:
        1: constant.numeric.int.AmxxPawn
        2: keyword.operator.switch-range.AmxxPawn
        3: constant.numeric.int.AmxxPawn

    - match: ([-]?0x[\da-f]+)
      scope: constant.numeric.hex.AmxxPawn

    - match: \b(\d+\.\d+)\b
      scope: constant.numeric.float.AmxxPawn

    - match: \b(\d+)\b
      scope: constant.numeric.int.AmxxPawn

  ########################################################



  # PAWN Variables
  pawn_variables:
    - match: '\s*(new)\s*\b([A-Za-z_0-9]+)?\b(\s*{{words_pawn}}\s*(:))?\s*({{words_pawn}})\s*'
      captures:
        1: keyword.control.AmxxPawn
        2: storage.type.vars.AmxxPawn
        3: variable.type.AmxxPawn
        4: keyword.operator.AmxxPawn
        5: variable.definition.AmxxPawn

    - match: '\s*\b({{identifiers}})\b(\s*{{words_pawn}}\s*(:))?\s*({{words_pawn}})\s*'
      captures:
        1: storage.type.vars.AmxxPawn
        2: variable.type.AmxxPawn
        3: keyword.operator.AmxxPawn
        4: variable.definition.AmxxPawn

  pawn_variables_local:
    - match: '\s*(new)\s*\b([A-Za-z_0-9]+)?\b(\s*{{words_pawn}}\s*(:))?\s*({{words_pawn}})\s*'
      captures:
        1: keyword.control.AmxxPawn
        2: storage.type.vars.AmxxPawn
        3: variable.type.AmxxPawn
        4: keyword.operator.AmxxPawn
        5: variable.local.definition.AmxxPawn

    - match: '\s*\b({{identifiers}})\b(\s*{{words_pawn}}\s*(:))?\s*({{words_pawn}})\s*'
      captures:
        1: storage.type.vars.AmxxPawn
        2: variable.type.AmxxPawn
        3: keyword.operator.AmxxPawn
        4: variable.local.definition.AmxxPawn

  ########################################################



  # "PAWN Keywords"

  pawn_keywords:
    - match: \s*(case (.*):)\s+
      captures:
        1: keyword.control.AmxxPawn
        2: storage.type.vars.AmxxPawn

    - match: \s*\b({{reserved_keywords}})\b
      scope: keyword.control.AmxxPawn

    - match: \s*\b({{identifiers}})\b
      scope: storage.type.vars.AmxxPawn

    - match: any\:(\.\.\.)
      captures:
        1: storage.modifier.tag.AmxxPawn

    - match: (\-|\+|\*|\/|%|&|\||\^|<<|>>)?=
      scope: keyword.operator.assignment.AmxxPawn

    - match: (==|!=|<=|>=|<>|<|>)
      scope: keyword.operator.comparison.AmxxPawn

    - match: (\-\-|\+\+)
      scope: keyword.operator.increment-decrement.AmxxPawn

    - match: (\?|:)
      scope: keyword.operator.ternary.AmxxPawn

    - match: (\-|\+|\*|\/|%)
      scope: keyword.operator.arithmetic.AmxxPawn

    - match: (!|&&|\|\|)
      scope: keyword.operator.logical.AmxxPawn

    - match: (~|&|\||\^|<<|>>)
      scope: keyword.operator.bitwise.AmxxPawn

    - match: (\,)
      scope: keyword.other.AmxxPawn

  ########################################################


  pawn_post_keywords:
    - match: '(?<!\?)\b[A-Za-z_]\w*\:'
      scope: storage.modifier.tag.AmxxPawn

    - match: \s*\b(public|stock|native|forward)\b
      scope: storage.type.function.AmxxPawn

    - match: '\(|\)|\[|\]'
      scope: keyword.brackets.AmxxPawn

  ########################################################





