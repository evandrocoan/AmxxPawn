{
	"author": "OvidiuS, on the thread/post Sublime Text 2, https://forums.alliedmods.net/showpost.php?p=2128068&postcount=5",
	"scope": "source.AmxxPawn",

	"completions": 
	[
		{ "trigger": "AddClientMenuItem\tamxmisc.inc - 548", "contents": "AddClientMenuItem(${1:const MENU_TEXT[]}, ${2:const MENU_CMD[]}, ${3:const MENU_ACCESS}, ${4:const MENU_PLUGIN[]})" },
		{ "trigger": "AddMenuItem\tamxmisc.inc - 542", "contents": "AddMenuItem(${1:const MENU_TEXT[]}, ${2:const MENU_CMD[]}, ${3:const MENU_ACCESS}, ${4:const MENU_PLUGIN[]})" },
		{ "trigger": "AddMenuItem_call\tamxmisc.inc - 554", "contents": "AddMenuItem_call(${1:const MENU_TEXT[]}, ${2:const MENU_CMD[]}, ${3:const MENU_ACCESS}, ${4:const MENU_PLUGIN[]}, ${5:const bool:ADD_TO_CLIENT_MENU})" },
		{ "trigger": "AddTranslation\tlang.inc - 47", "contents": "AddTranslation(${1:const lang[3]}, ${2:TransKey:key}, ${3:const phrase[]})" },
		{ "trigger": "ArrayClear\tcellarray.inc - 36", "contents": "ArrayClear(${1:Array:which})" },
		{ "trigger": "ArrayCreate\tcellarray.inc - 28", "contents": "ArrayCreate(${1:cellsize=1}, ${2:reserved=32})" },
		{ "trigger": "ArrayDeleteItem\tcellarray.inc - 210", "contents": "ArrayDeleteItem(${1:Array:which}, ${2:item})" },
		{ "trigger": "ArrayDestroy\tcellarray.inc - 230", "contents": "ArrayDestroy(${1:&Array:which})" },
		{ "trigger": "ArrayGetArray\tcellarray.inc - 54", "contents": "ArrayGetArray(${1:Array:which}, ${2:item}, ${3:any:output[]})" },
		{ "trigger": "ArrayGetCell\tcellarray.inc - 64", "contents": "ArrayGetCell(${1:Array:which}, ${2:item})" },
		{ "trigger": "ArrayGetString\tcellarray.inc - 74", "contents": "ArrayGetString(${1:Array:which}, ${2:item}, ${3:output[]}, ${4:size})" },
		{ "trigger": "ArrayGetStringHandle\tcellarray.inc - 223", "contents": "ArrayGetStringHandle(${1:Array:which}, ${2:item})" },
		{ "trigger": "ArrayInsertArrayAfter\tcellarray.inc - 143", "contents": "ArrayInsertArrayAfter(${1:Array:which}, ${2:item}, ${3:const any:input[]})" },
		{ "trigger": "ArrayInsertArrayBefore\tcellarray.inc - 173", "contents": "ArrayInsertArrayBefore(${1:Array:which}, ${2:item}, ${3:const any:input[]})" },
		{ "trigger": "ArrayInsertCellAfter\tcellarray.inc - 153", "contents": "ArrayInsertCellAfter(${1:Array:which}, ${2:item}, ${3:any:input})" },
		{ "trigger": "ArrayInsertCellBefore\tcellarray.inc - 183", "contents": "ArrayInsertCellBefore(${1:Array:which}, ${2:item}, ${3:const any:input})" },
		{ "trigger": "ArrayInsertStringAfter\tcellarray.inc - 163", "contents": "ArrayInsertStringAfter(${1:Array:which}, ${2:item}, ${3:const input[]})" },
		{ "trigger": "ArrayInsertStringBefore\tcellarray.inc - 193", "contents": "ArrayInsertStringBefore(${1:Array:which}, ${2:item}, ${3:const input[]})" },
		{ "trigger": "ArrayPushArray\tcellarray.inc - 115", "contents": "ArrayPushArray(${1:Array:which}, ${2:const any:input[]})" },
		{ "trigger": "ArrayPushCell\tcellarray.inc - 124", "contents": "ArrayPushCell(${1:Array:which}, ${2:any:input})" },
		{ "trigger": "ArrayPushString\tcellarray.inc - 133", "contents": "ArrayPushString(${1:Array:which}, ${2:const input[]})" },
		{ "trigger": "ArraySetArray\tcellarray.inc - 85", "contents": "ArraySetArray(${1:Array:which}, ${2:item}, ${3:const any:input[]})" },
		{ "trigger": "ArraySetCell\tcellarray.inc - 95", "contents": "ArraySetCell(${1:Array:which}, ${2:item}, ${3:any:input})" },
		{ "trigger": "ArraySetString\tcellarray.inc - 106", "contents": "ArraySetString(${1:Array:which}, ${2:item}, ${3:const input[]})" },
		{ "trigger": "ArraySize\tcellarray.inc - 44", "contents": "ArraySize(${1:Array:which})" },
		{ "trigger": "ArraySort\tcellarray.inc - 254", "contents": "ArraySort(${1:Array:array}, ${2:const comparefunc[]}, ${3:data[]=}, ${4:data_size=0})" },
		{ "trigger": "ArraySwap\tcellarray.inc - 202", "contents": "ArraySwap(${1:Array:which}, ${2:item1}, ${3:item2})" },
		{ "trigger": "AttachView\tVexd_Utilities.inc - 98", "contents": "AttachView(${1:iIndex}, ${2:iTargetIndex})" },
		{ "trigger": "BinaryToDecimal\tnumber_convert.inc - 10", "contents": "BinaryToDecimal(${1:const szBinary[ ]})" },
		{ "trigger": "BinaryToHex\tnumber_convert.inc - 14", "contents": "BinaryToHex(${1:const szBinary[ ]}, ${2:szHexResult[ ]}, ${3:const iHexLen})" },
		{ "trigger": "CS_InternalCommand\tcstrike.inc - 355", "contents": "CS_InternalCommand(${1:id}, ${2:const cmd[]})" },
		{ "trigger": "ClearSyncHud\tamxmodx.inc - 960", "contents": "ClearSyncHud(${1:target}, ${2:syncObj})" },
		{ "trigger": "ClearTravTrie\tadt_travtrie.inc - 92", "contents": "ClearTravTrie(${1:Handle:trie})" },
		{ "trigger": "ColorChat\tcolorchat.inc - 64", "contents": "ColorChat(${1:id}, ${2:ColorChatType:type}, ${3:const msg[]}, ${4:{Float}, ${5:Sql}, ${6:Result}, ${7:_}:...})" },
		{ "trigger": "CreateEntity\tVexd_Utilities.inc - 56", "contents": "CreateEntity(${1:szClassname[]})" },
		{ "trigger": "CreateHudSyncObj\tamxmodx.inc - 939", "contents": "CreateHudSyncObj(${1:num=0}, ${2:...})" },
		{ "trigger": "CreateLangKey\tlang.inc - 36", "contents": "CreateLangKey(${1:const key[]})" },
		{ "trigger": "CreateMultiForward\tamxmodx.inc - 990", "contents": "CreateMultiForward(${1:const name[]}, ${2:stop_type}, ${3:...})" },
		{ "trigger": "CreateMultiForwardEx\tamxmodx.inc - 998", "contents": "CreateMultiForwardEx(${1:const name[]}, ${2:stop_type}, ${3:forward_type}, ${4:...})" },
		{ "trigger": "CreateOneForward\tamxmodx.inc - 1006", "contents": "CreateOneForward(${1:plugin_id}, ${2:const name[]}, ${3:...})" },
		{ "trigger": "CreateTravTrie\tadt_travtrie.inc - 9", "contents": "CreateTravTrie(${1:keylength = 64}, ${2:startsize = 0})" },
		{ "trigger": "CvarCache\tcvar_util.inc - 151", "contents": "CvarCache(${1:handleCvar}, ${2:const type}, ${3:any:...})" },
		{ "trigger": "CvarDisableHook\tcvar_util.inc - 158", "contents": "CvarDisableHook(${1:handleCvar}, ${2:const callback[] = \"\"})" },
		{ "trigger": "CvarDisableHookAll\tcvar_util.inc - 165", "contents": "CvarDisableHookAll()" },
		{ "trigger": "CvarDisableLock\tcvar_util.inc - 249", "contents": "CvarDisableLock(${1:handleCvar})" },
		{ "trigger": "CvarEnableHook\tcvar_util.inc - 132", "contents": "CvarEnableHook(${1:handleCvar}, ${2:const callback[] = \"\"})" },
		{ "trigger": "CvarEnableHookAll\tcvar_util.inc - 139", "contents": "CvarEnableHookAll()" },
		{ "trigger": "CvarEnableLock\tcvar_util.inc - 233", "contents": "CvarEnableLock(${1:handleCvar})" },
		{ "trigger": "CvarGetBounds\tcvar_util.inc - 303", "contents": "CvarGetBounds(${1:handleCvar}, ${2:CvarBounds:type}, ${3:&Float:value}, ${4:&pluginId = 0})" },
		{ "trigger": "CvarGetDescription\tcvar_util.inc - 404", "contents": "CvarGetDescription(${1:handleCvar}, ${2:description[]}, ${3:len})" },
		{ "trigger": "CvarGetName\tcvar_util.inc - 375", "contents": "CvarGetName(${1:handleCvar}, ${2:cvar[]}, ${3:len})" },
		{ "trigger": "CvarGetStatus\tcvar_util.inc - 333", "contents": "CvarGetStatus(${1:handleCvar})" },
		{ "trigger": "CvarHookChange\tcvar_util.inc - 91", "contents": "CvarHookChange(${1:handleCvar}, ${2:const callback[]})" },
		{ "trigger": "CvarHookChangeAll\tcvar_util.inc - 113", "contents": "CvarHookChangeAll(${1:const callback[]})" },
		{ "trigger": "CvarHookChanged\tcvar_util.inc - 72", "contents": "CvarHookChanged(${1:handleCvar}, ${2:const oldValue[]}, ${3:const newValue[]}, ${4:const cvarName[]})" },
		{ "trigger": "CvarHookInfo\tcvar_util.inc - 197", "contents": "CvarHookInfo(${1:index}, ${2:handleCvar}, ${3:&pluginId}, ${4:&forwardId = -1}, ${5:callback[] = \"\"}, ${6:callbackLen = 0})" },
		{ "trigger": "CvarHookNum\tcvar_util.inc - 178", "contents": "CvarHookNum(${1:handleCvar})" },
		{ "trigger": "CvarInfo\tcvar_util.inc - 361", "contents": "CvarInfo(${1:index}, ${2:&handleCvar}, ${3:&pluginId = -1}, ${4:name[] = \"\"}, ${5:nameLen = 0}, ${6:value[] = \"\"}, ${7:valueLen = 0}, ${8:description[] = \"\"}, ${9:descriptionLen = 0}, ${10:&flags = 0})" },
		{ "trigger": "CvarLockInfo\tcvar_util.inc - 265", "contents": "CvarLockInfo(${1:handleCvar}, ${2:&pluginId}, ${3:value[] = \"\"}, ${4:valueLen = 0})" },
		{ "trigger": "CvarLockValue\tcvar_util.inc - 217", "contents": "CvarLockValue(${1:handleCvar}, ${2:const value[] = \"\"}, ${3:Float:fvalue = 0.0})" },
		{ "trigger": "CvarNum\tcvar_util.inc - 340", "contents": "CvarNum()" },
		{ "trigger": "CvarPluginInfo\tcvar_util.inc - 420", "contents": "CvarPluginInfo(${1:pluginId}, ${2:name[]}, ${3:nameLen}, ${4:title[] = \"\"}, ${5:titleLen = 0})" },
		{ "trigger": "CvarRegister\tcvar_util.inc - 321", "contents": "CvarRegister(${1:const name[]}, ${2:const string[]}, ${3:const description[] = \"\"}, ${4:flags = 0}, ${5:bool:hasMin = false}, ${6:Float:minValue = 0.0}, ${7:bool:hasMax = false}, ${8:Float:maxValue = 0.0}, ${9:bool:forceInterval = true})" },
		{ "trigger": "CvarSetBounds\tcvar_util.inc - 287", "contents": "CvarSetBounds(${1:handleCvar}, ${2:CvarBounds:type}, ${3:bool:set}, ${4:Float:value = 0.0}, ${5:bool:forceInterval = true})" },
		{ "trigger": "CvarSetDescription\tcvar_util.inc - 390", "contents": "CvarSetDescription(${1:handleCvar}, ${2:const description[]})" },
		{ "trigger": "DF_AddToFullPack\tfakemeta_stocks.inc - 268", "contents": "DF_AddToFullPack(${1:const STATE/* = 0*/}, ${2:e}, ${3:ENT}, ${4:HOST}, ${5:hostflags}, ${6:player}, ${7:set})" },
		{ "trigger": "DF_Blocked\tfakemeta_stocks.inc - 211", "contents": "DF_Blocked(${1:const ENT_Blocked}, ${2:const ENT_Other})" },
		{ "trigger": "DF_ClientCommand\tfakemeta_stocks.inc - 224", "contents": "DF_ClientCommand(${1:const ENTITY})" },
		{ "trigger": "DF_ClientConnect\tfakemeta_stocks.inc - 215", "contents": "DF_ClientConnect(${1:const ENTITY}, ${2:const NAME[]}, ${3:const ADDRESS[]}, ${4:RejectReason[128]})" },
		{ "trigger": "DF_ClientDisconnect\tfakemeta_stocks.inc - 217", "contents": "DF_ClientDisconnect(${1:const ENTITY})" },
		{ "trigger": "DF_ClientKill\tfakemeta_stocks.inc - 219", "contents": "DF_ClientKill(${1:const ENTITY})" },
		{ "trigger": "DF_ClientPutInServer\tfakemeta_stocks.inc - 222", "contents": "DF_ClientPutInServer(${1:const ENTITY})" },
		{ "trigger": "DF_ClientUserInfoChanged\tfakemeta_stocks.inc - 263", "contents": "DF_ClientUserInfoChanged(${1:const IDPLAYER})" },
		{ "trigger": "DF_CmdEnd\tfakemeta_stocks.inc - 272", "contents": "DF_CmdEnd(${1:const PLAYER})" },
		{ "trigger": "DF_CmdStart\tfakemeta_stocks.inc - 270", "contents": "DF_CmdStart(${1:const PLAYER}, ${2:const CMD/* = 0*/}, ${3:randomSeed})" },
		{ "trigger": "DF_CreateBaseline\tfakemeta_stocks.inc - 274", "contents": "DF_CreateBaseline(${1:PLAYER}, ${2:eIndex}, ${3:baseline}, ${4:playerModelIndex}, ${5:Float:playerMins[3]}, ${6:Float:playerMaxs[3]})" },
		{ "trigger": "DF_CreateInstBaselines\tfakemeta_stocks.inc - 257", "contents": "DF_CreateInstBaselines()" },
		{ "trigger": "DF_GameInit\tfakemeta_stocks.inc - 200", "contents": "DF_GameInit()" },
		{ "trigger": "DF_GetGameDescription\tfakemeta_stocks.inc - 239", "contents": "DF_GetGameDescription()" },
		{ "trigger": "DF_GetHullBounds\tfakemeta_stocks.inc - 255", "contents": "DF_GetHullBounds(${1:hullnumber}, ${2:Float:mins[3]}, ${3:Float:maxs[3]})" },
		{ "trigger": "DF_MetaFunc_CallGameEntity\tfakemeta_stocks.inc - 261", "contents": "DF_MetaFunc_CallGameEntity(${1:const STRING[]}, ${2:const ENTITY})" },
		{ "trigger": "DF_PM_FindTextureType\tfakemeta_stocks.inc - 250", "contents": "DF_PM_FindTextureType(${1:name[]})" },
		{ "trigger": "DF_ParmsChangeLevel\tfakemeta_stocks.inc - 237", "contents": "DF_ParmsChangeLevel()" },
		{ "trigger": "DF_ParmsNewLevel\tfakemeta_stocks.inc - 235", "contents": "DF_ParmsNewLevel()" },
		{ "trigger": "DF_PlayerPostThink\tfakemeta_stocks.inc - 230", "contents": "DF_PlayerPostThink(${1:const ENTITY})" },
		{ "trigger": "DF_PlayerPreThink\tfakemeta_stocks.inc - 228", "contents": "DF_PlayerPreThink(${1:const ENTITY})" },
		{ "trigger": "DF_RegisterEncoders\tfakemeta_stocks.inc - 252", "contents": "DF_RegisterEncoders()" },
		{ "trigger": "DF_ServerDeactivate\tfakemeta_stocks.inc - 226", "contents": "DF_ServerDeactivate()" },
		{ "trigger": "DF_SetAbsBox\tfakemeta_stocks.inc - 213", "contents": "DF_SetAbsBox(${1:const ENTITY})" },
		{ "trigger": "DF_Spawn\tfakemeta_stocks.inc - 202", "contents": "DF_Spawn(${1:const ENTITY})" },
		{ "trigger": "DF_SpectatorConnect\tfakemeta_stocks.inc - 241", "contents": "DF_SpectatorConnect(${1:const ENTITY})" },
		{ "trigger": "DF_SpectatorDisconnect\tfakemeta_stocks.inc - 244", "contents": "DF_SpectatorDisconnect(${1:const ENTITY})" },
		{ "trigger": "DF_SpectatorThink\tfakemeta_stocks.inc - 246", "contents": "DF_SpectatorThink(${1:const ENTITY})" },
		{ "trigger": "DF_StartFrame\tfakemeta_stocks.inc - 233", "contents": "DF_StartFrame()" },
		{ "trigger": "DF_Sys_Error\tfakemeta_stocks.inc - 248", "contents": "DF_Sys_Error(${1:const ERROR_STRING[]})" },
		{ "trigger": "DF_Think\tfakemeta_stocks.inc - 204", "contents": "DF_Think(${1:const ENTITY})" },
		{ "trigger": "DF_Touch\tfakemeta_stocks.inc - 208", "contents": "DF_Touch(${1:const ENT_Touched}, ${2:const ENT_Toucher})" },
		{ "trigger": "DF_UpdateClientData\tfakemeta_stocks.inc - 266", "contents": "DF_UpdateClientData(${1:const ENTITY}, ${2:sendweapons}, ${3:const cd/* = 0*/})" },
		{ "trigger": "DF_Use\tfakemeta_stocks.inc - 206", "contents": "DF_Use(${1:const ENT_Used}, ${2:const ENT_User})" },
		{ "trigger": "DF_pfnAllowLagCompensation\tfakemeta_stocks.inc - 259", "contents": "DF_pfnAllowLagCompensation()" },
		{ "trigger": "DHUD_applyFilter\tdHUD.inc - 153", "contents": "DHUD_applyFilter(${1:dhud}, ${2:const szFilter[]}, ${3:startFrame}, ${4:endFrame}, ${5:Float:dx=D_LONG}, ${6:Float:dy=D_ZERO}, ${7:any:...})" },
		{ "trigger": "DHUD_clear\tdHUD.inc - 91", "contents": "DHUD_clear(${1:id}, ${2:dhud})" },
		{ "trigger": "DHUD_create\tdHUD.inc - 27", "contents": "DHUD_create(${1:dhud = -1})" },
		{ "trigger": "DHUD_display\tdHUD.inc - 81", "contents": "DHUD_display(${1:id}, ${2:dhud}, ${3:Float:fInterval = 0.1}, ${4:channel = 4}, ${5:const szMessage[]}, ${6:any:...})" },
		{ "trigger": "DHUD_getFrame\tdHUD.inc - 66", "contents": "DHUD_getFrame(${1:dhud}, ${2:frame}, ${3:iColor[3]}, ${4:&Float:x}, ${5:&Float:y}, ${6:&iLen})" },
		{ "trigger": "DHUD_getFrames\tdHUD.inc - 37", "contents": "DHUD_getFrames(${1:dhud})" },
		{ "trigger": "DHUD_registerFilter\tdHUD.inc - 119", "contents": "DHUD_registerFilter(${1:const szName[]}, ${2:const szCallback[]}, ${3:const szDescription[]}, ${4:...})" },
		{ "trigger": "DHUD_removeAllFrames\tdHUD.inc - 181", "contents": "DHUD_removeAllFrames(${1:dhud})" },
		{ "trigger": "DHUD_removeFrames\tdHUD.inc - 172", "contents": "DHUD_removeFrames(${1:dhud}, ${2:startFrame}, ${3:count})" },
		{ "trigger": "DHUD_setFrame\tdHUD.inc - 52", "contents": "DHUD_setFrame(${1:dhud}, ${2:frame}, ${3:iColor[3]={0}, ${4:0}, ${5:0}}, ${6:Float:x=0.0}, ${7:Float:y=0.0}, ${8:iLen = 1})" },
		{ "trigger": "DataPack_Create\tDataPacks.inc - 36", "contents": "DataPack_Create(${1:iReserve = 1})" },
		{ "trigger": "DataPack_Free\tDataPacks.inc - 48", "contents": "DataPack_Free(${1:&Array:hDataPack})" },
		{ "trigger": "DataPack_GetArray\tDataPacks.inc - 224", "contents": "DataPack_GetArray(${1:Array:hDataPack}, ${2:iIndex}, ${3:any:cArray[]}, ${4:iArraySize})" },
		{ "trigger": "DataPack_GetCell\tDataPacks.inc - 200", "contents": "DataPack_GetCell(${1:Array:hDataPack}, ${2:iIndex}, ${3:&any:cResult})" },
		{ "trigger": "DataPack_GetItemType\tDataPacks.inc - 90", "contents": "DataPack_GetItemType(${1:Array:hDataPack}, ${2:iIndex})" },
		{ "trigger": "DataPack_GetSize\tDataPacks.inc - 75", "contents": "DataPack_GetSize(${1:Array:hDataPack})" },
		{ "trigger": "DataPack_GetString\tDataPacks.inc - 248", "contents": "DataPack_GetString(${1:Array:hDataPack}, ${2:iIndex}, ${3:szResult[]}, ${4:iMaxLen})" },
		{ "trigger": "DataPack_PushArray\tDataPacks.inc - 137", "contents": "DataPack_PushArray(${1:Array:hDataPack}, ${2:any:cArray[]}, ${3:iArraySize})" },
		{ "trigger": "DataPack_PushCell\tDataPacks.inc - 114", "contents": "DataPack_PushCell(${1:Array:hDataPack}, ${2:any:cCell})" },
		{ "trigger": "DataPack_PushString\tDataPacks.inc - 164", "contents": "DataPack_PushString(${1:Array:hDataPack}, ${2:szString[]}, ${3:iLen=-1})" },
		{ "trigger": "DecimalToBinary\tnumber_convert.inc - 12", "contents": "DecimalToBinary(${1:const iDecimal}, ${2:szBinary[ ]}, ${3:const iBinaryLen})" },
		{ "trigger": "DecimalToHex\tnumber_convert.inc - 8", "contents": "DecimalToHex(${1:const iDecimal}, ${2:szHexResult[ ]}, ${3:const iHexLen})" },
		{ "trigger": "DestroyForward\tamxmodx.inc - 1023", "contents": "DestroyForward(${1:forward_handle})" },
		{ "trigger": "DestroyTravTrieIterator\tcelltravtrie.inc - 252", "contents": "DestroyTravTrieIterator(${1:&travTrieIter:dp})" },
		{ "trigger": "DisableHamForward\thamsandwich.inc - 91", "contents": "DisableHamForward(${1:HamHook:fwd})" },
		{ "trigger": "DisableHamForwardBots\tcs_ham_bots_api.inc - 33", "contents": "DisableHamForwardBots(${1:fwd})" },
		{ "trigger": "DispatchKeyValue\tVexdUM.inc - 30", "contents": "DispatchKeyValue(${1:ent}, ${2:szKey[]}, ${3:szValue[]})" },
		{ "trigger": "DispatchSpawn\tengine.inc - 143", "contents": "DispatchSpawn(${1:iIndex})" },
		{ "trigger": "EF_AllocString\tfakemeta_stocks.inc - 113", "contents": "EF_AllocString(${1:const STRING[]})" },
		{ "trigger": "EF_AngleVectors\tfakemeta_stocks.inc - 58", "contents": "EF_AngleVectors(${1:const Float:VECTOR[3]}, ${2:Float:forward_[3]}, ${3:Float:right[3]}, ${4:Float:up[3]})" },
		{ "trigger": "EF_AnimationAutomove\tfakemeta_stocks.inc - 118", "contents": "EF_AnimationAutomove(${1:const ENTITY}, ${2:Float:flTime})" },
		{ "trigger": "EF_BuildSoundMSG\tfakemeta_stocks.inc - 146", "contents": "EF_BuildSoundMSG(${1:const ENTITY}, ${2:channel}, ${3:const SAMPLE[]}, ${4:Float:volume}, ${5:Float:attenuation}, ${6:fFlags}, ${7:pitch}, ${8:msg_dest}, ${9:msg_type}, ${10:const Float:ORIGIN[3]}, ${11:const ED})" },
		{ "trigger": "EF_CanSkipPlayer\tfakemeta_stocks.inc - 164", "contents": "EF_CanSkipPlayer(${1:const PLAYER})" },
		{ "trigger": "EF_ChangeLevel\tfakemeta_stocks.inc - 32", "contents": "EF_ChangeLevel(${1:const S1[]}, ${2:const S2[]})" },
		{ "trigger": "EF_ChangePitch\tfakemeta_stocks.inc - 43", "contents": "EF_ChangePitch(${1:const ENTITY})" },
		{ "trigger": "EF_ChangeYaw\tfakemeta_stocks.inc - 41", "contents": "EF_ChangeYaw(${1:const ENTITY})" },
		{ "trigger": "EF_CheckVisibility\tfakemeta_stocks.inc - 159", "contents": "EF_CheckVisibility(${1:const ENTITY}, ${2:set})" },
		{ "trigger": "EF_ClientPrintf\tfakemeta_stocks.inc - 194", "contents": "EF_ClientPrintf(${1:const ENTITY}, ${2:const printType}, ${3:const MESSAGE[]})" },
		{ "trigger": "EF_CreateEntity\tfakemeta_stocks.inc - 60", "contents": "EF_CreateEntity()" },
		{ "trigger": "EF_CreateFakeClient\tfakemeta_stocks.inc - 135", "contents": "EF_CreateFakeClient(${1:const NETNAME[]})" },
		{ "trigger": "EF_CreateInstBaseline\tfakemeta_stocks.inc - 187", "contents": "EF_CreateInstBaseline(${1:CLASSNAME}, ${2:baseline})" },
		{ "trigger": "EF_CreateNamedEntity\tfakemeta_stocks.inc - 65", "contents": "EF_CreateNamedEntity(${1:const CLASSNAME})" },
		{ "trigger": "EF_CrosshairAngle\tfakemeta_stocks.inc - 129", "contents": "EF_CrosshairAngle(${1:const CLIENT}, ${2:Float:pitch}, ${3:Float:yaw})" },
		{ "trigger": "EF_DecalIndex\tfakemeta_stocks.inc - 104", "contents": "EF_DecalIndex(${1:const NAME[]})" },
		{ "trigger": "EF_DropToFloor\tfakemeta_stocks.inc - 71", "contents": "EF_DropToFloor(${1:const ENTITY})" },
		{ "trigger": "EF_EmitAmbientSound\tfakemeta_stocks.inc - 80", "contents": "EF_EmitAmbientSound(${1:const ENTITY}, ${2:Float:pos[3]}, ${3:const SAMPLE[]}, ${4:Float:volume}, ${5:Float:attenuation}, ${6:fFlags}, ${7:pitch})" },
		{ "trigger": "EF_EmitSound\tfakemeta_stocks.inc - 78", "contents": "EF_EmitSound(${1:const ENTITY}, ${2:channel}, ${3:const SAMPLE[]}, ${4:Float:volume}, ${5:Float:attenuation}, ${6:fFlags}, ${7:pitch})" },
		{ "trigger": "EF_EntIsOnFloor\tfakemeta_stocks.inc - 69", "contents": "EF_EntIsOnFloor(${1:const ENTITY})" },
		{ "trigger": "EF_EntitiesInPVS\tfakemeta_stocks.inc - 54", "contents": "EF_EntitiesInPVS(${1:const CLIENT})" },
		{ "trigger": "EF_FadeClientVolume\tfakemeta_stocks.inc - 131", "contents": "EF_FadeClientVolume(${1:const ENTITY}, ${2:fadePercent}, ${3:fadeOutSeconds}, ${4:holdTime}, ${5:fadeInSeconds})" },
		{ "trigger": "EF_FindClientInPVS\tfakemeta_stocks.inc - 52", "contents": "EF_FindClientInPVS(${1:const CLIENT})" },
		{ "trigger": "EF_FindEntityByString\tfakemeta_stocks.inc - 45", "contents": "EF_FindEntityByString(${1:const STARTSEARCHAFTER}, ${2:const FIELD[]}, ${3:const VALUE[]})" },
		{ "trigger": "EF_FindEntityInSphere\tfakemeta_stocks.inc - 49", "contents": "EF_FindEntityInSphere(${1:const STARTSEARCHAFTER}, ${2:const Float:ORIGIN[3]}, ${3:Float:radius})" },
		{ "trigger": "EF_FreeEntPrivateData\tfakemeta_stocks.inc - 109", "contents": "EF_FreeEntPrivateData(${1:const ENTITY})" },
		{ "trigger": "EF_GetAimVector\tfakemeta_stocks.inc - 98", "contents": "EF_GetAimVector(${1:const ENTITY}, ${2:Float:speed}, ${3:Float:returnVector[3]})" },
		{ "trigger": "EF_GetAttachment\tfakemeta_stocks.inc - 122", "contents": "EF_GetAttachment(${1:const ENTITY}, ${2:iAttachment}, ${3:Float:origin[3]}, ${4:Float:angles[3]})" },
		{ "trigger": "EF_GetBonePosition\tfakemeta_stocks.inc - 120", "contents": "EF_GetBonePosition(${1:const ENTITY}, ${2:iBone}, ${3:Float:origin[3]}, ${4:Float:angles[3]})" },
		{ "trigger": "EF_GetClientListening\tfakemeta_stocks.inc - 168", "contents": "EF_GetClientListening(${1:receiver}, ${2:sender})" },
		{ "trigger": "EF_GetCurrentPlayer\tfakemeta_stocks.inc - 162", "contents": "EF_GetCurrentPlayer()" },
		{ "trigger": "EF_GetEntityIllum\tfakemeta_stocks.inc - 47", "contents": "EF_GetEntityIllum(${1:const ENTITY})" },
		{ "trigger": "EF_GetInfoKeyBuffer\tfakemeta_stocks.inc - 192", "contents": "EF_GetInfoKeyBuffer(${1:const ENTITY})" },
		{ "trigger": "EF_GetPhysicsInfoString\tfakemeta_stocks.inc - 153", "contents": "EF_GetPhysicsInfoString(${1:const CLIENT}, ${2:returnString[]}, ${3:maxLength})" },
		{ "trigger": "EF_GetPhysicsKeyValue\tfakemeta_stocks.inc - 148", "contents": "EF_GetPhysicsKeyValue(${1:const CLIENT}, ${2:const KEY[]})" },
		{ "trigger": "EF_InfoKeyValue\tfakemeta_stocks.inc - 179", "contents": "EF_InfoKeyValue(${1:const INFOBUFFER}, ${2:const KEY[]}, ${3:returnValue[]}, ${4:maxLength})" },
		{ "trigger": "EF_LightStyle\tfakemeta_stocks.inc - 102", "contents": "EF_LightStyle(${1:style}, ${2:val[]})" },
		{ "trigger": "EF_MakeStatic\tfakemeta_stocks.inc - 67", "contents": "EF_MakeStatic(${1:const ENTITY})" },
		{ "trigger": "EF_MakeVectors\tfakemeta_stocks.inc - 56", "contents": "EF_MakeVectors(${1:const Float:VECTOR[3]})" },
		{ "trigger": "EF_MessageBegin\tfakemeta_stocks.inc - 173", "contents": "EF_MessageBegin(${1:msg_dest}, ${2:msg_type}, ${3:const Float:ORIGIN[3]}, ${4:const ED})" },
		{ "trigger": "EF_ModelFrames\tfakemeta_stocks.inc - 27", "contents": "EF_ModelFrames(${1:modelIndex})" },
		{ "trigger": "EF_ModelIndex\tfakemeta_stocks.inc - 25", "contents": "EF_ModelIndex(${1:const STRING[]})" },
		{ "trigger": "EF_MoveToOrigin\tfakemeta_stocks.inc - 38", "contents": "EF_MoveToOrigin(${1:const ENTITY}, ${2:const Float:GOAL[3]}, ${3:const Float:DISTANCE}, ${4:const MOVETYPE})" },
		{ "trigger": "EF_NumberOfEntities\tfakemeta_stocks.inc - 140", "contents": "EF_NumberOfEntities()" },
		{ "trigger": "EF_ParticleEffect\tfakemeta_stocks.inc - 100", "contents": "EF_ParticleEffect(${1:const Float:ORIGIN[3]}, ${2:const Float:DIRECTION[3]}, ${3:Float:color}, ${4:Float:count})" },
		{ "trigger": "EF_PlaybackEvent\tfakemeta_stocks.inc - 157", "contents": "EF_PlaybackEvent(${1:flags}, ${2:const INVOKER}, ${3:eventindex}, ${4:Float:delay}, ${5:Float:origin[3]}, ${6:Float:angles[3]}, ${7:Float:fparam1}, ${8:Float:fparam2}, ${9:iparam1}, ${10:iparam2}, ${11:bparam1}, ${12:bparam2})" },
		{ "trigger": "EF_PointContents\tfakemeta_stocks.inc - 107", "contents": "EF_PointContents(${1:const Float:VECTOR[3]})" },
		{ "trigger": "EF_PrecacheEvent\tfakemeta_stocks.inc - 155", "contents": "EF_PrecacheEvent(${1:type}, ${2:const STRING[]})" },
		{ "trigger": "EF_PrecacheGeneric\tfakemeta_stocks.inc - 144", "contents": "EF_PrecacheGeneric(${1:const STRING[]})" },
		{ "trigger": "EF_PrecacheModel\tfakemeta_stocks.inc - 18", "contents": "EF_PrecacheModel(${1:const string[]})" },
		{ "trigger": "EF_PrecacheSound\tfakemeta_stocks.inc - 21", "contents": "EF_PrecacheSound(${1:const string[]})" },
		{ "trigger": "EF_RegUserMsg\tfakemeta_stocks.inc - 115", "contents": "EF_RegUserMsg(${1:const NAME[]}, ${2:iSize})" },
		{ "trigger": "EF_RemoveEntity\tfakemeta_stocks.inc - 63", "contents": "EF_RemoveEntity(${1:const ENTITY})" },
		{ "trigger": "EF_RunPlayerMove\tfakemeta_stocks.inc - 137", "contents": "EF_RunPlayerMove(${1:const FAKECLIENT}, ${2:const Float:VIEWANGLES[3]}, ${3:Float:forwardmove}, ${4:Float:sidemove}, ${5:Float:upmove}, ${6:buttons}, ${7:impulse}, ${8:msec})" },
		{ "trigger": "EF_ServerPrint\tfakemeta_stocks.inc - 196", "contents": "EF_ServerPrint(${1:const MESSAGE[]})" },
		{ "trigger": "EF_SetClientKeyValue\tfakemeta_stocks.inc - 184", "contents": "EF_SetClientKeyValue(${1:const ID}, ${2:const INFOBUFFER}, ${3:const KEY[]}, ${4:const VALUE[]})" },
		{ "trigger": "EF_SetClientListening\tfakemeta_stocks.inc - 170", "contents": "EF_SetClientListening(${1:receiver}, ${2:sender}, ${3:bool:listen})" },
		{ "trigger": "EF_SetClientMaxspeed\tfakemeta_stocks.inc - 133", "contents": "EF_SetClientMaxspeed(${1:const ENTITY}, ${2:Float:newMaxspeed})" },
		{ "trigger": "EF_SetGroupMask\tfakemeta_stocks.inc - 166", "contents": "EF_SetGroupMask(${1:mask}, ${2:op})" },
		{ "trigger": "EF_SetKeyValue\tfakemeta_stocks.inc - 181", "contents": "EF_SetKeyValue(${1:const INFOBUFFER}, ${2:const KEY[]}, ${3:const VALUE[]})" },
		{ "trigger": "EF_SetModel\tfakemeta_stocks.inc - 23", "contents": "EF_SetModel(${1:const ID}, ${2:const STRING[]})" },
		{ "trigger": "EF_SetOrigin\tfakemeta_stocks.inc - 76", "contents": "EF_SetOrigin(${1:const ENTITY}, ${2:const Float:ORIGIN[3]})" },
		{ "trigger": "EF_SetPhysicsKeyValue\tfakemeta_stocks.inc - 151", "contents": "EF_SetPhysicsKeyValue(${1:const CLIENT}, ${2:const KEY[]}, ${3:const VALUE[]})" },
		{ "trigger": "EF_SetSize\tfakemeta_stocks.inc - 30", "contents": "EF_SetSize(${1:const ENTITY}, ${2:const Float:MIN[3]}, ${3:const Float:MAX[3]})" },
		{ "trigger": "EF_SetView\tfakemeta_stocks.inc - 124", "contents": "EF_SetView(${1:const CLIENT}, ${2:const VIEW_ENTITY})" },
		{ "trigger": "EF_StaticDecal\tfakemeta_stocks.inc - 142", "contents": "EF_StaticDecal(${1:const Float:ORIGIN[3]}, ${2:decalIndex}, ${3:entityIndex}, ${4:modelIndex})" },
		{ "trigger": "EF_SzFromIndex\tfakemeta_stocks.inc - 111", "contents": "EF_SzFromIndex(${1:iString})" },
		{ "trigger": "EF_Time\tfakemeta_stocks.inc - 126", "contents": "EF_Time(${1:&Float:returnValue})" },
		{ "trigger": "EF_TraceHull\tfakemeta_stocks.inc - 89", "contents": "EF_TraceHull(${1:const Float:V1[3]}, ${2:const Float:V2[3]}, ${3:fNoMonsters}, ${4:hullNumber}, ${5:const ENTITY_TO_SKIP})" },
		{ "trigger": "EF_TraceLine\tfakemeta_stocks.inc - 82", "contents": "EF_TraceLine(${1:const Float:V1[3]}, ${2:const Float:V2[3]}, ${3:fNoMonsters}, ${4:const ENT_TO_SKIP})" },
		{ "trigger": "EF_TraceModel\tfakemeta_stocks.inc - 91", "contents": "EF_TraceModel(${1:const Float:V1[3]}, ${2:const Float:V2[3]}, ${3:hullNumber}, ${4:const ENTITY})" },
		{ "trigger": "EF_TraceMonsterHull\tfakemeta_stocks.inc - 87", "contents": "EF_TraceMonsterHull(${1:const ENTITY}, ${2:const Float:V1[3]}, ${3:const Float:V2[3]}, ${4:fNoMonsters}, ${5:const ENTITY_TO_SKIP})" },
		{ "trigger": "EF_TraceSphere\tfakemeta_stocks.inc - 96", "contents": "EF_TraceSphere(${1:const Float:V1[3]}, ${2:const Float:V2[3]}, ${3:fNoMonsters}, ${4:Float:radius}, ${5:const ENTITY_TO_SKIP})" },
		{ "trigger": "EF_TraceTexture\tfakemeta_stocks.inc - 93", "contents": "EF_TraceTexture(${1:const TEXTURE_ENTITY}, ${2:const Float:V1[3]}, ${3:const Float:V2[3]})" },
		{ "trigger": "EF_TraceToss\tfakemeta_stocks.inc - 85", "contents": "EF_TraceToss(${1:const ENTITY}, ${2:const ENTITY_TO_IGNORE})" },
		{ "trigger": "EF_VecToAngles\tfakemeta_stocks.inc - 36", "contents": "EF_VecToAngles(${1:const Float:VECTORIN[3]}, ${2:const Float:VECTOROUT[3]})" },
		{ "trigger": "EF_VecToYaw\tfakemeta_stocks.inc - 34", "contents": "EF_VecToYaw(${1:const Float:VECTOR[3]}, ${2:&Float:returnValue})" },
		{ "trigger": "EF_WalkMove\tfakemeta_stocks.inc - 74", "contents": "EF_WalkMove(${1:const ENTITY}, ${2:Float:yaw}, ${3:Float:distance}, ${4:iMode})" },
		{ "trigger": "EF_WriteAngle\tfakemeta_stocks.inc - 177", "contents": "EF_WriteAngle(${1:Float:value})" },
		{ "trigger": "EF_WriteCoord\tfakemeta_stocks.inc - 175", "contents": "EF_WriteCoord(${1:Float:value})" },
		{ "trigger": "ENT_SetModel\tVexd_Utilities.inc - 59", "contents": "ENT_SetModel(${1:iIndex}, ${2:szModel[]})" },
		{ "trigger": "ENT_SetOrigin\tVexd_Utilities.inc - 62", "contents": "ENT_SetOrigin(${1:iIndex}, ${2:Float:fNewOrigin[3]})" },
		{ "trigger": "EnableHamForward\thamsandwich.inc - 99", "contents": "EnableHamForward(${1:HamHook:fwd})" },
		{ "trigger": "EnableHamForwardBots\tcs_ham_bots_api.inc - 41", "contents": "EnableHamForwardBots(${1:fwd})" },
		{ "trigger": "Entvars_Get_Byte\tVexd_Utilities.inc - 50", "contents": "Entvars_Get_Byte(${1:iIndex}, ${2:iVariable})" },
		{ "trigger": "Entvars_Get_Edict\tVexd_Utilities.inc - 38", "contents": "Entvars_Get_Edict(${1:iIndex}, ${2:iVariable})" },
		{ "trigger": "Entvars_Get_Float\tVexd_Utilities.inc - 26", "contents": "Entvars_Get_Float(${1:iIndex}, ${2:iVariable})" },
		{ "trigger": "Entvars_Get_Int\tVexd_Utilities.inc - 20", "contents": "Entvars_Get_Int(${1:iIndex}, ${2:iVariable})" },
		{ "trigger": "Entvars_Get_String\tVexd_Utilities.inc - 44", "contents": "Entvars_Get_String(${1:iIndex}, ${2:iVariable}, ${3:szReturnValue[]}, ${4:iReturnLen})" },
		{ "trigger": "Entvars_Get_Vector\tVexd_Utilities.inc - 32", "contents": "Entvars_Get_Vector(${1:iIndex}, ${2:iVariable}, ${3:Float:vRetVector[3]})" },
		{ "trigger": "Entvars_Set_Byte\tVexd_Utilities.inc - 53", "contents": "Entvars_Set_Byte(${1:iIndex}, ${2:iVariable}, ${3:iNewValue})" },
		{ "trigger": "Entvars_Set_Edict\tVexd_Utilities.inc - 41", "contents": "Entvars_Set_Edict(${1:iIndex}, ${2:iVariable}, ${3:iNewIndex})" },
		{ "trigger": "Entvars_Set_Float\tVexd_Utilities.inc - 29", "contents": "Entvars_Set_Float(${1:iIndex}, ${2:iVariable}, ${3:Float:fNewValue})" },
		{ "trigger": "Entvars_Set_Int\tVexd_Utilities.inc - 23", "contents": "Entvars_Set_Int(${1:iIndex}, ${2:iVariable}, ${3:iNewValue})" },
		{ "trigger": "Entvars_Set_String\tVexd_Utilities.inc - 47", "contents": "Entvars_Set_String(${1:iIndex}, ${2:iVariable}, ${3:szNewValue[]})" },
		{ "trigger": "Entvars_Set_Vector\tVexd_Utilities.inc - 35", "contents": "Entvars_Set_Vector(${1:iIndex}, ${2:iVariable}, ${3:Float:vNewVector[3]})" },
		{ "trigger": "ExecuteForward\tamxmodx.inc - 1018", "contents": "ExecuteForward(${1:forward_handle}, ${2:&ret}, ${3:any:...})" },
		{ "trigger": "ExecuteHam\thamsandwich.inc - 108", "contents": "ExecuteHam(${1:Ham:function}, ${2:this}, ${3:any:...})" },
		{ "trigger": "ExecuteHamB\thamsandwich.inc - 118", "contents": "ExecuteHamB(${1:Ham:function}, ${2:this}, ${3:any:...})" },
		{ "trigger": "FRC_flash_player\tfrc.inc - 272", "contents": "FRC_flash_player(${1:flasher = 0}, ${2:flashed}, ${3:duration}, ${4:holdtime}, ${5:Amnt:ammount})" },
		{ "trigger": "FTP_Close\tftp.inc - 91", "contents": "FTP_Close()" },
		{ "trigger": "FTP_GetFile\tftp.inc - 109", "contents": "FTP_GetFile(${1:szLocalFile[]}, ${2:szRemoteFile[]}, ${3:szForward[]=\"\"})" },
		{ "trigger": "FTP_GetList\tftp.inc - 114", "contents": "FTP_GetList(${1:szLocalFile[]}, ${2:szRemoteFile[]}, ${3:szForward[]=\"\"})" },
		{ "trigger": "FTP_Open\tftp.inc - 68", "contents": "FTP_Open(${1:const szServer[]}, ${2:const iPort=21}, ${3:const szUser[]}, ${4:const szPassword[]}, ${5:const szForward[]=\"\"})" },
		{ "trigger": "FTP_Ready\tftp.inc - 119", "contents": "FTP_Ready()" },
		{ "trigger": "FTP_SendFile\tftp.inc - 104", "contents": "FTP_SendFile(${1:szLocalFile[]}, ${2:szRemoteFile[]}, ${3:szForward[]=\"\"})" },
		{ "trigger": "FVecIVec\tvector.inc - 52", "contents": "FVecIVec(${1:const Float:FVec[3]}, ${2:IVec[3]})" },
		{ "trigger": "FakeTouch\tVexd_Utilities.inc - 95", "contents": "FakeTouch(${1:iToucher}, ${2:iTouched})" },
		{ "trigger": "FindEntity\tVexd_Utilities.inc - 65", "contents": "FindEntity(${1:iIndex}, ${2:szValue[]})" },
		{ "trigger": "FixedUnsigned16\tscreenfade_util.inc - 17", "contents": "FixedUnsigned16(${1:Float:flValue}, ${2:iScale})" },
		{ "trigger": "GetAnnouncedReleaseDate\tamtime.inc - 7", "contents": "GetAnnouncedReleaseDate()" },
		{ "trigger": "GetDigits\tnumber_convert.inc - 28", "contents": "GetDigits(${1:const iValue}, ${2:iDigits[ ] = \"\"}, ${3:const iDigitSize = 0}, ${4:const iBase = 10}, ${5:bool:bKeepDigitOrder = false})" },
		{ "trigger": "GetHamReturnEntity\thamsandwich.inc - 154", "contents": "GetHamReturnEntity(${1:&output})" },
		{ "trigger": "GetHamReturnFloat\thamsandwich.inc - 140", "contents": "GetHamReturnFloat(${1:&Float:output})" },
		{ "trigger": "GetHamReturnInteger\thamsandwich.inc - 133", "contents": "GetHamReturnInteger(${1:&output})" },
		{ "trigger": "GetHamReturnStatus\thamsandwich.inc - 126", "contents": "GetHamReturnStatus()" },
		{ "trigger": "GetHamReturnString\thamsandwich.inc - 162", "contents": "GetHamReturnString(${1:output[]}, ${2:size})" },
		{ "trigger": "GetHamReturnVector\thamsandwich.inc - 147", "contents": "GetHamReturnVector(${1:Float:output[3]})" },
		{ "trigger": "GetLangTransKey\tlang.inc - 42", "contents": "GetLangTransKey(${1:const key[]})" },
		{ "trigger": "GetMessageBlock\tVexd_Utilities.inc - 89", "contents": "GetMessageBlock(${1:iMessage})" },
		{ "trigger": "GetOrigHamReturnEntity\thamsandwich.inc - 190", "contents": "GetOrigHamReturnEntity(${1:&output})" },
		{ "trigger": "GetOrigHamReturnFloat\thamsandwich.inc - 176", "contents": "GetOrigHamReturnFloat(${1:&Float:output})" },
		{ "trigger": "GetOrigHamReturnInteger\thamsandwich.inc - 169", "contents": "GetOrigHamReturnInteger(${1:&output})" },
		{ "trigger": "GetOrigHamReturnString\thamsandwich.inc - 198", "contents": "GetOrigHamReturnString(${1:output[]}, ${2:size})" },
		{ "trigger": "GetOrigHamReturnVector\thamsandwich.inc - 183", "contents": "GetOrigHamReturnVector(${1:Float:output[3]})" },
		{ "trigger": "GetReleaseDate\tamtime.inc - 16", "contents": "GetReleaseDate(${1:MOD:Mod})" },
		{ "trigger": "GetTravTrieArray\tadt_travtrie.inc - 69", "contents": "GetTravTrieArray(${1:Handle:trie}, ${2:const String:key[]}, ${3:const array[]}, ${4:num_items}, ${5:&size=0})" },
		{ "trigger": "GetTravTrieIterator\tadt_travtrie.inc - 115", "contents": "GetTravTrieIterator(${1:Handle:trie})" },
		{ "trigger": "GetTravTrieSize\tadt_travtrie.inc - 101", "contents": "GetTravTrieSize(${1:Handle:trie})" },
		{ "trigger": "GetTravTrieString\tadt_travtrie.inc - 74", "contents": "GetTravTrieString(${1:Handle:trie}, ${2:const String:key[]}, ${3:String:value[]}, ${4:max_size}, ${5:&size=0})" },
		{ "trigger": "GetTravTrieValue\tadt_travtrie.inc - 64", "contents": "GetTravTrieValue(${1:Handle:trie}, ${2:const String:key[]}, ${3:&any:value})" },
		{ "trigger": "GetUserExtraInfo\tgetuserextrainfo.inc - 6", "contents": "GetUserExtraInfo(${1:const UserKey[]}, ${2:Output[]}, ${3:len})" },
		{ "trigger": "HLTime\tVexd_Utilities.inc - 92", "contents": "HLTime()" },
		{ "trigger": "HashClear\thash.inc - 29", "contents": "HashClear(${1:1%})" },
		{ "trigger": "HashCreate\thash.inc - 28", "contents": "HashCreate(${1:&quot;})" },
		{ "trigger": "HashDeleteKey\thash.inc - 33", "contents": "HashDeleteKey(${1:%1}, ${2:%2})" },
		{ "trigger": "HashDestroy\thash.inc - 30", "contents": "HashDestroy(${1:1%})" },
		{ "trigger": "HashGetArray\thash.inc - 41", "contents": "HashGetArray(${1:%1}, ${2:%2}, ${3:%3}, ${4:%4})" },
		{ "trigger": "HashGetCell\thash.inc - 39", "contents": "HashGetCell(${1:%1}, ${2:%2}, ${3:%3})" },
		{ "trigger": "HashGetString\thash.inc - 40", "contents": "HashGetString(${1:%1}, ${2:%2}, ${3:%3}, ${4:%4})" },
		{ "trigger": "HashKeyExists\thash.inc - 32", "contents": "HashKeyExists(${1:%1}, ${2:%2})" },
		{ "trigger": "HashSetArray\thash.inc - 37", "contents": "HashSetArray(${1:%1}, ${2:%2}, ${3:%3}, ${4:%4})" },
		{ "trigger": "HashSetCell\thash.inc - 35", "contents": "HashSetCell(${1:%1}, ${2:%2}, ${3:%3})" },
		{ "trigger": "HashSetString\thash.inc - 36", "contents": "HashSetString(${1:%1}, ${2:%2}, ${3:%3})" },
		{ "trigger": "HashXClear\thashx.inc - 47", "contents": "HashXClear(${1:HashX:handle})" },
		{ "trigger": "HashXCreate\thashx.inc - 38", "contents": "HashXCreate(${1:&quot;})" },
		{ "trigger": "HashXDeleteKey\thashx.inc - 74", "contents": "HashXDeleteKey(${1:HashX:handle}, ${2:const key[]})" },
		{ "trigger": "HashXDestroy\thashx.inc - 62", "contents": "HashXDestroy(${1:&HashX:handle})" },
		{ "trigger": "HashXForEach\thashx.inc - 193", "contents": "HashXForEach(${1:{HashX}, ${2:_}:id}, ${3:HashX:handle}, ${4:func[]}, ${5:hashx_types = 0})" },
		{ "trigger": "HashXGetArray\thashx.inc - 45", "contents": "HashXGetArray(${1:%1}, ${2:%2}, ${3:%3}, ${4:%4})" },
		{ "trigger": "HashXGetCell\thashx.inc - 43", "contents": "HashXGetCell(${1:%1}, ${2:%2}, ${3:%3})" },
		{ "trigger": "HashXGetKeys\thashx.inc - 217", "contents": "HashXGetKeys(${1:HashX:handle})" },
		{ "trigger": "HashXGetString\thashx.inc - 44", "contents": "HashXGetString(${1:%1}, ${2:%2}, ${3:%3})" },
		{ "trigger": "HashXKeyExists\thashx.inc - 40", "contents": "HashXKeyExists(${1:%1}, ${2:%2})" },
		{ "trigger": "HashXKeyType\thashx.inc - 140", "contents": "HashXKeyType(${1:HashX:handle}, ${2:key[]})" },
		{ "trigger": "HashXSetArray\thashx.inc - 135", "contents": "HashXSetArray(${1:HashX:handle}, ${2:const key[]}, ${3:const any:buffer[]}, ${4:size})" },
		{ "trigger": "HashXSetCell\thashx.inc - 125", "contents": "HashXSetCell(${1:HashX:handle}, ${2:const key[]}, ${3:any:value})" },
		{ "trigger": "HashXSetString\thashx.inc - 130", "contents": "HashXSetString(${1:HashX:handle}, ${2:const key[]}, ${3:const value[]})" },
		{ "trigger": "HashXSize\thashx.inc - 231", "contents": "HashXSize(${1:HashX:handle})" },
		{ "trigger": "HexToBinary\tnumber_convert.inc - 16", "contents": "HexToBinary(${1:const szHex[ ]}, ${2:szBinaryResult[ ]}, ${3:const iBinaryLen})" },
		{ "trigger": "HexToDecimal\tnumber_convert.inc - 6", "contents": "HexToDecimal(${1:const szHex[ ]})" },
		{ "trigger": "IVecFVec\tvector.inc - 42", "contents": "IVecFVec(${1:const IVec[3]}, ${2:Float:FVec[3]})" },
		{ "trigger": "IsHamValid\thamsandwich.inc - 306", "contents": "IsHamValid(${1:Ham:function})" },
		{ "trigger": "IsInWorld\tengine_stocks.inc - 232", "contents": "IsInWorld(${1:ent})" },
		{ "trigger": "IsLeapYear\tunixtime.inc - 135", "contents": "IsLeapYear(${1:const iYear})" },
		{ "trigger": "IsUserBleeding\tvrmod.inc - 7", "contents": "IsUserBleeding(${1:const index})" },
		{ "trigger": "IsValidTeam\tcsdm.inc - 283", "contents": "IsValidTeam(${1:team})" },
		{ "trigger": "LibraryExists\tamxmodx.inc - 920", "contents": "LibraryExists(${1:const library[]}, ${2:LibType:type})" },
		{ "trigger": "LoadFileForMe\tfile.inc - 134", "contents": "LoadFileForMe(${1:const file[]}, ${2:buffer[]}, ${3:maxlength}, ${4:&length=0})" },
		{ "trigger": "LookupLangKey\tlang.inc - 56", "contents": "LookupLangKey(${1:Output[]}, ${2:OutputSize}, ${3:const Key[]}, ${4:const &id})" },
		{ "trigger": "Melee_Attack\ttsfun.inc - 39", "contents": "Melee_Attack(${1:id}, ${2:Float:time}, ${3:Float:damage}, ${4:UNAVAILABLE})" },
		{ "trigger": "MessageBlock\tVexd_Utilities.inc - 86", "contents": "MessageBlock(${1:iMessage}, ${2:iMessageFlags})" },
		{ "trigger": "MinSize\tnvault_util.inc - 28", "contents": "MinSize(${1:%1}, ${2:%2})" },
		{ "trigger": "MoreTravTrie\tadt_travtrie.inc - 184", "contents": "MoreTravTrie(${1:Handle:dp})" },
		{ "trigger": "NDimCreate\tndimarray.inc - 31", "contents": "NDimCreate(${1:const cellsize=1}, ${2:...})" },
		{ "trigger": "NDimDestroy\tndimarray.inc - 60", "contents": "NDimDestroy(${1:&NDim:tracker})" },
		{ "trigger": "NDimFillArray\tndimarray.inc - 224", "contents": "NDimFillArray(${1:const NDim:tracker}, ${2:const any:input[]})" },
		{ "trigger": "NDimFillCell\tndimarray.inc - 206", "contents": "NDimFillCell(${1:const NDim:tracker}, ${2:const any:input})" },
		{ "trigger": "NDimFillString\tndimarray.inc - 242", "contents": "NDimFillString(${1:const NDim:tracker}, ${2:const input[]})" },
		{ "trigger": "NDimGetArray\tndimarray.inc - 97", "contents": "NDimGetArray(${1:const NDim:tracker}, ${2:data[]}, ${3:...})" },
		{ "trigger": "NDimGetCell\tndimarray.inc - 75", "contents": "NDimGetCell(${1:const NDim:tracker}, ${2:...})" },
		{ "trigger": "NDimGetString\tndimarray.inc - 119", "contents": "NDimGetString(${1:const NDim:tracker}, ${2:output[]}, ${3:const size}, ${4:...})" },
		{ "trigger": "NDimSetArray\tndimarray.inc - 163", "contents": "NDimSetArray(${1:const NDim:tracker}, ${2:const any:input[]}, ${3:...})" },
		{ "trigger": "NDimSetCell\tndimarray.inc - 141", "contents": "NDimSetCell(${1:const NDim:tracker}, ${2:const any:input}, ${3:...})" },
		{ "trigger": "NDimSetString\tndimarray.inc - 185", "contents": "NDimSetString(${1:const NDim:tracker}, ${2:const input[]}, ${3:...})" },
		{ "trigger": "OrpheuCall\torpheu.inc - 44", "contents": "OrpheuCall(${1:OrpheuFunction:function}, ${2:any:...})" },
		{ "trigger": "OrpheuCallSuper\torpheu.inc - 52", "contents": "OrpheuCallSuper(${1:OrpheuFunction:function}, ${2:any:...})" },
		{ "trigger": "OrpheuCloneStructFromParam\torpheu.inc - 123", "contents": "OrpheuCloneStructFromParam(${1:num})" },
		{ "trigger": "OrpheuCreateFunction\torpheu_advanced.inc - 46", "contents": "OrpheuCreateFunction(${1:address}, ${2:const libFunctionName[]}, ${3:const classname[]=\"\"})" },
		{ "trigger": "OrpheuCreateStruct\torpheu.inc - 84", "contents": "OrpheuCreateStruct(${1:OrpheuStructType:structType})" },
		{ "trigger": "OrpheuGetBytesAtAddress\torpheu_advanced.inc - 16", "contents": "OrpheuGetBytesAtAddress(${1:address}, ${2:bytes[]}, ${3:count})" },
		{ "trigger": "OrpheuGetDLLFunction\torpheu_stocks.inc - 50", "contents": "OrpheuGetDLLFunction(${1:const memberName[]}, ${2:const libFunctionName[]})" },
		{ "trigger": "OrpheuGetDLLFunctionsStruct\torpheu.inc - 161", "contents": "OrpheuGetDLLFunctionsStruct()" },
		{ "trigger": "OrpheuGetEngineFunction\torpheu_stocks.inc - 25", "contents": "OrpheuGetEngineFunction(${1:const memberName[]}, ${2:const libFunctionName[]})" },
		{ "trigger": "OrpheuGetEngineFunctionsStruct\torpheu.inc - 152", "contents": "OrpheuGetEngineFunctionsStruct()" },
		{ "trigger": "OrpheuGetFunction\torpheu.inc - 18", "contents": "OrpheuGetFunction(${1:const libFunctionName[]}, ${2:const className[]=\"\"})" },
		{ "trigger": "OrpheuGetFunctionAddress\torpheu_advanced.inc - 25", "contents": "OrpheuGetFunctionAddress(${1:OrpheuFunction:function})" },
		{ "trigger": "OrpheuGetFunctionFromClass\torpheu.inc - 175", "contents": "OrpheuGetFunctionFromClass(${1:const entityClassName[]}, ${2:const libFunctionName[]}, ${3:const libClassName[]})" },
		{ "trigger": "OrpheuGetFunctionFromEntity\torpheu.inc - 189", "contents": "OrpheuGetFunctionFromEntity(${1:id}, ${2:const libFunctionName[]}, ${3:const libClassName[]})" },
		{ "trigger": "OrpheuGetFunctionFromMonster\torpheu.inc - 220", "contents": "OrpheuGetFunctionFromMonster(${1:id}, ${2:const libFunctionName[]}, ${3:const libClassName[]})" },
		{ "trigger": "OrpheuGetFunctionFromObject\torpheu.inc - 203", "contents": "OrpheuGetFunctionFromObject(${1:object}, ${2:const libFunctionName[]}, ${3:const libClassName[]})" },
		{ "trigger": "OrpheuGetFunctionOffset\torpheu_advanced.inc - 55", "contents": "OrpheuGetFunctionOffset(${1:OrpheuFunction:function})" },
		{ "trigger": "OrpheuGetLibraryAddress\torpheu_advanced.inc - 64", "contents": "OrpheuGetLibraryAddress(${1:const libraryName[]})" },
		{ "trigger": "OrpheuGetNextCallAtAddress\torpheu_advanced.inc - 77", "contents": "OrpheuGetNextCallAtAddress(${1:address}, ${2:number})" },
		{ "trigger": "OrpheuGetParamStructMember\torpheu.inc - 95", "contents": "OrpheuGetParamStructMember(${1:num}, ${2:const memberName[]}, ${3:any:...})" },
		{ "trigger": "OrpheuGetReturn\torpheu.inc - 60", "contents": "OrpheuGetReturn(${1:any:...})" },
		{ "trigger": "OrpheuGetStructFromAddress\torpheu_advanced.inc - 35", "contents": "OrpheuGetStructFromAddress(${1:OrpheuStructType:structType}, ${2:address})" },
		{ "trigger": "OrpheuGetStructFromParam\torpheu.inc - 114", "contents": "OrpheuGetStructFromParam(${1:num})" },
		{ "trigger": "OrpheuGetStructMember\torpheu.inc - 143", "contents": "OrpheuGetStructMember(${1:OrpheuStruct:struct}, ${2:const memberName[]}, ${3:any:...})" },
		{ "trigger": "OrpheuMemoryGet\torpheu_memory.inc - 59", "contents": "OrpheuMemoryGet(${1:const memoryDataName[]}, ${2:any:...})" },
		{ "trigger": "OrpheuMemoryGetAtAddress\torpheu_memory.inc - 71", "contents": "OrpheuMemoryGetAtAddress(${1:address}, ${2:const memoryDataName[]}, ${3:any:...})" },
		{ "trigger": "OrpheuMemoryReplace\torpheu_memory.inc - 34", "contents": "OrpheuMemoryReplace(${1:const memoryDataName[]}, ${2:count}, ${3:any:...})" },
		{ "trigger": "OrpheuMemoryReplaceAtAddress\torpheu_memory.inc - 46", "contents": "OrpheuMemoryReplaceAtAddress(${1:address}, ${2:const memoryDataNameName[]}, ${3:count}, ${4:any:...})" },
		{ "trigger": "OrpheuMemorySet\torpheu_memory.inc - 84", "contents": "OrpheuMemorySet(${1:const memoryDataName[]}, ${2:count}, ${3:any:...})" },
		{ "trigger": "OrpheuMemorySetAtAddress\torpheu_memory.inc - 97", "contents": "OrpheuMemorySetAtAddress(${1:address}, ${2:const memoryDataName[]}, ${3:count}, ${4:any:...})" },
		{ "trigger": "OrpheuRegisterHook\torpheu.inc - 29", "contents": "OrpheuRegisterHook(${1:OrpheuFunction:function}, ${2:const hookFunctionName[]}, ${3:OrpheuHookPhase:phase = OrpheuHookPre})" },
		{ "trigger": "OrpheuRegisterHookFromClass\torpheu_stocks.inc - 62", "contents": "OrpheuRegisterHookFromClass(${1:const entityClassName[]}, ${2:const libFunctionName[]}, ${3:const libClassName[]}, ${4:const hookFunctionName[]}, ${5:OrpheuHookPhase:phase = OrpheuHookPre})" },
		{ "trigger": "OrpheuRegisterHookFromEntity\torpheu_stocks.inc - 67", "contents": "OrpheuRegisterHookFromEntity(${1:id}, ${2:const libFunctionName[]}, ${3:const libClassName[]}, ${4:const hookFunctionName[]}, ${5:OrpheuHookPhase:phase = OrpheuHookPre})" },
		{ "trigger": "OrpheuRegisterHookFromObject\torpheu_stocks.inc - 72", "contents": "OrpheuRegisterHookFromObject(${1:object}, ${2:const libFunctionName[]}, ${3:const libClassName[]}, ${4:const hookFunctionName[]}, ${5:OrpheuHookPhase:phase = OrpheuHookPre})" },
		{ "trigger": "OrpheuSetParam\torpheu.inc - 75", "contents": "OrpheuSetParam(${1:num}, ${2:any:...})" },
		{ "trigger": "OrpheuSetParamStructMember\torpheu.inc - 104", "contents": "OrpheuSetParamStructMember(${1:num}, ${2:const memberName[]}, ${3:any:...})" },
		{ "trigger": "OrpheuSetReturn\torpheu.inc - 67", "contents": "OrpheuSetReturn(${1:any:...})" },
		{ "trigger": "OrpheuSetStructMember\torpheu.inc - 132", "contents": "OrpheuSetStructMember(${1:OrpheuStruct:struct}, ${2:const memberName[]}, ${3:any:...})" },
		{ "trigger": "OrpheuUnregisterHook\torpheu.inc - 36", "contents": "OrpheuUnregisterHook(${1:OrpheuHook:hook})" },
		{ "trigger": "PlayerSaveKey\tnfvault.inc - 2751", "contents": "PlayerSaveKey(${1:id})" },
		{ "trigger": "PointContents\tengine_stocks.inc - 220", "contents": "PointContents(${1:const Float:fCheckAt[3]})" },
		{ "trigger": "PrepareArray\tamxmodx.inc - 1012", "contents": "PrepareArray(${1:const array[]}, ${2:size}, ${3:copyback=0})" },
		{ "trigger": "PrepareTravTrie\tadt_travtrie.inc - 105", "contents": "PrepareTravTrie(${1:Handle:trie})" },
		{ "trigger": "ProPrint\tcolorchat.inc - 28", "contents": "ProPrint(${1:id}, ${2:type}, ${3:const msg[]}, ${4:{Float}, ${5:Sql}, ${6:Result}, ${7:_}:...})" },
		{ "trigger": "RPGx_Freeze\trpgx.inc - 80", "contents": "RPGx_Freeze(${1:player}, ${2:bool:freeze = true})" },
		{ "trigger": "RPGx_GetCredits\trpgx.inc - 116", "contents": "RPGx_GetCredits(${1:player})" },
		{ "trigger": "RPGx_GetLevel\trpgx.inc - 107", "contents": "RPGx_GetLevel(${1:player})" },
		{ "trigger": "RPGx_GetSpawnHealth\trpgx.inc - 45", "contents": "RPGx_GetSpawnHealth(${1:player})" },
		{ "trigger": "RPGx_GetUpgradeLevel\trpgx.inc - 63", "contents": "RPGx_GetUpgradeLevel(${1:player}, ${2:upgrade})" },
		{ "trigger": "RPGx_GetUpgradeMaxLevel\trpgx.inc - 72", "contents": "RPGx_GetUpgradeMaxLevel(${1:upgrade})" },
		{ "trigger": "RPGx_GetXP\trpgx.inc - 98", "contents": "RPGx_GetXP(${1:player})" },
		{ "trigger": "RPGx_IsFrozen\trpgx.inc - 89", "contents": "RPGx_IsFrozen(${1:player})" },
		{ "trigger": "RPGx_MakeUpgrade\trpgx.inc - 36", "contents": "RPGx_MakeUpgrade(${1:const name[]}, ${2:maxlevel}, ${3:cost}, ${4:icost})" },
		{ "trigger": "RPGx_OnPlayerAuth\trpgx.inc - 129", "contents": "RPGx_OnPlayerAuth(${1:id})" },
		{ "trigger": "RPGx_OnPlayerDeath\trpgx.inc - 144", "contents": "RPGx_OnPlayerDeath(${1:victim}, ${2:killer}, ${3:headshot})" },
		{ "trigger": "RPGx_OnPlayerHurt\trpgx.inc - 149", "contents": "RPGx_OnPlayerHurt(${1:victim}, ${2:attacker}, ${3:damage}, ${4:weapon})" },
		{ "trigger": "RPGx_OnPlayerLevel\trpgx.inc - 134", "contents": "RPGx_OnPlayerLevel(${1:id}, ${2:newlevel})" },
		{ "trigger": "RPGx_OnPlayerSpawn\trpgx.inc - 139", "contents": "RPGx_OnPlayerSpawn(${1:id})" },
		{ "trigger": "RPGx_OnPluginReady\trpgx.inc - 124", "contents": "RPGx_OnPluginReady()" },
		{ "trigger": "RPGx_OnUpgradePurchase\trpgx.inc - 154", "contents": "RPGx_OnUpgradePurchase(${1:id}, ${2:upgrade}, ${3:newlevel})" },
		{ "trigger": "RPGx_OnUpgradeSell\trpgx.inc - 159", "contents": "RPGx_OnUpgradeSell(${1:id}, ${2:upgrade}, ${3:newlevel})" },
		{ "trigger": "RPGx_SetSpawnHealth\trpgx.inc - 53", "contents": "RPGx_SetSpawnHealth(${1:player}, ${2:health = 100})" },
		{ "trigger": "RadiusDamage\tengine_stocks.inc - 210", "contents": "RadiusDamage(${1:const Float:fExplodeAt[3]}, ${2:iDamageMultiplier}, ${3:iRadiusMultiplier})" },
		{ "trigger": "ReadString\tnvault_util.inc - 103", "contents": "ReadString(${1:szDestString[]}, ${2:iMaxLen}, ${3:const SourceData[]}, ${4:iSourceSize})" },
		{ "trigger": "ReadTravTrieArray\tadt_travtrie.inc - 148", "contents": "ReadTravTrieArray(${1:Handle:dp}, ${2:value[]}, ${3:max_num}, ${4:&size = 0})" },
		{ "trigger": "ReadTravTrieCell\tcelltravtrie.inc - 198", "contents": "ReadTravTrieCell(${1:travTrieIter:dp}, ${2:&any:value})" },
		{ "trigger": "ReadTravTrieKey\tadt_travtrie.inc - 125", "contents": "ReadTravTrieKey(${1:Handle:dp}, ${2:String:key[]}, ${3:len})" },
		{ "trigger": "ReadTravTrieKeyEx\tcelltravtrie.inc - 344", "contents": "ReadTravTrieKeyEx(${1:travTrieIter:dp}, ${2:&key})" },
		{ "trigger": "ReadTravTrieString\tadt_travtrie.inc - 156", "contents": "ReadTravTrieString(${1:Handle:dp}, ${2:String:value[]}, ${3:max_num}, ${4:&size = 0})" },
		{ "trigger": "ReadTravTrieValue\tadt_travtrie.inc - 140", "contents": "ReadTravTrieValue(${1:Handle:dp}, ${2:&any:value})" },
		{ "trigger": "RegisterHam\thamsandwich.inc - 67", "contents": "RegisterHam(${1:Ham:function}, ${2:const EntityClass[]}, ${3:const Callback[]}, ${4:Post=0})" },
		{ "trigger": "RegisterHamBots\tcs_ham_bots_api.inc - 25", "contents": "RegisterHamBots(${1:Ham:function}, ${2:const Callback[]}, ${3:Post=0})" },
		{ "trigger": "RegisterHamFromEntity\thamsandwich.inc - 82", "contents": "RegisterHamFromEntity(${1:Ham:function}, ${2:EntityId}, ${3:const Callback[]}, ${4:Post=0})" },
		{ "trigger": "RemoveEntity\tVexd_Utilities.inc - 68", "contents": "RemoveEntity(${1:iIndex})" },
		{ "trigger": "RemoveFromTravTrie\tadt_travtrie.inc - 79", "contents": "RemoveFromTravTrie(${1:Handle:trie}, ${2:const String:key[]})" },
		{ "trigger": "ReverseArray\tnumber_convert.inc - 30", "contents": "ReverseArray(${1:iArray[ ]}, ${2:const iSize})" },
		{ "trigger": "SIMPLE_T\tamxmisc.inc - 24", "contents": "SIMPLE_T(${1:1%})" },
		{ "trigger": "SQL_AffectedRows\tsqlx.inc - 182", "contents": "SQL_AffectedRows(${1:Handle:query})" },
		{ "trigger": "SQL_Connect\tsqlx.inc - 54", "contents": "SQL_Connect(${1:Handle:cn_tuple}, ${2:&errcode}, ${3:error[]}, ${4:maxlength})" },
		{ "trigger": "SQL_Execute\tsqlx.inc - 134", "contents": "SQL_Execute(${1:Handle:query})" },
		{ "trigger": "SQL_FieldNameToNum\tsqlx.inc - 207", "contents": "SQL_FieldNameToNum(${1:Handle:query}, ${2:const name[]})" },
		{ "trigger": "SQL_FieldNumToName\tsqlx.inc - 201", "contents": "SQL_FieldNumToName(${1:Handle:query}, ${2:num}, ${3:name[]}, ${4:maxlength})" },
		{ "trigger": "SQL_FreeHandle\tsqlx.inc - 46", "contents": "SQL_FreeHandle(${1:Handle:h})" },
		{ "trigger": "SQL_GetAffinity\tsqlx.inc - 226", "contents": "SQL_GetAffinity(${1:driver[]}, ${2:maxlen})" },
		{ "trigger": "SQL_GetInsertId\tsqlx.inc - 220", "contents": "SQL_GetInsertId(${1:Handle:query})" },
		{ "trigger": "SQL_GetQueryString\tsqlx.inc - 250", "contents": "SQL_GetQueryString(${1:Handle:query}, ${2:buffer[]}, ${3:maxlength})" },
		{ "trigger": "SQL_IsNull\tsqlx.inc - 154", "contents": "SQL_IsNull(${1:Handle:query}, ${2:column})" },
		{ "trigger": "SQL_MakeDbTuple\tsqlx.inc - 38", "contents": "SQL_MakeDbTuple(${1:const host[]}, ${2:const user[]}, ${3:const pass[]}, ${4:const db[]}, ${5:timeout=0})" },
		{ "trigger": "SQL_MakeStdTuple\tsqlx.inc - 361", "contents": "SQL_MakeStdTuple(${1:timeout = 0})" },
		{ "trigger": "SQL_MoreResults\tsqlx.inc - 147", "contents": "SQL_MoreResults(${1:Handle:query})" },
		{ "trigger": "SQL_NextResultSet\tsqlx.inc - 264", "contents": "SQL_NextResultSet(${1:Handle:query})" },
		{ "trigger": "SQL_NextRow\tsqlx.inc - 176", "contents": "SQL_NextRow(${1:Handle:query})" },
		{ "trigger": "SQL_NumColumns\tsqlx.inc - 194", "contents": "SQL_NumColumns(${1:Handle:query})" },
		{ "trigger": "SQL_NumResults\tsqlx.inc - 188", "contents": "SQL_NumResults(${1:Handle:query})" },
		{ "trigger": "SQL_PrepareQuery\tsqlx.inc - 62", "contents": "SQL_PrepareQuery(${1:Handle:db}, ${2:const fmt[]}, ${3:any:...})" },
		{ "trigger": "SQL_QueryAndIgnore\tsqlx.inc - 339", "contents": "SQL_QueryAndIgnore(${1:Handle:db}, ${2:const queryfmt[]}, ${3:any:...})" },
		{ "trigger": "SQL_QueryError\tsqlx.inc - 140", "contents": "SQL_QueryError(${1:Handle:query}, ${2:error[]}, ${3:maxlength})" },
		{ "trigger": "SQL_QuoteString\tsqlx.inc - 77", "contents": "SQL_QuoteString(${1:Handle:db}, ${2:buffer[]}, ${3:buflen}, ${4:const string[]})" },
		{ "trigger": "SQL_QuoteStringFmt\tsqlx.inc - 92", "contents": "SQL_QuoteStringFmt(${1:Handle:db}, ${2:buffer[]}, ${3:buflen}, ${4:const fmt[]}, ${5:any:...})" },
		{ "trigger": "SQL_ReadResult\tsqlx.inc - 170", "contents": "SQL_ReadResult(${1:Handle:query}, ${2:column}, ${3:{Float}, ${4:_}:...})" },
		{ "trigger": "SQL_Rewind\tsqlx.inc - 213", "contents": "SQL_Rewind(${1:Handle:query})" },
		{ "trigger": "SQL_SetAffinity\tsqlx.inc - 245", "contents": "SQL_SetAffinity(${1:const driver[]})" },
		{ "trigger": "SQL_SimpleQuery\tsqlx.inc - 292", "contents": "SQL_SimpleQuery(${1:Handle:db}, ${2:const query[]}, ${3:error[]=}, ${4:maxlength=0}, ${5:&rows=0})" },
		{ "trigger": "SQL_SimpleQueryFmt\tsqlx.inc - 314", "contents": "SQL_SimpleQueryFmt(${1:Handle:db}, ${2:error[]=}, ${3:maxlength=0}, ${4:&rows=0}, ${5:const fmt[]}, ${6:any:...})" },
		{ "trigger": "SQL_ThreadQuery\tsqlx.inc - 123", "contents": "SQL_ThreadQuery(${1:Handle:db_tuple}, ${2:const handler[]}, ${3:const query[]}, ${4:const data[]=}, ${5:dataSize=0})" },
		{ "trigger": "SecondsInMonth\tunixtime.inc - 130", "contents": "SecondsInMonth(${1:const iYear}, ${2:const iMonth})" },
		{ "trigger": "ServerFrame\tVexd_Utilities.inc - 109", "contents": "ServerFrame()" },
		{ "trigger": "SetHamParamEntity\thamsandwich.inc - 276", "contents": "SetHamParamEntity(${1:which}, ${2:value})" },
		{ "trigger": "SetHamParamFloat\thamsandwich.inc - 258", "contents": "SetHamParamFloat(${1:which}, ${2:Float:value})" },
		{ "trigger": "SetHamParamInteger\thamsandwich.inc - 249", "contents": "SetHamParamInteger(${1:which}, ${2:value})" },
		{ "trigger": "SetHamParamString\thamsandwich.inc - 285", "contents": "SetHamParamString(${1:which}, ${2:const output[]})" },
		{ "trigger": "SetHamParamTraceResult\thamsandwich.inc - 294", "contents": "SetHamParamTraceResult(${1:which}, ${2:tr_handle})" },
		{ "trigger": "SetHamParamVector\thamsandwich.inc - 267", "contents": "SetHamParamVector(${1:which}, ${2:const Float:value[3]})" },
		{ "trigger": "SetHamReturnEntity\thamsandwich.inc - 231", "contents": "SetHamReturnEntity(${1:value})" },
		{ "trigger": "SetHamReturnFloat\thamsandwich.inc - 215", "contents": "SetHamReturnFloat(${1:Float:value})" },
		{ "trigger": "SetHamReturnInteger\thamsandwich.inc - 207", "contents": "SetHamReturnInteger(${1:value})" },
		{ "trigger": "SetHamReturnString\thamsandwich.inc - 239", "contents": "SetHamReturnString(${1:const value[]})" },
		{ "trigger": "SetHamReturnVector\thamsandwich.inc - 223", "contents": "SetHamReturnVector(${1:const Float:value[3]})" },
		{ "trigger": "SetSpeak\tVexd_Utilities.inc - 104", "contents": "SetSpeak(${1:iIndex}, ${2:iSpeakFlags})" },
		{ "trigger": "SetTravTrieArray\tadt_travtrie.inc - 32", "contents": "SetTravTrieArray(${1:Handle:trie}, ${2:const String:key[]}, ${3:const array[]}, ${4:num_items}, ${5:bool:replace=true})" },
		{ "trigger": "SetTravTrieString\tadt_travtrie.inc - 48", "contents": "SetTravTrieString(${1:Handle:trie}, ${2:const String:key[]}, ${3:String:value[]}, ${4:bool:replace=true})" },
		{ "trigger": "SetTravTrieValue\tadt_travtrie.inc - 16", "contents": "SetTravTrieValue(${1:Handle:trie}, ${2:const String:key[]}, ${3:any:value}, ${4:bool:replace=true})" },
		{ "trigger": "SetView\tVexd_Utilities.inc - 101", "contents": "SetView(${1:iIndex}, ${2:ViewType})" },
		{ "trigger": "ShowSyncHudMsg\tamxmodx.inc - 950", "contents": "ShowSyncHudMsg(${1:target}, ${2:syncObj}, ${3:const fmt[]}, ${4:any:...})" },
		{ "trigger": "SortCustom1D\tsorting.inc - 55", "contents": "SortCustom1D(${1:array[]}, ${2:array_size}, ${3:const comparefunc[]}, ${4:data[]=}, ${5:data_size=0})" },
		{ "trigger": "SortCustom2D\tsorting.inc - 76", "contents": "SortCustom2D(${1:array[][]}, ${2:array_size}, ${3:const comparefunc[]}, ${4:data[]=}, ${5:data_size=0})" },
		{ "trigger": "SortFloats\tsorting.inc - 29", "contents": "SortFloats(${1:Float:array[]}, ${2:array_size}, ${3:SortMethod:order = Sort_Ascending})" },
		{ "trigger": "SortIntegers\tsorting.inc - 27", "contents": "SortIntegers(${1:array[]}, ${2:array_size}, ${3:SortMethod:order = Sort_Ascending})" },
		{ "trigger": "SortStrings\tsorting.inc - 31", "contents": "SortStrings(${1:array[][]}, ${2:num_strings}, ${3:SortMethod:order = Sort_Ascending})" },
		{ "trigger": "SsClean\tsuperspawns.inc - 39", "contents": "SsClean()" },
		{ "trigger": "SsGetOrigin\tsuperspawns.inc - 47", "contents": "SsGetOrigin(${1:Float:origin[3]})" },
		{ "trigger": "StartBleed\tvrmod.inc - 5", "contents": "StartBleed(${1:const index})" },
		{ "trigger": "StopBleed\tvrmod.inc - 6", "contents": "StopBleed(${1:const index})" },
		{ "trigger": "SyncHudMessage\tsynchm.inc - 8", "contents": "SyncHudMessage(${1:id}, ${2:red}, ${3:green}, ${4:blue}, ${5:Float:x}, ${6:Float:y}, ${7:effects}, ${8:Float:fxtime}, ${9:Float:holdtime}, ${10:Float:fadeintime}, ${11:Float:fadeouttime}, ${12:channel}, ${13:text[]}, ${14:any:...})" },
		{ "trigger": "TS_Attack\tTSDYNatives.inc - 19", "contents": "TS_Attack(${1:id}, ${2:VictimID}, ${3:Float:Damage}, ${4:Attacks:Type})" },
		{ "trigger": "TS_KFuPower\tTSDYNatives.inc - 23", "contents": "TS_KFuPower(${1:id}, ${2:PowerLost})" },
		{ "trigger": "TS_Stunt\tTSDYNatives.inc - 16", "contents": "TS_Stunt(${1:id}, ${2:Stunts:Type})" },
		{ "trigger": "Team_Info\tcolorchat.inc - 170", "contents": "Team_Info(${1:id}, ${2:type}, ${3:team[]})" },
		{ "trigger": "TerminateRound\tround_terminator.inc - 68", "contents": "TerminateRound(${1:const roundEndType}, ${2:const teamWinning = TeamWinning_None}, ${3:const mapType = MapType_AutoDetect})" },
		{ "trigger": "TimeToUnix\tunixtime.inc - 111", "contents": "TimeToUnix(${1:const iYear}, ${2:const iMonth}, ${3:const iDay}, ${4:const iHour}, ${5:const iMinute}, ${6:const iSecond})" },
		{ "trigger": "TraceLn\tVexd_Utilities.inc - 71", "contents": "TraceLn(${1:iIgnoreEnt}, ${2:Float:fStart[3]}, ${3:Float:fEnd[3]}, ${4:Float:vReturn[3]})" },
		{ "trigger": "TraceNormal\tVexd_Utilities.inc - 74", "contents": "TraceNormal(${1:iIgnoreEnt}, ${2:Float:fStart[3]}, ${3:Float:fEnd[3]}, ${4:Float:vReturn[3]})" },
		{ "trigger": "TravTrieClear\tcelltravtrie.inc - 132", "contents": "TravTrieClear(${1:TravTrie:trie})" },
		{ "trigger": "TravTrieCreate\tcelltravtrie.inc - 19", "contents": "TravTrieCreate(${1:keylength = 64}, ${2:startsize = 32})" },
		{ "trigger": "TravTrieDeleteKey\tcelltravtrie.inc - 112", "contents": "TravTrieDeleteKey(${1:TravTrie:trie}, ${2:const key[]})" },
		{ "trigger": "TravTrieDeleteKeyEx\tcelltravtrie.inc - 257", "contents": "TravTrieDeleteKeyEx(${1:TravTrie:trie}, ${2:key})" },
		{ "trigger": "TravTrieDestroy\tcelltravtrie.inc - 26", "contents": "TravTrieDestroy(${1:&TravTrie:trie})" },
		{ "trigger": "TravTrieGetArray\tcelltravtrie.inc - 102", "contents": "TravTrieGetArray(${1:TravTrie:trie}, ${2:const key[]}, ${3:any:array[]}, ${4:num_items})" },
		{ "trigger": "TravTrieGetArrayEx\tcelltravtrie.inc - 340", "contents": "TravTrieGetArrayEx(${1:%1}, ${2:%2}, ${3:%3}, ${4:%4})" },
		{ "trigger": "TravTrieGetCell\tcelltravtrie.inc - 92", "contents": "TravTrieGetCell(${1:TravTrie:trie}, ${2:const key[]}, ${3:&any:value})" },
		{ "trigger": "TravTrieGetCellEx\tcelltravtrie.inc - 339", "contents": "TravTrieGetCellEx(${1:%1}, ${2:%2}, ${3:%3})" },
		{ "trigger": "TravTrieGetString\tcelltravtrie.inc - 107", "contents": "TravTrieGetString(${1:TravTrie:trie}, ${2:const key[]}, ${3:value[]}, ${4:max_size})" },
		{ "trigger": "TravTrieGetStringEx\tcelltravtrie.inc - 341", "contents": "TravTrieGetStringEx(${1:%1}, ${2:%2}, ${3:%3}, ${4:%4})" },
		{ "trigger": "TravTrieIteratorHandler\tcelltravtrie.inc - 222", "contents": "TravTrieIteratorHandler(${1:Array:dp}, ${2:pos[]}, ${3:len})" },
		{ "trigger": "TravTrieKeyExists\tcelltravtrie.inc - 97", "contents": "TravTrieKeyExists(${1:TravTrie:trie}, ${2:const key[]})" },
		{ "trigger": "TravTrieNth\tcelltravtrie.inc - 268", "contents": "TravTrieNth(${1:TravTrie:trie}, ${2:nth}, ${3:key[]}, ${4:len})" },
		{ "trigger": "TravTrieNthEx\tcelltravtrie.inc - 280", "contents": "TravTrieNthEx(${1:TravTrie:trie}, ${2:nth}, ${3:&key})" },
		{ "trigger": "TravTrieSetArray\tcelltravtrie.inc - 53", "contents": "TravTrieSetArray(${1:TravTrie:trie}, ${2:const key[]}, ${3:const array[]}, ${4:num_items})" },
		{ "trigger": "TravTrieSetArrayEx\tcelltravtrie.inc - 337", "contents": "TravTrieSetArrayEx(${1:%1}, ${2:%2}, ${3:%3}, ${4:%4})" },
		{ "trigger": "TravTrieSetCell\tcelltravtrie.inc - 35", "contents": "TravTrieSetCell(${1:TravTrie:trie}, ${2:const key[]}, ${3:any:value})" },
		{ "trigger": "TravTrieSetCellEx\tcelltravtrie.inc - 336", "contents": "TravTrieSetCellEx(${1:%1}, ${2:%2}, ${3:%3})" },
		{ "trigger": "TravTrieSetString\tcelltravtrie.inc - 73", "contents": "TravTrieSetString(${1:TravTrie:trie}, ${2:const key[]}, ${3:const value[]})" },
		{ "trigger": "TravTrieSetStringEx\tcelltravtrie.inc - 338", "contents": "TravTrieSetStringEx(${1:%1}, ${2:%2}, ${3:%3})" },
		{ "trigger": "TravTrieSize\tcelltravtrie.inc - 187", "contents": "TravTrieSize(${1:TravTrie:trie})" },
		{ "trigger": "TraveTrieIteratorHandler\tadt_travtrie.inc - 164", "contents": "TraveTrieIteratorHandler(${1:Handle:dp}, ${2:String:pos[]}, ${3:len})" },
		{ "trigger": "TrieClear\tcelltrie.inc - 13", "contents": "TrieClear(${1:Trie:handle})" },
		{ "trigger": "TrieCreate\tcelltrie.inc - 12", "contents": "TrieCreate()" },
		{ "trigger": "TrieDeleteKey\tcelltrie.inc - 23", "contents": "TrieDeleteKey(${1:Trie:handle}, ${2:const key[]})" },
		{ "trigger": "TrieDestroy\tcelltrie.inc - 25", "contents": "TrieDestroy(${1:&Trie:handle})" },
		{ "trigger": "TrieGetArray\tcelltrie.inc - 21", "contents": "TrieGetArray(${1:Trie:handle}, ${2:const key[]}, ${3:any:output[]}, ${4:outputsize})" },
		{ "trigger": "TrieGetCell\tcelltrie.inc - 19", "contents": "TrieGetCell(${1:Trie:handle}, ${2:const key[]}, ${3:&any:value})" },
		{ "trigger": "TrieGetString\tcelltrie.inc - 20", "contents": "TrieGetString(${1:Trie:handle}, ${2:const key[]}, ${3:output[]}, ${4:outputsize})" },
		{ "trigger": "TrieKeyExists\tcelltrie.inc - 24", "contents": "TrieKeyExists(${1:Trie:handle}, ${2:const key[]})" },
		{ "trigger": "TrieSetArray\tcelltrie.inc - 17", "contents": "TrieSetArray(${1:Trie:handle}, ${2:const key[]}, ${3:const any:buffer[]}, ${4:size})" },
		{ "trigger": "TrieSetCell\tcelltrie.inc - 15", "contents": "TrieSetCell(${1:Trie:handle}, ${2:const key[]}, ${3:any:value})" },
		{ "trigger": "TrieSetString\tcelltrie.inc - 16", "contents": "TrieSetString(${1:Trie:handle}, ${2:const key[]}, ${3:const value[]})" },
		{ "trigger": "UTIL_FadeToBlack\tscreenfade_util.inc - 89", "contents": "UTIL_FadeToBlack(${1:id}, ${2:Float:fxtime=3.0}, ${3:bool:bReliable=false}, ${4:bool:bExternal=false})" },
		{ "trigger": "UTIL_ScreenFade\tscreenfade_util.inc - 32", "contents": "UTIL_ScreenFade(${1:id=0}, ${2:iColor[3]={0}, ${3:0}, ${4:0}}, ${5:Float:flFxTime=-1.0}, ${6:Float:flHoldTime=0.0}, ${7:iAlpha=0}, ${8:iFlags=FFADE_IN}, ${9:bool:bReliable=false}, ${10:bool:bExternal=false})" },
		{ "trigger": "UnixToTime\tunixtime.inc - 42", "contents": "UnixToTime(${1:iTimeStamp}, ${2:&iYear}, ${3:&iMonth}, ${4:&iDay}, ${5:&iHour}, ${6:&iMinute}, ${7:&iSecond})" },
		{ "trigger": "VecDist\tVexd_Utilities.inc - 83", "contents": "VecDist(${1:Float:vVector[3]}, ${2:Float:vVector2[3]})" },
		{ "trigger": "VecLength\tVexd_Utilities.inc - 80", "contents": "VecLength(${1:Float:vVector[3]})" },
		{ "trigger": "VecToAngles\tVexd_Utilities.inc - 77", "contents": "VecToAngles(${1:Float:fVector[3]}, ${2:Float:vReturn[3]})" },
		{ "trigger": "VelocityByAim\tengine_stocks.inc - 215", "contents": "VelocityByAim(${1:iIndex}, ${2:iVelocity}, ${3:Float:vRetValue[3]})" },
		{ "trigger": "ViewContents\tengine_stocks.inc - 119", "contents": "ViewContents(${1:id})" },
		{ "trigger": "XS_FLEQ\txs.inc - 281", "contents": "XS_FLEQ(${1:%1}, ${2:%2})" },
		{ "trigger": "XS_MAKE_TASKFUNC\txs.inc - 1178", "contents": "XS_MAKE_TASKFUNC(${1:1%})" },
		{ "trigger": "_FormatVaultName\tfvault.inc - 370", "contents": "_FormatVaultName(${1:const vaultname[]}, ${2:filename[]}, ${3:len})" },
		{ "trigger": "_T\ttranslator.inc - 24", "contents": "_T(${1:const string[]}, ${2:destid=-1}, ${3:forcelang=-1})" },
		{ "trigger": "__HashDeleteAllKeys\thash.inc - 68", "contents": "__HashDeleteAllKeys(${1:Hash:handle})" },
		{ "trigger": "__HashXSetKey\thashx.inc - 96", "contents": "__HashXSetKey(${1:HashX:handle}, ${2:const key[]}, ${3:type})" },
		{ "trigger": "__count_teams\thl.inc - 243", "contents": "__count_teams()" },
		{ "trigger": "__explode_teamlist\thl.inc - 266", "contents": "__explode_teamlist(${1:output[][]}, ${2:size}, ${3:input[]}, ${4:delimiter})" },
		{ "trigger": "__get_team_index\thl.inc - 219", "contents": "__get_team_index(${1:const team[]})" },
		{ "trigger": "_couldBeTarget\tSentryGun_AI.inc - 52", "contents": "_couldBeTarget(${1:ent})" },
		{ "trigger": "abort\tamxmodx.inc - 907", "contents": "abort(${1:error}, ${2:const fmt[]=}, ${3:any:...})" },
		{ "trigger": "abs\tcore.inc - 41", "contents": "abs(${1:x})" },
		{ "trigger": "access\tamxmisc.inc - 86", "contents": "access(${1:id}, ${2:level})" },
		{ "trigger": "acos\tmaths.inc - 37", "contents": "acos(${1:Float:value})" },
		{ "trigger": "add\tstring.inc - 29", "contents": "add(${1:dest[]}, ${2:len}, ${3:const src[]}, ${4:max=0})" },
		{ "trigger": "add_commas\tstring_stocks.inc - 540", "contents": "add_commas(${1:{Float}, ${2:_}:value}, ${3:output[]}, ${4:output_len}, ${5:bool:is_float = false})" },
		{ "trigger": "admins_flush\tamxmodx.inc - 1079", "contents": "admins_flush()" },
		{ "trigger": "admins_lookup\tamxmodx.inc - 1074", "contents": "admins_lookup(${1:num}, ${2:AdminProp:Property}, ${3:Buffer[]=}, ${4:BufferSize=0})" },
		{ "trigger": "admins_num\tamxmodx.inc - 1066", "contents": "admins_num()" },
		{ "trigger": "admins_push\tamxmodx.inc - 1060", "contents": "admins_push(${1:const AuthData[]}, ${2:const Password[]}, ${3:Access}, ${4:Flags})" },
		{ "trigger": "amx_load_setting_float\tamx_settings_api.inc - 25", "contents": "amx_load_setting_float(${1:const filename[]}, ${2:const section[]}, ${3:const key[]}, ${4:&Float:float_value})" },
		{ "trigger": "amx_load_setting_float_arr\tamx_settings_api.inc - 19", "contents": "amx_load_setting_float_arr(${1:const filename[]}, ${2:const section[]}, ${3:const key[]}, ${4:Array:array_handle})" },
		{ "trigger": "amx_load_setting_int\tamx_settings_api.inc - 23", "contents": "amx_load_setting_int(${1:const filename[]}, ${2:const section[]}, ${3:const key[]}, ${4:&integer_value})" },
		{ "trigger": "amx_load_setting_int_arr\tamx_settings_api.inc - 17", "contents": "amx_load_setting_int_arr(${1:const filename[]}, ${2:const section[]}, ${3:const key[]}, ${4:Array:array_handle})" },
		{ "trigger": "amx_load_setting_string\tamx_settings_api.inc - 21", "contents": "amx_load_setting_string(${1:const filename[]}, ${2:const section[]}, ${3:const key[]}, ${4:setting_string[]}, ${5:len})" },
		{ "trigger": "amx_load_setting_string_arr\tamx_settings_api.inc - 15", "contents": "amx_load_setting_string_arr(${1:const filename[]}, ${2:const section[]}, ${3:const key[]}, ${4:Array:array_handle})" },
		{ "trigger": "amx_save_setting_float\tamx_settings_api.inc - 26", "contents": "amx_save_setting_float(${1:const filename[]}, ${2:const section[]}, ${3:const key[]}, ${4:Float:float_value})" },
		{ "trigger": "amx_save_setting_float_arr\tamx_settings_api.inc - 20", "contents": "amx_save_setting_float_arr(${1:const filename[]}, ${2:const section[]}, ${3:const key[]}, ${4:Array:array_handle})" },
		{ "trigger": "amx_save_setting_int\tamx_settings_api.inc - 24", "contents": "amx_save_setting_int(${1:const filename[]}, ${2:const section[]}, ${3:const key[]}, ${4:integer_value})" },
		{ "trigger": "amx_save_setting_int_arr\tamx_settings_api.inc - 18", "contents": "amx_save_setting_int_arr(${1:const filename[]}, ${2:const section[]}, ${3:const key[]}, ${4:Array:array_handle})" },
		{ "trigger": "amx_save_setting_string\tamx_settings_api.inc - 22", "contents": "amx_save_setting_string(${1:const filename[]}, ${2:const section[]}, ${3:const key[]}, ${4:const setting_string[]})" },
		{ "trigger": "amx_save_setting_string_arr\tamx_settings_api.inc - 16", "contents": "amx_save_setting_string_arr(${1:const filename[]}, ${2:const section[]}, ${3:const key[]}, ${4:Array:array_handle})" },
		{ "trigger": "angle_get_speed\tangle_speed.inc - 14", "contents": "angle_get_speed(${1:ent}, ${2:Float:fAngleSpeed[3]})" },
		{ "trigger": "angle_set_speed\tangle_speed.inc - 23", "contents": "angle_set_speed(${1:ent}, ${2:Float:fAngleSpeed[3]})" },
		{ "trigger": "angle_to_vector\tamxmod.inc - 159", "contents": "angle_to_vector(${1:Float:vector[3]}, ${2:FRU}, ${3:Float:ret[3]})" },
		{ "trigger": "angle_vector\tvector.inc - 31", "contents": "angle_vector(${1:const Float:vector[3]}, ${2:FRU}, ${3:Float:ret[3]})" },
		{ "trigger": "anymal_auth_dropped\tanymal_auth.inc - 81", "contents": "anymal_auth_dropped(${1:player})" },
		{ "trigger": "anymal_auth_failed\tanymal_auth.inc - 74", "contents": "anymal_auth_failed(${1:player})" },
		{ "trigger": "anymal_auth_get\tanymal_auth.inc - 88", "contents": "anymal_auth_get(${1:player}, ${2:auth[]})" },
		{ "trigger": "anymal_auth_get_custom\tanymal_auth.inc - 126", "contents": "anymal_auth_get_custom(${1:authdriver:driver}, ${2:player}, ${3:auth[]})" },
		{ "trigger": "anymal_auth_get_driver_name\tanymal_auth.inc - 137", "contents": "anymal_auth_get_driver_name(${1:authdriver:driver}, ${2:name[]})" },
		{ "trigger": "anymal_auth_get_num_drivers\tanymal_auth.inc - 131", "contents": "anymal_auth_get_num_drivers()" },
		{ "trigger": "anymal_auth_ready_to_register\tanymal_auth.inc - 98", "contents": "anymal_auth_ready_to_register()" },
		{ "trigger": "anymal_auth_register_driver\tanymal_auth.inc - 104", "contents": "anymal_auth_register_driver(${1:const name[]})" },
		{ "trigger": "anymal_auth_succeed\tanymal_auth.inc - 68", "contents": "anymal_auth_succeed(${1:player})" },
		{ "trigger": "anymal_auth_update\tanymal_auth.inc - 115", "contents": "anymal_auth_update(${1:const auth[]})" },
		{ "trigger": "anymal_auth_update_requested\tanymal_auth.inc - 110", "contents": "anymal_auth_update_requested(${1:authdriver:driver}, ${2:player})" },
		{ "trigger": "anymal_db_accept\tanymal_db.inc - 163", "contents": "anymal_db_accept()" },
		{ "trigger": "anymal_db_connect\tanymal_db.inc - 81", "contents": "anymal_db_connect(${1:const initializer[]})" },
		{ "trigger": "anymal_db_connecting\tanymal_db.inc - 153", "contents": "anymal_db_connecting(${1:const initializer[]})" },
		{ "trigger": "anymal_db_count_rows\tanymal_db.inc - 97", "contents": "anymal_db_count_rows(${1:DBQ:query})" },
		{ "trigger": "anymal_db_disconnect\tanymal_db.inc - 86", "contents": "anymal_db_disconnect(${1:DBC:connection})" },
		{ "trigger": "anymal_db_disconnecting\tanymal_db.inc - 156", "contents": "anymal_db_disconnecting(${1:DBC:connection})" },
		{ "trigger": "anymal_db_forget\tanymal_db.inc - 110", "contents": "anymal_db_forget(${1:DBQ:query})" },
		{ "trigger": "anymal_db_get_first\tanymal_db.inc - 116", "contents": "anymal_db_get_first(${1:DBC:connection}, ${2:const owner[] = ANYMAL_OWNER_GLOBAL}, ${3:const key[]}, ${4:value[]}, ${5:len})" },
		{ "trigger": "anymal_db_get_first_cell\tanymal_db.inc - 117", "contents": "anymal_db_get_first_cell(${1:DBC:connection}, ${2:const owner[] = ANYMAL_OWNER_GLOBAL}, ${3:const key[]}, ${4:&value})" },
		{ "trigger": "anymal_db_get_first_float\tanymal_db.inc - 118", "contents": "anymal_db_get_first_float(${1:DBC:connection}, ${2:const owner[] = ANYMAL_OWNER_GLOBAL}, ${3:const key[]}, ${4:&Float:value})" },
		{ "trigger": "anymal_db_get_row\tanymal_db.inc - 102", "contents": "anymal_db_get_row(${1:DBQ:query}, ${2:index}, ${3:owner[]}, ${4:key[]}, ${5:value[]}, ${6:len})" },
		{ "trigger": "anymal_db_get_row_key\tanymal_db.inc - 104", "contents": "anymal_db_get_row_key(${1:DBQ:query}, ${2:index}, ${3:key[]}, ${4:len})" },
		{ "trigger": "anymal_db_get_row_owner\tanymal_db.inc - 103", "contents": "anymal_db_get_row_owner(${1:DBQ:query}, ${2:index}, ${3:owner[]}, ${4:len})" },
		{ "trigger": "anymal_db_get_row_value\tanymal_db.inc - 105", "contents": "anymal_db_get_row_value(${1:DBQ:query}, ${2:index}, ${3:value[]}, ${4:len})" },
		{ "trigger": "anymal_db_read\tanymal_db.inc - 92", "contents": "anymal_db_read(${1:DBC:connection}, ${2:const owner[] = ANYMAL_OWNER_GLOBAL}, ${3:const key[]}, ${4:const value[]})" },
		{ "trigger": "anymal_db_reading\tanymal_db.inc - 170", "contents": "anymal_db_reading(${1:DBC:connection}, ${2:const owner[]}, ${3:const key[]}, ${4:const value[]}, ${5:&Array:out_owner}, ${6:&Array:out_key}, ${7:&Array:out_value})" },
		{ "trigger": "anymal_db_ready_to_register\tanymal_db.inc - 142", "contents": "anymal_db_ready_to_register()" },
		{ "trigger": "anymal_db_register_driver\tanymal_db.inc - 147", "contents": "anymal_db_register_driver(${1:const name[]})" },
		{ "trigger": "anymal_db_remove\tanymal_db.inc - 132", "contents": "anymal_db_remove(${1:DBC:connection}, ${2:const owner[] = ANYMAL_OWNER_GLOBAL}, ${3:const key[]}, ${4:const value[]})" },
		{ "trigger": "anymal_db_removing\tanymal_db.inc - 175", "contents": "anymal_db_removing(${1:DBC:connection}, ${2:const owner[]}, ${3:const key[]}, ${4:const value[]})" },
		{ "trigger": "anymal_db_write\tanymal_db.inc - 124", "contents": "anymal_db_write(${1:DBC:connection}, ${2:const owner[] = ANYMAL_OWNER_GLOBAL}, ${3:const key[]}, ${4:const value[] = \"\"}, ${5:bool:overwrite = true})" },
		{ "trigger": "anymal_db_write_cell\tanymal_db.inc - 125", "contents": "anymal_db_write_cell(${1:DBC:connection}, ${2:const owner[] = ANYMAL_OWNER_GLOBAL}, ${3:const key[]}, ${4:value = 0}, ${5:bool:overwrite = true})" },
		{ "trigger": "anymal_db_write_float\tanymal_db.inc - 126", "contents": "anymal_db_write_float(${1:DBC:connection}, ${2:const owner[] = ANYMAL_OWNER_GLOBAL}, ${3:const key[]}, ${4:Float:value = 0.0}, ${5:bool:overwrite = true})" },
		{ "trigger": "anymal_db_writing\tanymal_db.inc - 173", "contents": "anymal_db_writing(${1:DBC:connection}, ${2:const owner[]}, ${3:const key[]}, ${4:const value[]})" },
		{ "trigger": "anymal_ids_changed\tanymal_ids.inc - 100", "contents": "anymal_ids_changed(${1:IDSH:handle}, ${2:index})" },
		{ "trigger": "anymal_ids_collect\tanymal_ids.inc - 110", "contents": "anymal_ids_collect(${1:IDSH:handle}, ${2:index}, ${3:layer})" },
		{ "trigger": "anymal_ids_connect\tanymal_ids.inc - 71", "contents": "anymal_ids_connect(${1:IDSH:handle})" },
		{ "trigger": "anymal_ids_count\tanymal_ids.inc - 105", "contents": "anymal_ids_count(${1:IDSH:handle})" },
		{ "trigger": "anymal_ids_find\tanymal_ids.inc - 64", "contents": "anymal_ids_find(${1:const name[]})" },
		{ "trigger": "anymal_ids_get\tanymal_ids.inc - 83", "contents": "anymal_ids_get(${1:IDSH:handle}, ${2:index})" },
		{ "trigger": "anymal_ids_register\tanymal_ids.inc - 94", "contents": "anymal_ids_register(${1:const name[]}, ${2:numvalues = 1}, ${3:initial = 0})" },
		{ "trigger": "anymal_ids_set\tanymal_ids.inc - 77", "contents": "anymal_ids_set(${1:IDSAH:access_handle}, ${2:index}, ${3:value})" },
		{ "trigger": "anymal_ids_update\tanymal_ids.inc - 115", "contents": "anymal_ids_update(${1:IDSH:handle}, ${2:index}, ${3:value})" },
		{ "trigger": "anymal_ipm_add_depedency\tanymal_ipm.inc - 35", "contents": "anymal_ipm_add_depedency(${1:IPMH:handle}, ${2:const name[]})" },
		{ "trigger": "anymal_ipm_failed\tanymal_ipm.inc - 49", "contents": "anymal_ipm_failed(${1:IPMH:handle})" },
		{ "trigger": "anymal_ipm_init\tanymal_ipm.inc - 41", "contents": "anymal_ipm_init(${1:IPMH:handle})" },
		{ "trigger": "anymal_ipm_register\tanymal_ipm.inc - 29", "contents": "anymal_ipm_register(${1:const name[]})" },
		{ "trigger": "anymal_mb_accept\tanymal_mb.inc - 81", "contents": "anymal_mb_accept(${1:const header[]}, ${2:const footer[]}, ${3:num_pages_or_items = 1}, ${4:bool:specified_pages = false})" },
		{ "trigger": "anymal_mb_inject\tanymal_mb.inc - 59", "contents": "anymal_mb_inject(${1:MBH:handle})" },
		{ "trigger": "anymal_mb_injections\tanymal_mb.inc - 64", "contents": "anymal_mb_injections(${1:MBH:handle})" },
		{ "trigger": "anymal_mb_item_selected\tanymal_mb.inc - 98", "contents": "anymal_mb_item_selected(${1:MBH:handle}, ${2:player}, ${3:item}, ${4:menuitem}, ${5:page})" },
		{ "trigger": "anymal_mb_item_shown\tanymal_mb.inc - 87", "contents": "anymal_mb_item_shown(${1:MBH:handle}, ${2:player}, ${3:item}, ${4:menuitem}, ${5:page})" },
		{ "trigger": "anymal_mb_menu_closed\tanymal_mb.inc - 103", "contents": "anymal_mb_menu_closed(${1:MBH:handle}, ${2:player})" },
		{ "trigger": "anymal_mb_register\tanymal_mb.inc - 53", "contents": "anymal_mb_register(${1:bool:navigation})" },
		{ "trigger": "anymal_mb_requested\tanymal_mb.inc - 75", "contents": "anymal_mb_requested(${1:MBH:handle}, ${2:player}, ${3:page})" },
		{ "trigger": "anymal_mb_show\tanymal_mb.inc - 70", "contents": "anymal_mb_show(${1:MBH:handle}, ${2:player}, ${3:page = 1})" },
		{ "trigger": "anymal_mb_update_item\tanymal_mb.inc - 93", "contents": "anymal_mb_update_item(${1:const text[]})" },
		{ "trigger": "anymal_mm_hook\tanymal_mm.inc - 54", "contents": "anymal_mm_hook(${1:MMP:menu = anymal_mm_c_main})" },
		{ "trigger": "anymal_mm_initialized\tanymal_mm.inc - 60", "contents": "anymal_mm_initialized()" },
		{ "trigger": "anymal_sfx_burn\tanymal_sfx.inc - 38", "contents": "anymal_sfx_burn(${1:victim}, ${2:attacker = 0}, ${3:Float:duration = 1.0}, ${4:Float:damage_total = 10.0}, ${5:Float:slowdown_factor = 0.35})" },
		{ "trigger": "anymal_sfx_burning\tanymal_sfx.inc - 43", "contents": "anymal_sfx_burning(${1:player})" },
		{ "trigger": "anymal_sfx_freeze\tanymal_sfx.inc - 49", "contents": "anymal_sfx_freeze(${1:victim}, ${2:Float:duration = 0.0})" },
		{ "trigger": "anymal_sfx_frozen\tanymal_sfx.inc - 54", "contents": "anymal_sfx_frozen(${1:player})" },
		{ "trigger": "area_get_data\tdodfun.inc - 146", "contents": "area_get_data(${1:index}, ${2:CA_VALUE:key}, ${3:szValue[]=}, ${4:len=0})" },
		{ "trigger": "area_set_data\tdodfun.inc - 149", "contents": "area_set_data(${1:index}, ${2:CA_VALUE:key}, ${3:iValue=-1}, ${4:const szValue[]=\"\"})" },
		{ "trigger": "arrayset\tamxmodx.inc - 1048", "contents": "arrayset(${1:array[]}, ${2:value}, ${3:size})" },
		{ "trigger": "asin\tmaths.inc - 22", "contents": "asin(${1:Float:value})" },
		{ "trigger": "atan\tmaths.inc - 52", "contents": "atan(${1:Float:value})" },
		{ "trigger": "atan2\tmaths.inc - 57", "contents": "atan2(${1:Float:value1}, ${2:Float:value2})" },
		{ "trigger": "attach_view\tengine.inc - 176", "contents": "attach_view(${1:iIndex}, ${2:iTargetIndex})" },
		{ "trigger": "auto_exec_config\tautoexecconfig.inc - 1", "contents": "auto_exec_config(${1:const szName[]}, ${2:bool:bAutoCreate=true})" },
		{ "trigger": "bh_abilities_count\tbloodhunt.inc - 103", "contents": "bh_abilities_count()" },
		{ "trigger": "bh_abilities_reactivate\tbloodhunt.inc - 113", "contents": "bh_abilities_reactivate(${1:player})" },
		{ "trigger": "bh_ability_active\tbloodhunt.inc - 85", "contents": "bh_ability_active(${1:BHA:ability}, ${2:player})" },
		{ "trigger": "bh_ability_choosen\tbloodhunt.inc - 80", "contents": "bh_ability_choosen(${1:BHA:ability}, ${2:player})" },
		{ "trigger": "bh_ability_get_name\tbloodhunt.inc - 108", "contents": "bh_ability_get_name(${1:BHA:ability}, ${2:name[]}, ${3:len})" },
		{ "trigger": "bh_ability_register\tbloodhunt.inc - 75", "contents": "bh_ability_register(${1:const name[]}, ${2:const description[]}, ${3:botfriendly = 100})" },
		{ "trigger": "bh_ability_state_change\tbloodhunt.inc - 97", "contents": "bh_ability_state_change(${1:BHA:ability}, ${2:player}, ${3:bool:active})" },
		{ "trigger": "bh_ability_state_updated\tbloodhunt.inc - 92", "contents": "bh_ability_state_updated(${1:BHA:ability}, ${2:player}, ${3:bool:active})" },
		{ "trigger": "bh_dbc\tbloodhunt.inc - 133", "contents": "bh_dbc()" },
		{ "trigger": "bh_fake_respawn\tbloodhunt.inc - 183", "contents": "bh_fake_respawn(${1:player}, ${2:bool:activate = false})" },
		{ "trigger": "bh_gold_get\tbloodhunt.inc - 122", "contents": "bh_gold_get(${1:player})" },
		{ "trigger": "bh_gold_set\tbloodhunt.inc - 123", "contents": "bh_gold_set(${1:player}, ${2:amount})" },
		{ "trigger": "bh_hud_processing\tbloodhunt.inc - 171", "contents": "bh_hud_processing(${1:player})" },
		{ "trigger": "bh_hud_write\tbloodhunt.inc - 172", "contents": "bh_hud_write(${1:const text[]})" },
		{ "trigger": "bh_menu_hook\tbloodhunt.inc - 155", "contents": "bh_menu_hook(${1:BHM:menu})" },
		{ "trigger": "bh_session\tbloodhunt.inc - 139", "contents": "bh_session()" },
		{ "trigger": "bh_user_saveable\tbloodhunt.inc - 145", "contents": "bh_user_saveable(${1:player})" },
		{ "trigger": "bh_xp_get\tbloodhunt.inc - 50", "contents": "bh_xp_get(${1:player}, ${2:bool:total = false})" },
		{ "trigger": "bh_xp_level_get\tbloodhunt.inc - 54", "contents": "bh_xp_level_get(${1:player}, ${2:BHLVL:lvl})" },
		{ "trigger": "bh_xp_set\tbloodhunt.inc - 51", "contents": "bh_xp_set(${1:player}, ${2:xp}, ${3:bool:total = false})" },
		{ "trigger": "bomb_defused\tcsx.inc - 41", "contents": "bomb_defused(${1:defuser})" },
		{ "trigger": "bomb_defusing\tcsx.inc - 40", "contents": "bomb_defusing(${1:defuser})" },
		{ "trigger": "bomb_explode\tcsx.inc - 39", "contents": "bomb_explode(${1:planter}, ${2:defuser})" },
		{ "trigger": "bomb_planted\tcsx.inc - 38", "contents": "bomb_planted(${1:planter})" },
		{ "trigger": "bomb_planting\tcsx.inc - 37", "contents": "bomb_planting(${1:planter})" },
		{ "trigger": "bot_connect\tbot_api.inc - 36", "contents": "bot_connect(${1:id})" },
		{ "trigger": "bot_damage\tbot_api.inc - 42", "contents": "bot_damage(${1:id}, ${2:damage})" },
		{ "trigger": "bot_death\tbot_api.inc - 45", "contents": "bot_death(${1:id})" },
		{ "trigger": "bot_disconnect\tbot_api.inc - 39", "contents": "bot_disconnect(${1:id})" },
		{ "trigger": "bot_spawn\tbot_api.inc - 48", "contents": "bot_spawn(${1:id})" },
		{ "trigger": "bot_think\tbot_api.inc - 51", "contents": "bot_think(${1:id})" },
		{ "trigger": "build_path\tamxmod.inc - 55", "contents": "build_path(${1:path[]}, ${2:len}, ${3:{Float}, ${4:_}:...})" },
		{ "trigger": "c\tddimension.inc - 46", "contents": "c(${1:%1:%2[%3][%4][%5]%6})" },
		{ "trigger": "call_think\tengine.inc - 101", "contents": "call_think(${1:entity})" },
		{ "trigger": "callfunc_begin\tamxmodx.inc - 670", "contents": "callfunc_begin(${1:const func[]}, ${2:const plugin[]=\"\"})" },
		{ "trigger": "callfunc_begin_i\tamxmodx.inc - 681", "contents": "callfunc_begin_i(${1:func}, ${2:plugin = -1})" },
		{ "trigger": "callfunc_end\tamxmodx.inc - 707", "contents": "callfunc_end()" },
		{ "trigger": "callfunc_push_array\tamxmodx.inc - 703", "contents": "callfunc_push_array(${1:const VALUE[]}, ${2:array_size}, ${3:bool:copyback=true})" },
		{ "trigger": "callfunc_push_float\tamxmodx.inc - 694", "contents": "callfunc_push_float(${1:Float: value})" },
		{ "trigger": "callfunc_push_floatrf\tamxmodx.inc - 696", "contents": "callfunc_push_floatrf(${1:& Float: value})" },
		{ "trigger": "callfunc_push_int\tamxmodx.inc - 693", "contents": "callfunc_push_int(${1:value})" },
		{ "trigger": "callfunc_push_intrf\tamxmodx.inc - 695", "contents": "callfunc_push_intrf(${1:&value})" },
		{ "trigger": "callfunc_push_str\tamxmodx.inc - 702", "contents": "callfunc_push_str(${1:const VALUE[]}, ${2:bool:copyback=true})" },
		{ "trigger": "can_see\tVexdUM_stock.inc - 42", "contents": "can_see(${1:ent1}, ${2:ent2})" },
		{ "trigger": "change_task\tamxmodx.inc - 466", "contents": "change_task(${1:id = 0}, ${2:Float:newTime=1.0}, ${3:outside = 0})" },
		{ "trigger": "charsmax\tstring.inc - 14", "contents": "charsmax(${1:1%})" },
		{ "trigger": "clamp\tcore.inc - 31", "contents": "clamp(${1:value}, ${2:min=cellmin}, ${3:max=cellmax})" },
		{ "trigger": "clamp_byte\tdhudmessage.inc - 21", "contents": "clamp_byte(${1:1%})" },
		{ "trigger": "clear_player_flag\tboolean.inc - 38", "contents": "clear_player_flag(${1:%1}, ${2:%2})" },
		{ "trigger": "client_advertise\thelper.inc - 21", "contents": "client_advertise(${1:id})" },
		{ "trigger": "client_authorized\tamxmodx.inc - 62", "contents": "client_authorized(${1:id})" },
		{ "trigger": "client_built\tns.inc - 46", "contents": "client_built(${1:idPlayer}, ${2:idStructure}, ${3:type}, ${4:impulse})" },
		{ "trigger": "client_buy\tcl_buy.inc - 14", "contents": "client_buy(${1:id}, ${2:item})" },
		{ "trigger": "client_changeclass\tns.inc - 35", "contents": "client_changeclass(${1:id}, ${2:newclass}, ${3:oldclass})" },
		{ "trigger": "client_changeteam\tns.inc - 517", "contents": "client_changeteam(${1:id}, ${2:newteam}, ${3:oldteam})" },
		{ "trigger": "client_cmd\tamxmodx.inc - 375", "contents": "client_cmd(${1:index}, ${2:const command[]}, ${3:any:...})" },
		{ "trigger": "client_command\tamxmodx.inc - 68", "contents": "client_command(${1:id})" },
		{ "trigger": "client_connect\tamxmodx.inc - 58", "contents": "client_connect(${1:id})" },
		{ "trigger": "client_damage\tcsx.inc - 29", "contents": "client_damage(${1:attacker}, ${2:victim}, ${3:damage}, ${4:wpnindex}, ${5:hitplace}, ${6:TA})" },
		{ "trigger": "client_death\tcsx.inc - 33", "contents": "client_death(${1:killer}, ${2:victim}, ${3:wpnindex}, ${4:hitplace}, ${5:TK})" },
		{ "trigger": "client_disconnect\tamxmodx.inc - 65", "contents": "client_disconnect(${1:id})" },
		{ "trigger": "client_help\thelper.inc - 12", "contents": "client_help(${1:id})" },
		{ "trigger": "client_impulse\tengine.inc - 217", "contents": "client_impulse(${1:id}, ${2:impulse})" },
		{ "trigger": "client_infochanged\tamxmodx.inc - 55", "contents": "client_infochanged(${1:id})" },
		{ "trigger": "client_kill\tengine.inc - 210", "contents": "client_kill(${1:id})" },
		{ "trigger": "client_postthink\tVexdUM.inc - 58", "contents": "client_postthink(${1:id})" },
		{ "trigger": "client_powerup\ttsfun.inc - 51", "contents": "client_powerup(${1:id}, ${2:powerup}, ${3:UNAVAILABLE})" },
		{ "trigger": "client_prethink\tVexdUM.inc - 55", "contents": "client_prethink(${1:id})" },
		{ "trigger": "client_print\tamxmodx.inc - 103", "contents": "client_print(${1:index}, ${2:type}, ${3:const message[]}, ${4:any:...})" },
		{ "trigger": "client_print_color\tchatcolor.inc - 26", "contents": "client_print_color(${1:id}, ${2:iColor=DontChange}, ${3:const szMsg[]}, ${4:any:...})" },
		{ "trigger": "client_putinserver\tamxmodx.inc - 71", "contents": "client_putinserver(${1:id})" },
		{ "trigger": "client_score\tdodx.inc - 45", "contents": "client_score(${1:id}, ${2:score}, ${3:total})" },
		{ "trigger": "client_spawn\tns.inc - 525", "contents": "client_spawn(${1:id})" },
		{ "trigger": "client_stunt\ttsfun.inc - 44", "contents": "client_stunt(${1:id}, ${2:stunttype}, ${3:UNAVAILABLE})" },
		{ "trigger": "close_dir\tfile.inc - 117", "contents": "close_dir(${1:dirh})" },
		{ "trigger": "clr_big_bit\tbits.inc - 65", "contents": "clr_big_bit(${1:%1}, ${2:%2})" },
		{ "trigger": "clr_bit\tbits.inc - 32", "contents": "clr_bit(${1:%1}, ${2:%2})" },
		{ "trigger": "clr_bits\tbits.inc - 53", "contents": "clr_bits(${1:%1}, ${2:%2})" },
		{ "trigger": "cmd_access\tamxmisc.inc - 36", "contents": "cmd_access(${1:id}, ${2:level}, ${3:cid}, ${4:num}, ${5:bool:accesssilent = false})" },
		{ "trigger": "cmd_target\tamxmisc.inc - 109", "contents": "cmd_target(${1:id}, ${2:const arg[]}, ${3:flags = CMDTARGET_OBEY_IMMUNITY})" },
		{ "trigger": "colored_menus\tamxmisc.inc - 485", "contents": "colored_menus()" },
		{ "trigger": "console_cmd\tamxmodx.inc - 112", "contents": "console_cmd(${1:id}, ${2:const cmd[]}, ${3:any:...})" },
		{ "trigger": "console_print\tamxmodx.inc - 109", "contents": "console_print(${1:id}, ${2:const message[]}, ${3:any:...})" },
		{ "trigger": "const.inc - 195\tenum", "contents": "const.inc - 195()" },
		{ "trigger": "constraint_offset\tamxmisc.inc - 591", "contents": "constraint_offset(${1:low}, ${2:high}, ${3:seed}, ${4:offset})" },
		{ "trigger": "contain\tstring.inc - 18", "contents": "contain(${1:const source[]}, ${2:const string[]})" },
		{ "trigger": "containi\tstring.inc - 22", "contents": "containi(${1:const source[]}, ${2:const string[]})" },
		{ "trigger": "controlpoints_init\tdodfun.inc - 83", "contents": "controlpoints_init()" },
		{ "trigger": "copy\tstring.inc - 97", "contents": "copy(${1:dest[]}, ${2:len}, ${3:const src[]})" },
		{ "trigger": "copy_infokey_buffer\tfakemeta.inc - 234", "contents": "copy_infokey_buffer(${1:infoBuffer}, ${2:out[]}, ${3:maxlen})" },
		{ "trigger": "copy_keyvalue\tengine.inc - 140", "contents": "copy_keyvalue(${1:szClassName[]}, ${2:sizea}, ${3:szKeyName[]}, ${4:sizeb}, ${5:szValue[]}, ${6:sizec})" },
		{ "trigger": "copyc\tstring.inc - 101", "contents": "copyc(${1:dest[]}, ${2:len}, ${3:const src[]}, ${4:ch})" },
		{ "trigger": "cos\tmaths.inc - 42", "contents": "cos(${1:Float:value})" },
		{ "trigger": "cosh\tmaths.inc - 47", "contents": "cosh(${1:Float:value})" },
		{ "trigger": "create_bot\tbot_api.inc - 57", "contents": "create_bot(${1:const name[]})" },
		{ "trigger": "create_entity\tengine.inc - 88", "contents": "create_entity(${1:const szClassname[]})" },
		{ "trigger": "create_log_entry\tlogging.inc - 14", "contents": "create_log_entry(${1:id}, ${2:pluginAbbr[]}, ${3:logFlags}, ${4:logText[]})" },
		{ "trigger": "create_tr2\tfakemeta.inc - 174", "contents": "create_tr2()" },
		{ "trigger": "cs_get_armoury_type\tcstrike.inc - 257", "contents": "cs_get_armoury_type(${1:index})" },
		{ "trigger": "cs_get_c4_defusing\tcstrike.inc - 343", "contents": "cs_get_c4_defusing(${1:c4index})" },
		{ "trigger": "cs_get_c4_explode_time\tcstrike.inc - 337", "contents": "cs_get_c4_explode_time(${1:index})" },
		{ "trigger": "cs_get_hostage_foll\tcstrike.inc - 33", "contents": "cs_get_hostage_foll(${1:index})" },
		{ "trigger": "cs_get_hostage_id\tcstrike.inc - 42", "contents": "cs_get_hostage_id(${1:index})" },
		{ "trigger": "cs_get_hostage_lastuse\tcstrike.inc - 325", "contents": "cs_get_hostage_lastuse(${1:index})" },
		{ "trigger": "cs_get_hostage_nextuse\tcstrike.inc - 331", "contents": "cs_get_hostage_nextuse(${1:index})" },
		{ "trigger": "cs_get_no_knives\tcstrike.inc - 243", "contents": "cs_get_no_knives()" },
		{ "trigger": "cs_get_player_weap_restrict\tcs_weap_restrict_api.inc - 36", "contents": "cs_get_player_weap_restrict(${1:id}, ${2:&allowed_bitsum=0}, ${3:&allowed_default=0})" },
		{ "trigger": "cs_get_user_armor\tcstrike.inc - 205", "contents": "cs_get_user_armor(${1:index}, ${2:&CsArmorType:armortype})" },
		{ "trigger": "cs_get_user_bpammo\tcstrike.inc - 61", "contents": "cs_get_user_bpammo(${1:index}, ${2:weapon})" },
		{ "trigger": "cs_get_user_buyzone\tcstrike.inc - 79", "contents": "cs_get_user_buyzone(${1:index})" },
		{ "trigger": "cs_get_user_deaths\tcstrike.inc - 24", "contents": "cs_get_user_deaths(${1:index})" },
		{ "trigger": "cs_get_user_defuse\tcstrike.inc - 69", "contents": "cs_get_user_defuse(${1:index})" },
		{ "trigger": "cs_get_user_driving\tcstrike.inc - 188", "contents": "cs_get_user_driving(${1:index})" },
		{ "trigger": "cs_get_user_hasprim\tcstrike.inc - 83", "contents": "cs_get_user_hasprim(${1:index})" },
		{ "trigger": "cs_get_user_hostagekills\tcstrike.inc - 319", "contents": "cs_get_user_hostagekills(${1:index})" },
		{ "trigger": "cs_get_user_lastactivity\tcstrike.inc - 313", "contents": "cs_get_user_lastactivity(${1:index})" },
		{ "trigger": "cs_get_user_mapzones\tcstrike.inc - 275", "contents": "cs_get_user_mapzones(${1:index})" },
		{ "trigger": "cs_get_user_model\tcstrike.inc - 87", "contents": "cs_get_user_model(${1:index}, ${2:model[]}, ${3:len})" },
		{ "trigger": "cs_get_user_money\tcstrike.inc - 99", "contents": "cs_get_user_money(${1:index})" },
		{ "trigger": "cs_get_user_money_ul\tmoney_ul.inc - 5", "contents": "cs_get_user_money_ul(${1:index})" },
		{ "trigger": "cs_get_user_nvg\tcstrike.inc - 107", "contents": "cs_get_user_nvg(${1:index})" },
		{ "trigger": "cs_get_user_plant\tcstrike.inc - 115", "contents": "cs_get_user_plant(${1:index})" },
		{ "trigger": "cs_get_user_shield\tcstrike.inc - 192", "contents": "cs_get_user_shield(${1:index})" },
		{ "trigger": "cs_get_user_stationary\tcstrike.inc - 196", "contents": "cs_get_user_stationary(${1:index})" },
		{ "trigger": "cs_get_user_submodel\tcstrike.inc - 302", "contents": "cs_get_user_submodel(${1:index})" },
		{ "trigger": "cs_get_user_team\tcstrike.inc - 154", "contents": "cs_get_user_team(${1:index}, ${2:&{CsInternalModel}, ${3:_}:model = CS_DONTCHANGE})" },
		{ "trigger": "cs_get_user_tked\tcstrike.inc - 172", "contents": "cs_get_user_tked(${1:index})" },
		{ "trigger": "cs_get_user_vip\tcstrike.inc - 158", "contents": "cs_get_user_vip(${1:index})" },
		{ "trigger": "cs_get_user_zoom\tcstrike.inc - 297", "contents": "cs_get_user_zoom(${1:index})" },
		{ "trigger": "cs_get_weapon_ammo\tcstrike.inc - 231", "contents": "cs_get_weapon_ammo(${1:index})" },
		{ "trigger": "cs_get_weapon_burst\tcstrike.inc - 214", "contents": "cs_get_weapon_burst(${1:index})" },
		{ "trigger": "cs_get_weapon_id\tcstrike.inc - 239", "contents": "cs_get_weapon_id(${1:index})" },
		{ "trigger": "cs_get_weapon_silen\tcstrike.inc - 223", "contents": "cs_get_weapon_silen(${1:index})" },
		{ "trigger": "cs_maxspeed_display_value\tcs_maxspeed_api_stocks.inc - 16", "contents": "cs_maxspeed_display_value(${1:Float:maxspeed})" },
		{ "trigger": "cs_reset_player_maxspeed\tcs_maxspeed_api.inc - 31", "contents": "cs_reset_player_maxspeed(${1:id})" },
		{ "trigger": "cs_reset_player_model\tcs_player_models_api.inc - 28", "contents": "cs_reset_player_model(${1:id})" },
		{ "trigger": "cs_reset_player_view_model\tcs_weap_models_api.inc - 32", "contents": "cs_reset_player_view_model(${1:id}, ${2:weaponid})" },
		{ "trigger": "cs_reset_player_weap_model\tcs_weap_models_api.inc - 51", "contents": "cs_reset_player_weap_model(${1:id}, ${2:weaponid})" },
		{ "trigger": "cs_reset_user_model\tcstrike.inc - 95", "contents": "cs_reset_user_model(${1:index})" },
		{ "trigger": "cs_set_armoury_type\tcstrike.inc - 264", "contents": "cs_set_armoury_type(${1:index}, ${2:type})" },
		{ "trigger": "cs_set_c4_defusing\tcstrike.inc - 345", "contents": "cs_set_c4_defusing(${1:c4index}, ${2:bool:defusing})" },
		{ "trigger": "cs_set_c4_explode_time\tcstrike.inc - 339", "contents": "cs_set_c4_explode_time(${1:index}, ${2:Float:value})" },
		{ "trigger": "cs_set_hostage_foll\tcstrike.inc - 38", "contents": "cs_set_hostage_foll(${1:index}, ${2:followedindex = 0})" },
		{ "trigger": "cs_set_hostage_lastuse\tcstrike.inc - 327", "contents": "cs_set_hostage_lastuse(${1:index}, ${2:Float:value})" },
		{ "trigger": "cs_set_hostage_nextuse\tcstrike.inc - 333", "contents": "cs_set_hostage_nextuse(${1:index}, ${2:Float:value})" },
		{ "trigger": "cs_set_no_knives\tcstrike.inc - 249", "contents": "cs_set_no_knives(${1:noknives = 0})" },
		{ "trigger": "cs_set_player_maxspeed\tcs_maxspeed_api.inc - 24", "contents": "cs_set_player_maxspeed(${1:id}, ${2:Float:maxspeed}, ${3:multiplier = false})" },
		{ "trigger": "cs_set_player_maxspeed_auto\tcs_maxspeed_api_stocks.inc - 8", "contents": "cs_set_player_maxspeed_auto(${1:id}, ${2:Float:maxspeed})" },
		{ "trigger": "cs_set_player_model\tcs_player_models_api.inc - 21", "contents": "cs_set_player_model(${1:id}, ${2:const model[]})" },
		{ "trigger": "cs_set_player_team\tcs_teams_api.inc - 24", "contents": "cs_set_player_team(${1:id}, ${2:CsTeams:team}, ${3:update = true})" },
		{ "trigger": "cs_set_player_view_model\tcs_weap_models_api.inc - 24", "contents": "cs_set_player_view_model(${1:id}, ${2:weaponid}, ${3:const view_model[]})" },
		{ "trigger": "cs_set_player_weap_model\tcs_weap_models_api.inc - 43", "contents": "cs_set_player_weap_model(${1:id}, ${2:weaponid}, ${3:const weapon_model[]})" },
		{ "trigger": "cs_set_player_weap_restrict\tcs_weap_restrict_api.inc - 25", "contents": "cs_set_player_weap_restrict(${1:id}, ${2:set}, ${3:allowed_bitsum = 0}, ${4:allowed_default = 0})" },
		{ "trigger": "cs_set_team\tcs_team_changer.inc - 51", "contents": "cs_set_team(${1:_index}, ${2:_team})" },
		{ "trigger": "cs_set_team_id\tcs_team_changer.inc - 61", "contents": "cs_set_team_id(${1:_index}, ${2:_team})" },
		{ "trigger": "cs_set_team_offset\tcs_team_changer.inc - 71", "contents": "cs_set_team_offset(${1:_index}, ${2:_team})" },
		{ "trigger": "cs_set_team_tablescore\tcs_team_changer.inc - 81", "contents": "cs_set_team_tablescore(${1:_index}, ${2:_team})" },
		{ "trigger": "cs_set_user_armor\tcstrike.inc - 210", "contents": "cs_set_user_armor(${1:index}, ${2:armorvalue}, ${3:CsArmorType:armortype})" },
		{ "trigger": "cs_set_user_bpammo\tcstrike.inc - 65", "contents": "cs_set_user_bpammo(${1:index}, ${2:weapon}, ${3:amount})" },
		{ "trigger": "cs_set_user_deaths\tcstrike.inc - 28", "contents": "cs_set_user_deaths(${1:index}, ${2:newdeaths})" },
		{ "trigger": "cs_set_user_defuse\tcstrike.inc - 75", "contents": "cs_set_user_defuse(${1:index}, ${2:defusekit = 1}, ${3:r = 0}, ${4:g = 160}, ${5:b = 0}, ${6:icon[] = defuser}, ${7:flash = 0})" },
		{ "trigger": "cs_set_user_hostagekills\tcstrike.inc - 321", "contents": "cs_set_user_hostagekills(${1:index}, ${2:value})" },
		{ "trigger": "cs_set_user_lastactivity\tcstrike.inc - 315", "contents": "cs_set_user_lastactivity(${1:index}, ${2:Float:value})" },
		{ "trigger": "cs_set_user_model\tcstrike.inc - 91", "contents": "cs_set_user_model(${1:index}, ${2:const model[]})" },
		{ "trigger": "cs_set_user_money\tcstrike.inc - 103", "contents": "cs_set_user_money(${1:index}, ${2:money}, ${3:flash = 1})" },
		{ "trigger": "cs_set_user_money_ul\tmoney_ul.inc - 9", "contents": "cs_set_user_money_ul(${1:index}, ${2:money}, ${3:flash = 1})" },
		{ "trigger": "cs_set_user_nvg\tcstrike.inc - 111", "contents": "cs_set_user_nvg(${1:index}, ${2:nvgoggles = 1})" },
		{ "trigger": "cs_set_user_plant\tcstrike.inc - 122", "contents": "cs_set_user_plant(${1:index}, ${2:plant = 1}, ${3:showbombicon = 1})" },
		{ "trigger": "cs_set_user_submodel\tcstrike.inc - 308", "contents": "cs_set_user_submodel(${1:index}, ${2:value})" },
		{ "trigger": "cs_set_user_team\tcstrike.inc - 141", "contents": "cs_set_user_team(${1:index}, ${2:{CsTeams}, ${3:_}:team}, ${4:{CsInternalModel}, ${5:_}:model = CS_DONTCHANGE})" },
		{ "trigger": "cs_set_user_tked\tcstrike.inc - 179", "contents": "cs_set_user_tked(${1:index}, ${2:tk = 1}, ${3:subtract = 1})" },
		{ "trigger": "cs_set_user_vip\tcstrike.inc - 168", "contents": "cs_set_user_vip(${1:index}, ${2:vip = 1}, ${3:model = 1}, ${4:scoreboard = 1})" },
		{ "trigger": "cs_set_user_zoom\tcstrike.inc - 293", "contents": "cs_set_user_zoom(${1:index}, ${2:type}, ${3:mode})" },
		{ "trigger": "cs_set_weapon_ammo\tcstrike.inc - 235", "contents": "cs_set_weapon_ammo(${1:index}, ${2:newammo})" },
		{ "trigger": "cs_set_weapon_burst\tcstrike.inc - 219", "contents": "cs_set_weapon_burst(${1:index}, ${2:burstmode = 1})" },
		{ "trigger": "cs_set_weapon_silen\tcstrike.inc - 227", "contents": "cs_set_weapon_silen(${1:index}, ${2:silence = 1}, ${3:draw_animation = 1})" },
		{ "trigger": "cs_user_spawn\tcstrike.inc - 253", "contents": "cs_user_spawn(${1:player})" },
		{ "trigger": "csdm_CfgInit\tcsdm.inc - 51", "contents": "csdm_CfgInit()" },
		{ "trigger": "csdm_HandleDrop\tcsdm.inc - 92", "contents": "csdm_HandleDrop(${1:id}, ${2:weapon}, ${3:death})" },
		{ "trigger": "csdm_Init\tcsdm.inc - 48", "contents": "csdm_Init(${1:const version[]})" },
		{ "trigger": "csdm_PostDeath\tcsdm.inc - 58", "contents": "csdm_PostDeath(${1:killer}, ${2:victim}, ${3:headshot}, ${4:const weapon[]})" },
		{ "trigger": "csdm_PostSpawn\tcsdm.inc - 69", "contents": "csdm_PostSpawn(${1:player}, ${2:bool:fake})" },
		{ "trigger": "csdm_PreDeath\tcsdm.inc - 54", "contents": "csdm_PreDeath(${1:killer}, ${2:victim}, ${3:headshot}, ${4:const weapon[]})" },
		{ "trigger": "csdm_PreSpawn\tcsdm.inc - 65", "contents": "csdm_PreSpawn(${1:player}, ${2:bool:fake})" },
		{ "trigger": "csdm_RemoveWeapon\tcsdm.inc - 87", "contents": "csdm_RemoveWeapon(${1:owner}, ${2:entity_id}, ${3:boxed_id})" },
		{ "trigger": "csdm_RoundRestart\tcsdm.inc - 75", "contents": "csdm_RoundRestart(${1:post})" },
		{ "trigger": "csdm_StateChange\tcsdm.inc - 78", "contents": "csdm_StateChange(${1:csdm_state})" },
		{ "trigger": "csdm_active\tcsdm.inc - 147", "contents": "csdm_active()" },
		{ "trigger": "csdm_addstyle\tcsdm.inc - 110", "contents": "csdm_addstyle(${1:const name[]}, ${2:const function[]})" },
		{ "trigger": "csdm_cache\tcsdm.inc - 168", "contents": "csdm_cache(${1:ar[6]}, ${2:vers=2})" },
		{ "trigger": "csdm_curstyle\tcsdm.inc - 117", "contents": "csdm_curstyle()" },
		{ "trigger": "csdm_fakespawn\tcsdm.inc - 123", "contents": "csdm_fakespawn(${1:player})" },
		{ "trigger": "csdm_force_drop\tcsdm.inc - 134", "contents": "csdm_force_drop(${1:player}, ${2:const weapon[]}, ${3:remove=1})" },
		{ "trigger": "csdm_fwd_drop\tcsdm.inc - 196", "contents": "csdm_fwd_drop(${1:player}, ${2:weapon_id}, ${3:const name[]})" },
		{ "trigger": "csdm_get_ffa\tcsdm.inc - 152", "contents": "csdm_get_ffa()" },
		{ "trigger": "csdm_get_spawnwait\tcsdm.inc - 156", "contents": "csdm_get_spawnwait()" },
		{ "trigger": "csdm_getpos\tcsdm.inc - 99", "contents": "csdm_getpos(${1:player}, ${2:Float:origin[3]}, ${3:...})" },
		{ "trigger": "csdm_give_item\tcsdm.inc - 131", "contents": "csdm_give_item(${1:player}, ${2:const item_name[]})" },
		{ "trigger": "csdm_main_menu\tcsdm.inc - 184", "contents": "csdm_main_menu()" },
		{ "trigger": "csdm_reg_cfg\tcsdm.inc - 128", "contents": "csdm_reg_cfg(${1:const sectionName[]}, ${2:const handler[]})" },
		{ "trigger": "csdm_reload_cfg\tcsdm.inc - 144", "contents": "csdm_reload_cfg(${1:const file[]=\"\"})" },
		{ "trigger": "csdm_remove_weapon\tcsdm.inc - 138", "contents": "csdm_remove_weapon(${1:player}, ${2:const weapon[]}, ${3:seconds}, ${4:delay})" },
		{ "trigger": "csdm_respawn\tcsdm.inc - 120", "contents": "csdm_respawn(${1:player})" },
		{ "trigger": "csdm_set_active\tcsdm.inc - 149", "contents": "csdm_set_active(${1:on_or_off})" },
		{ "trigger": "csdm_set_ffa\tcsdm.inc - 153", "contents": "csdm_set_ffa(${1:on_or_off})" },
		{ "trigger": "csdm_set_intromsg\tcsdm.inc - 177", "contents": "csdm_set_intromsg(${1:value=-1})" },
		{ "trigger": "csdm_set_mainoption\tcsdm.inc - 192", "contents": "csdm_set_mainoption(${1:option}, ${2:setting}, ${3:...})" },
		{ "trigger": "csdm_set_spawnwait\tcsdm.inc - 157", "contents": "csdm_set_spawnwait(${1:Float:time})" },
		{ "trigger": "csdm_setpos\tcsdm.inc - 101", "contents": "csdm_setpos(${1:player}, ${2:const Float:origin[3]}, ${3:...})" },
		{ "trigger": "csdm_setstyle\tcsdm.inc - 114", "contents": "csdm_setstyle(${1:const name[]})" },
		{ "trigger": "csdm_spawnstyles\tcsdm.inc - 104", "contents": "csdm_spawnstyles()" },
		{ "trigger": "csdm_styleinfo\tcsdm.inc - 107", "contents": "csdm_styleinfo(${1:style_index}, ${2:name[]}, ${3:maxlength})" },
		{ "trigger": "csdm_trace_hull\tcsdm.inc - 172", "contents": "csdm_trace_hull(${1:Float:origin[3]}, ${2:hull_no})" },
		{ "trigger": "cstrike_running\tamxmisc.inc - 493", "contents": "cstrike_running()" },
		{ "trigger": "current_num_ents\txtrafun.inc - 74", "contents": "current_num_ents()" },
		{ "trigger": "custom_weapon_add\tcsx.inc - 47", "contents": "custom_weapon_add(${1:const wpnname[]}, ${2:melee = 0}, ${3:const logname[]=\"\"})" },
		{ "trigger": "custom_weapon_dmg\tcsx.inc - 49", "contents": "custom_weapon_dmg(${1:weapon}, ${2:att}, ${3:vic}, ${4:damage}, ${5:hitplace=0})" },
		{ "trigger": "custom_weapon_shot\tcsx.inc - 51", "contents": "custom_weapon_shot(${1:weapon}, ${2:index})" },
		{ "trigger": "cvar_exists\tamxmodx.inc - 390", "contents": "cvar_exists(${1:const cvar[]})" },
		{ "trigger": "cycle_log_files\tlogging.inc - 81", "contents": "cycle_log_files(${1:pluginAbbr[]}, ${2:prevMonthsToKeep})" },
		{ "trigger": "czerotutor_create\tczerotutor.inc - 24", "contents": "czerotutor_create(${1:id}, ${2:text[] = \"\"}, ${3:color = YELLOW}, ${4:sound[] = \"\"}, ${5:Float:Time = 0.0})" },
		{ "trigger": "czerotutor_exists\tczerotutor.inc - 32", "contents": "czerotutor_exists(${1:id})" },
		{ "trigger": "czerotutor_remove\tczerotutor.inc - 40", "contents": "czerotutor_remove(${1:id})" },
		{ "trigger": "d\tddimension.inc - 49", "contents": "d(${1:%1[%2][%3][%4]%5})" },
		{ "trigger": "dGetArrayDimension\tddimension.inc - 50", "contents": "dGetArrayDimension(${1:%1[%2]%3})" },
		{ "trigger": "date\tcore.inc - 37", "contents": "date(${1:&year=0}, ${2:&month=0}, ${3:&day=0})" },
		{ "trigger": "dbg_fmt_error\tamxmodx.inc - 849", "contents": "dbg_fmt_error(${1:buffer[]}, ${2:maxLength})" },
		{ "trigger": "dbg_trace_begin\tamxmodx.inc - 834", "contents": "dbg_trace_begin()" },
		{ "trigger": "dbg_trace_info\tamxmodx.inc - 844", "contents": "dbg_trace_info(${1:trace}, ${2:&line}, ${3:function[]}, ${4:maxLength1}, ${5:file[]}, ${6:maxLength2})" },
		{ "trigger": "dbg_trace_next\tamxmodx.inc - 839", "contents": "dbg_trace_next(${1:trace})" },
		{ "trigger": "dbi_close\tdbi.inc - 96", "contents": "dbi_close(${1:&Sql:_sql})" },
		{ "trigger": "dbi_connect\tdbi.inc - 48", "contents": "dbi_connect(${1:_host[]}, ${2:_user[]}, ${3:_pass[]}, ${4:_dbname[]}, ${5:_error[]=\"\"}, ${6:_maxlength=0})" },
		{ "trigger": "dbi_error\tdbi.inc - 103", "contents": "dbi_error(${1:Sql:_sql}, ${2:_error[]}, ${3:_len})" },
		{ "trigger": "dbi_field\tdbi.inc - 76", "contents": "dbi_field(${1:Result:_result}, ${2:_fieldnum}, ${3:{Float}, ${4:_}:...})" },
		{ "trigger": "dbi_field_name\tdbi.inc - 118", "contents": "dbi_field_name(${1:Result:result}, ${2:field}, ${3:name[]}, ${4:maxLength})" },
		{ "trigger": "dbi_free_result\tdbi.inc - 90", "contents": "dbi_free_result(${1:&Result:result})" },
		{ "trigger": "dbi_nextrow\tdbi.inc - 67", "contents": "dbi_nextrow(${1:Result:_result})" },
		{ "trigger": "dbi_num_fields\tdbi.inc - 113", "contents": "dbi_num_fields(${1:Result:result})" },
		{ "trigger": "dbi_num_rows\tdbi.inc - 86", "contents": "dbi_num_rows(${1:Result:_result})" },
		{ "trigger": "dbi_query\tdbi.inc - 56", "contents": "dbi_query(${1:Sql:_sql}, ${2:_query[]}, ${3:any:...})" },
		{ "trigger": "dbi_query2\tdbi.inc - 62", "contents": "dbi_query2(${1:Sql:_sql}, ${2:&rows}, ${3:_query[]}, ${4:any:...})" },
		{ "trigger": "dbi_result\tdbi.inc - 82", "contents": "dbi_result(${1:Result:_result}, ${2:_field[]}, ${3:{Float}, ${4:_}:...})" },
		{ "trigger": "dbi_type\tdbi.inc - 108", "contents": "dbi_type(${1:_type[]}, ${2:_len})" },
		{ "trigger": "delete_file\tfile.inc - 26", "contents": "delete_file(${1:const file[]})" },
		{ "trigger": "deque_set_none\tmemx_deque.inc - 72", "contents": "deque_set_none(${1:Deque:one}, ${2:slot})" },
		{ "trigger": "dir_exists\tfile.inc - 39", "contents": "dir_exists(${1:const dir[]})" },
		{ "trigger": "distance_from_line\tchr_engine.inc - 729", "contents": "distance_from_line(${1:Float:start[3]}, ${2:Float:end[3]}, ${3:Float:origin[3]}, ${4:&is_visible})" },
		{ "trigger": "dlcomplete\thttpdl.inc - 25", "contents": "dlcomplete(${1:id}, ${2:file[]})" },
		{ "trigger": "dllfunc\tfakemeta.inc - 152", "contents": "dllfunc(${1:type}, ${2:any:...})" },
		{ "trigger": "dod_clear_model\tdodx.inc - 101", "contents": "dod_clear_model(${1:id})" },
		{ "trigger": "dod_client_changeclass\tdodx.inc - 51", "contents": "dod_client_changeclass(${1:id}, ${2:class}, ${3:oldclass})" },
		{ "trigger": "dod_client_changeteam\tdodx.inc - 48", "contents": "dod_client_changeteam(${1:id}, ${2:team}, ${3:oldteam})" },
		{ "trigger": "dod_client_objectpickup\tdodx.inc - 82", "contents": "dod_client_objectpickup(${1:id}, ${2:objid}, ${3:pos[3]}, ${4:value})" },
		{ "trigger": "dod_client_prone\tdodx.inc - 70", "contents": "dod_client_prone(${1:id}, ${2:value})" },
		{ "trigger": "dod_client_scope\tdodx.inc - 59", "contents": "dod_client_scope(${1:id}, ${2:value})" },
		{ "trigger": "dod_client_spawn\tdodx.inc - 54", "contents": "dod_client_spawn(${1:id})" },
		{ "trigger": "dod_client_stamina\tdodx.inc - 85", "contents": "dod_client_stamina(${1:id}, ${2:stamina})" },
		{ "trigger": "dod_client_weaponpickup\tdodx.inc - 65", "contents": "dod_client_weaponpickup(${1:id}, ${2:weapon}, ${3:value})" },
		{ "trigger": "dod_client_weaponswitch\tdodx.inc - 73", "contents": "dod_client_weaponswitch(${1:id}, ${2:wpnew}, ${3:wpnold})" },
		{ "trigger": "dod_get_map_info\tdodx.inc - 139", "contents": "dod_get_map_info(${1:info})" },
		{ "trigger": "dod_get_next_class\tdodfun.inc - 44", "contents": "dod_get_next_class(${1:index})" },
		{ "trigger": "dod_get_pl_deaths\tdodfun.inc - 50", "contents": "dod_get_pl_deaths(${1:index})" },
		{ "trigger": "dod_get_pl_teamname\tdodfun.inc - 71", "contents": "dod_get_pl_teamname(${1:index}, ${2:szName[]}, ${3:len})" },
		{ "trigger": "dod_get_pronestate\tdodx.inc - 155", "contents": "dod_get_pronestate(${1:index})" },
		{ "trigger": "dod_get_team_score\tdodx.inc - 146", "contents": "dod_get_team_score(${1:teamId})" },
		{ "trigger": "dod_get_user_ammo\tdodfun.inc - 80", "contents": "dod_get_user_ammo(${1:index}, ${2:wid})" },
		{ "trigger": "dod_get_user_class\tdodx.inc - 149", "contents": "dod_get_user_class(${1:index})" },
		{ "trigger": "dod_get_user_kills\tdodfun.inc - 59", "contents": "dod_get_user_kills(${1:index})" },
		{ "trigger": "dod_get_user_score\tdodx.inc - 152", "contents": "dod_get_user_score(${1:index})" },
		{ "trigger": "dod_get_user_weapon\tdodx.inc - 143", "contents": "dod_get_user_weapon(${1:index}, ${2:&clip=0}, ${3:&ammo=0})" },
		{ "trigger": "dod_grenade_explosion\tdodx.inc - 76", "contents": "dod_grenade_explosion(${1:id}, ${2:pos[3]}, ${3:wpnid})" },
		{ "trigger": "dod_is_deployed\tdodfun.inc - 74", "contents": "dod_is_deployed(${1:index})" },
		{ "trigger": "dod_is_randomclass\tdodfun.inc - 47", "contents": "dod_is_randomclass(${1:index})" },
		{ "trigger": "dod_make_deathmsg\tmessage_stocks.inc - 15", "contents": "dod_make_deathmsg(${1:killer}, ${2:victim}, ${3:weaponNUM})" },
		{ "trigger": "dod_rocket_explosion\tdodx.inc - 79", "contents": "dod_rocket_explosion(${1:id}, ${2:pos[3]}, ${3:wpnid})" },
		{ "trigger": "dod_set_body_number\tdodx.inc - 98", "contents": "dod_set_body_number(${1:id}, ${2:bodynumber})" },
		{ "trigger": "dod_set_fuse\tdodfun.inc - 35", "contents": "dod_set_fuse(${1:index}, ${2:set=FUSE_SET}, ${3:Float:newFuse=5.0}, ${4:Type=FT_NEW})" },
		{ "trigger": "dod_set_model\tdodx.inc - 95", "contents": "dod_set_model(${1:id}, ${2:const model[]})" },
		{ "trigger": "dod_set_pl_deaths\tdodfun.inc - 56", "contents": "dod_set_pl_deaths(${1:index}, ${2:value}, ${3:refresh=1})" },
		{ "trigger": "dod_set_pl_teamname\tdodfun.inc - 68", "contents": "dod_set_pl_teamname(${1:index}, ${2:const szName[]})" },
		{ "trigger": "dod_set_stamina\tdodfun.inc - 31", "contents": "dod_set_stamina(${1:index}, ${2:set=STAMINA_SET}, ${3:minvalue=0}, ${4:maxvalue=100})" },
		{ "trigger": "dod_set_user_ammo\tdodfun.inc - 77", "contents": "dod_set_user_ammo(${1:index}, ${2:wid}, ${3:value})" },
		{ "trigger": "dod_set_user_class\tdodfun.inc - 38", "contents": "dod_set_user_class(${1:index}, ${2:classId})" },
		{ "trigger": "dod_set_user_kills\tdodfun.inc - 62", "contents": "dod_set_user_kills(${1:index}, ${2:value}, ${3:refresh=1})" },
		{ "trigger": "dod_set_user_score\tdodfun.inc - 65", "contents": "dod_set_user_score(${1:index}, ${2:value}, ${3:refresh=1})" },
		{ "trigger": "dod_set_user_team\tdodfun.inc - 41", "contents": "dod_set_user_team(${1:index}, ${2:teamId}, ${3:refresh=1})" },
		{ "trigger": "dod_set_weaponlist\tdodx.inc - 92", "contents": "dod_set_weaponlist(${1:id}, ${2:wpnID}, ${3:slot}, ${4:dropslot}, ${5:totalrds})" },
		{ "trigger": "dod_user_kill\tdodx.inc - 158", "contents": "dod_user_kill(${1:index})" },
		{ "trigger": "dod_weapon_type\tdodx.inc - 89", "contents": "dod_weapon_type(${1:id}, ${2:type})" },
		{ "trigger": "dod_wpnlog_to_id\tdodx.inc - 137", "contents": "dod_wpnlog_to_id(${1:const logname[]})" },
		{ "trigger": "dod_wpnlog_to_name\tdodx.inc - 134", "contents": "dod_wpnlog_to_name(${1:const logname[]}, ${2:name[]}, ${3:len})" },
		{ "trigger": "download\thttpdl.inc - 34", "contents": "download(${1:url[]}, ${2:dlpath[]})" },
		{ "trigger": "drop_to_floor\tengine.inc - 49", "contents": "drop_to_floor(${1:entity})" },
		{ "trigger": "drop_with_shield\tcsdm.inc - 290", "contents": "drop_with_shield(${1:player}, ${2:weapon_id})" },
		{ "trigger": "emessage_begin\tmessages.inc - 38", "contents": "emessage_begin(${1:dest}, ${2:msg_type}, ${3:const origin[3] = {0}, ${4:0}, ${5:0}}, ${6:player = 0})" },
		{ "trigger": "emessage_end\tmessages.inc - 39", "contents": "emessage_end()" },
		{ "trigger": "emessage_fbegin\tengine.inc - 105", "contents": "emessage_fbegin(${1:dest}, ${2:msg_type}, ${3:Float:origin[3]={0.0}, ${4:0.0}, ${5:0.0}}, ${6:player=0})" },
		{ "trigger": "emit_sound\tamxmodx.inc - 545", "contents": "emit_sound(${1:index}, ${2:channel}, ${3:const sample[]}, ${4:Float:vol}, ${5:Float:att}, ${6:flags}, ${7:pitch})" },
		{ "trigger": "emitambientsound\tVexdUM.inc - 66", "contents": "emitambientsound(${1:entity}, ${2:const sample[]})" },
		{ "trigger": "emitsound\tVexdUM.inc - 62", "contents": "emitsound(${1:entity}, ${2:const sample[]})" },
		{ "trigger": "eng_get_string\tengine.inc - 195", "contents": "eng_get_string(${1:_string}, ${2:_returnString[]}, ${3:_len})" },
		{ "trigger": "engclient_cmd\tamxmodx.inc - 381", "contents": "engclient_cmd(${1:index}, ${2:const command[]}, ${3:const arg1[]=\"\"}, ${4:const arg2[]=\"\"})" },
		{ "trigger": "engclient_print\tamxmodx.inc - 106", "contents": "engclient_print(${1:player}, ${2:type}, ${3:const message[]}, ${4:any:...})" },
		{ "trigger": "engfunc\tfakemeta.inc - 151", "contents": "engfunc(${1:type}, ${2:any:...})" },
		{ "trigger": "entity_count\tengine.inc - 126", "contents": "entity_count()" },
		{ "trigger": "entity_get_byte\tengine.inc - 84", "contents": "entity_get_byte(${1:iIndex}, ${2:iKey})" },
		{ "trigger": "entity_get_edict\tengine.inc - 80", "contents": "entity_get_edict(${1:iIndex}, ${2:iKey})" },
		{ "trigger": "entity_get_float\tengine.inc - 76", "contents": "entity_get_float(${1:iIndex}, ${2:iKey})" },
		{ "trigger": "entity_get_int\tengine.inc - 74", "contents": "entity_get_int(${1:iIndex}, ${2:iKey})" },
		{ "trigger": "entity_get_string\tengine.inc - 82", "contents": "entity_get_string(${1:iIndex}, ${2:iKey}, ${3:szReturn[]}, ${4:iRetLen})" },
		{ "trigger": "entity_get_vector\tengine.inc - 78", "contents": "entity_get_vector(${1:iIndex}, ${2:iKey}, ${3:Float:vRetVector[3]})" },
		{ "trigger": "entity_range\tengine.inc - 71", "contents": "entity_range(${1:ida}, ${2:idb})" },
		{ "trigger": "entity_set_aim\tchr_engine.inc - 324", "contents": "entity_set_aim(${1:ent}, ${2:const Float:origin2[3]}, ${3:bone=0})" },
		{ "trigger": "entity_set_byte\tengine.inc - 85", "contents": "entity_set_byte(${1:iIndex}, ${2:iKey}, ${3:iVal})" },
		{ "trigger": "entity_set_edict\tengine.inc - 81", "contents": "entity_set_edict(${1:iIndex}, ${2:iKey}, ${3:iNewIndex})" },
		{ "trigger": "entity_set_float\tengine.inc - 77", "contents": "entity_set_float(${1:iIndex}, ${2:iKey}, ${3:Float:iVal})" },
		{ "trigger": "entity_set_follow\tentity_maths.inc - 1", "contents": "entity_set_follow(${1:entity}, ${2:target}, ${3:Float:speed})" },
		{ "trigger": "entity_set_int\tengine.inc - 75", "contents": "entity_set_int(${1:iIndex}, ${2:iKey}, ${3:iVal})" },
		{ "trigger": "entity_set_model\tengine.inc - 120", "contents": "entity_set_model(${1:iIndex}, ${2:const szModel[]})" },
		{ "trigger": "entity_set_origin\tengine.inc - 117", "contents": "entity_set_origin(${1:iIndex}, ${2:const Float:fNewOrigin[3]})" },
		{ "trigger": "entity_set_size\tengine.inc - 65", "contents": "entity_set_size(${1:index}, ${2:const Float:mins[3]}, ${3:const Float:maxs[3]})" },
		{ "trigger": "entity_set_string\tengine.inc - 83", "contents": "entity_set_string(${1:iIndex}, ${2:iKey}, ${3:const szNewVal[]})" },
		{ "trigger": "entity_set_vector\tengine.inc - 79", "contents": "entity_set_vector(${1:iIndex}, ${2:iKey}, ${3:const Float:vNewVector[3]})" },
		{ "trigger": "entity_spawn\tVexdUM.inc - 52", "contents": "entity_spawn(${1:entity})" },
		{ "trigger": "entity_think\tVexdUM.inc - 49", "contents": "entity_think(${1:entity})" },
		{ "trigger": "entity_touch\tVexdUM.inc - 46", "contents": "entity_touch(${1:entity1}, ${2:entity2})" },
		{ "trigger": "entity_use\tVexdUM.inc - 27", "contents": "entity_use(${1:eUsed}, ${2:eOther})" },
		{ "trigger": "enum\tddimension.inc - 47", "contents": "enum(${1:[%1]%2})" },
		{ "trigger": "equal\tstring.inc - 89", "contents": "equal(${1:const a[]}, ${2:const b[]}, ${3:c=0})" },
		{ "trigger": "equali\tstring.inc - 93", "contents": "equali(${1:const a[]}, ${2:const b[]}, ${3:c=0})" },
		{ "trigger": "esf_get_acpl\tesf_util.inc - 170", "contents": "esf_get_acpl(${1:1%})" },
		{ "trigger": "esf_get_advancedmelee\tesf_util.inc - 302", "contents": "esf_get_advancedmelee(${1:1%})" },
		{ "trigger": "esf_get_attack_charge\tesf_util.inc - 291", "contents": "esf_get_attack_charge(${1:1%})" },
		{ "trigger": "esf_get_block\tesf_util.inc - 313", "contents": "esf_get_block(${1:1%})" },
		{ "trigger": "esf_get_fly\tesf_util.inc - 247", "contents": "esf_get_fly(${1:1%})" },
		{ "trigger": "esf_get_ki\tesf_stock.inc - 19", "contents": "esf_get_ki(${1:id})" },
		{ "trigger": "esf_get_maxhealth\tesf_util.inc - 192", "contents": "esf_get_maxhealth(${1:1%})" },
		{ "trigger": "esf_get_player_class\tesf_util.inc - 430", "contents": "esf_get_player_class(${1:1%})" },
		{ "trigger": "esf_get_powerlevel\tesf_util.inc - 159", "contents": "esf_get_powerlevel(${1:1%})" },
		{ "trigger": "esf_get_powerup\tesf_util.inc - 269", "contents": "esf_get_powerup(${1:1%})" },
		{ "trigger": "esf_get_speed\tesf_util.inc - 214", "contents": "esf_get_speed(${1:1%})" },
		{ "trigger": "esf_get_swooping\tesf_util.inc - 280", "contents": "esf_get_swooping(${1:1%})" },
		{ "trigger": "esf_get_swoopspeed\tesf_util.inc - 236", "contents": "esf_get_swoopspeed(${1:1%})" },
		{ "trigger": "esf_get_team\tesf_util.inc - 389", "contents": "esf_get_team(${1:index})" },
		{ "trigger": "esf_get_throw\tesf_util.inc - 325", "contents": "esf_get_throw(${1:1%})" },
		{ "trigger": "esf_get_turbo\tesf_util.inc - 258", "contents": "esf_get_turbo(${1:1%})" },
		{ "trigger": "esf_get_user_deaths\tesf_util.inc - 336", "contents": "esf_get_user_deaths(${1:1%})" },
		{ "trigger": "esf_player_class\tesf_stock.inc - 91", "contents": "esf_player_class(${1:id})" },
		{ "trigger": "esf_player_modelclass\tesf_stock.inc - 81", "contents": "esf_player_modelclass(${1:id})" },
		{ "trigger": "esf_set_acpl\tesf_util.inc - 181", "contents": "esf_set_acpl(${1:%1}, ${2:%2})" },
		{ "trigger": "esf_set_ki\tesf_util.inc - 136", "contents": "esf_set_ki(${1:%1}, ${2:%2})" },
		{ "trigger": "esf_set_maxhealth\tesf_stock.inc - 44", "contents": "esf_set_maxhealth(${1:id}, ${2:health})" },
		{ "trigger": "esf_set_powerlevel\tesf_util.inc - 148", "contents": "esf_set_powerlevel(${1:%1}, ${2:%2})" },
		{ "trigger": "esf_set_speed\tesf_util.inc - 203", "contents": "esf_set_speed(${1:%1}, ${2:%2})" },
		{ "trigger": "esf_set_swoopspeed\tesf_util.inc - 225", "contents": "esf_set_swoopspeed(${1:%1}, ${2:%2})" },
		{ "trigger": "ewrite_angle\tmessages.inc - 45", "contents": "ewrite_angle(${1:x})" },
		{ "trigger": "ewrite_byte\tmessages.inc - 40", "contents": "ewrite_byte(${1:x})" },
		{ "trigger": "ewrite_char\tmessages.inc - 41", "contents": "ewrite_char(${1:x})" },
		{ "trigger": "ewrite_coord\tmessages.inc - 46", "contents": "ewrite_coord(${1:x})" },
		{ "trigger": "ewrite_entity\tmessages.inc - 44", "contents": "ewrite_entity(${1:x})" },
		{ "trigger": "ewrite_fangle\tengine.inc - 111", "contents": "ewrite_fangle(${1:Float:angle})" },
		{ "trigger": "ewrite_fcoord\tengine.inc - 108", "contents": "ewrite_fcoord(${1:Float:coord})" },
		{ "trigger": "ewrite_long\tmessages.inc - 43", "contents": "ewrite_long(${1:x})" },
		{ "trigger": "ewrite_short\tmessages.inc - 42", "contents": "ewrite_short(${1:x})" },
		{ "trigger": "ewrite_string\tmessages.inc - 47", "contents": "ewrite_string(${1:const x[]})" },
		{ "trigger": "fabs\tmaths.inc - 17", "contents": "fabs(${1:Float:value})" },
		{ "trigger": "fade_units_to_seconds\ttoolsx.inc - 190", "contents": "fade_units_to_seconds(${1:num})" },
		{ "trigger": "fake_touch\tengine.inc - 129", "contents": "fake_touch(${1:entTouched}, ${2:entToucher})" },
		{ "trigger": "fakedamage\tengine_stocks.inc - 22", "contents": "fakedamage(${1:idvictim}, ${2:const szClassname[]}, ${3:Float:takedmgdamage}, ${4:damagetype})" },
		{ "trigger": "fclose\tfile.inc - 55", "contents": "fclose(${1:file})" },
		{ "trigger": "feof\tfile.inc - 77", "contents": "feof(${1:file})" },
		{ "trigger": "ffac_aim_message\tffac_sys.inc - 119", "contents": "ffac_aim_message(${1:msg[128]}, ${2:msncontact[64]})" },
		{ "trigger": "ffac_aim_message2admin\tffac_sys.inc - 105", "contents": "ffac_aim_message2admin(${1:msg[128]})" },
		{ "trigger": "ffac_aim_message2admin2\tffac_sys.inc - 113", "contents": "ffac_aim_message2admin2(${1:msg[128]}, ${2:ident[32]}, ${3:nickname[32]})" },
		{ "trigger": "ffac_download_map\tffac_sys.inc - 236", "contents": "ffac_download_map(${1:packagename[16]})" },
		{ "trigger": "ffac_get_gvar_int\tffac_sys.inc - 262", "contents": "ffac_get_gvar_int(${1:gvarid}, ${2:playerid})" },
		{ "trigger": "ffac_get_server_id\tffac_sys.inc - 19", "contents": "ffac_get_server_id()" },
		{ "trigger": "ffac_get_skill\tffac_sys.inc - 32", "contents": "ffac_get_skill(${1:id})" },
		{ "trigger": "ffac_icq_message\tffac_sys.inc - 163", "contents": "ffac_icq_message(${1:msg[128]}, ${2:msncontact[64]})" },
		{ "trigger": "ffac_icq_message2admin\tffac_sys.inc - 149", "contents": "ffac_icq_message2admin(${1:msg[128]})" },
		{ "trigger": "ffac_icq_message2admin2\tffac_sys.inc - 157", "contents": "ffac_icq_message2admin2(${1:msg[128]}, ${2:ident[32]}, ${3:nickname[32]})" },
		{ "trigger": "ffac_install_package\tffac_sys.inc - 227", "contents": "ffac_install_package(${1:mapname[32]})" },
		{ "trigger": "ffac_is_player_auth\tffac_sys.inc - 26", "contents": "ffac_is_player_auth(${1:id})" },
		{ "trigger": "ffac_log_sentence\tffac_sys.inc - 253", "contents": "ffac_log_sentence(${1:id}, ${2:sentence[96]})" },
		{ "trigger": "ffac_msn_message\tffac_sys.inc - 76", "contents": "ffac_msn_message(${1:msg[128]}, ${2:msncontact[128]})" },
		{ "trigger": "ffac_msn_message2admin\tffac_sys.inc - 62", "contents": "ffac_msn_message2admin(${1:msg[128]})" },
		{ "trigger": "ffac_msn_message2admin2\tffac_sys.inc - 70", "contents": "ffac_msn_message2admin2(${1:msg[128]}, ${2:ident[32]}, ${3:nickname[32]})" },
		{ "trigger": "ffac_register_gvar\tffac_sys.inc - 261", "contents": "ffac_register_gvar(${1:gvarname[]})" },
		{ "trigger": "ffac_register_plugin\tffac_sys.inc - 14", "contents": "ffac_register_plugin(${1:const plugin_name[]}, ${2:const version[]}, ${3:const author[]})" },
		{ "trigger": "ffac_remove_package\tffac_sys.inc - 231", "contents": "ffac_remove_package(${1:mapname[32]})" },
		{ "trigger": "ffac_set_gvar_int\tffac_sys.inc - 263", "contents": "ffac_set_gvar_int(${1:gvarid}, ${2:playerid}, ${3:gvarval})" },
		{ "trigger": "fflush\tfile.inc - 142", "contents": "fflush(${1:file})" },
		{ "trigger": "fgetc\tfile.inc - 95", "contents": "fgetc(${1:file})" },
		{ "trigger": "fgets\tfile.inc - 80", "contents": "fgets(${1:file}, ${2:buffer[]}, ${3:maxlength})" },
		{ "trigger": "file_exists\tfile.inc - 29", "contents": "file_exists(${1:const file[]})" },
		{ "trigger": "file_size\tfile.inc - 45", "contents": "file_size(${1:const file[]}, ${2:flag=0})" },
		{ "trigger": "filesize\tfile.inc - 100", "contents": "filesize(${1:const filename[]}, ${2:any:...})" },
		{ "trigger": "find_ent\tengine_stocks.inc - 46", "contents": "find_ent(${1:iStart}, ${2:const szClassname[]})" },
		{ "trigger": "find_ent_by_class\tengine.inc - 91", "contents": "find_ent_by_class(${1:iIndex}, ${2:const szClass[]})" },
		{ "trigger": "find_ent_by_model\tengine.inc - 97", "contents": "find_ent_by_model(${1:iIndex}, ${2:const szClass[]}, ${3:const szModel[]})" },
		{ "trigger": "find_ent_by_owner\tengine.inc - 94", "contents": "find_ent_by_owner(${1:iIndex}, ${2:const szClass[]}, ${3:iOwner}, ${4:iJghgType=0})" },
		{ "trigger": "find_ent_by_target\tengine.inc - 95", "contents": "find_ent_by_target(${1:iIndex}, ${2:const szClass[]})" },
		{ "trigger": "find_ent_by_tname\tengine.inc - 96", "contents": "find_ent_by_tname(${1:iIndex}, ${2:const szClass[]})" },
		{ "trigger": "find_ent_in_sphere\tengine.inc - 98", "contents": "find_ent_in_sphere(${1:start_from_ent}, ${2:const Float:origin[3]}, ${3:Float:radius})" },
		{ "trigger": "find_entity\txtrafun.inc - 88", "contents": "find_entity(${1:start_from_ent}, ${2:category}, ${3:value[]})" },
		{ "trigger": "find_entity_sphere\tVexdUM_stock.inc - 132", "contents": "find_entity_sphere(${1:ent}, ${2:Float:Orig[3]}, ${3:Float:Rad})" },
		{ "trigger": "find_player\tamxmodx.inc - 369", "contents": "find_player(${1:const flags[]}, ${2:...})" },
		{ "trigger": "find_plugin_byfile\tamxmodx.inc - 741", "contents": "find_plugin_byfile(${1:const filename[]}, ${2:ignoreCase=1})" },
		{ "trigger": "find_sphere_class\tengine.inc - 237", "contents": "find_sphere_class(${1:aroundent}, ${2:const _lookforclassname[]}, ${3:Float:radius}, ${4:entlist[]}, ${5:maxents}, ${6:const Float:origin[3] = {0.0}, ${7:0.0}, ${8:0.0}})" },
		{ "trigger": "float\tfloat.inc - 31", "contents": "float(${1:value})" },
		{ "trigger": "float_to_str\tstring.inc - 82", "contents": "float_to_str(${1:Float:fl}, ${2:string[]}, ${3:len})" },
		{ "trigger": "floatabs\tfloat.inc - 81", "contents": "floatabs(${1:Float:value})" },
		{ "trigger": "floatacos\tfloat.inc - 86", "contents": "floatacos(${1:Float:angle}, ${2:{anglemode}, ${3:_}:radix})" },
		{ "trigger": "floatadd\tfloat.inc - 43", "contents": "floatadd(${1:Float:dividend}, ${2:Float:divisor})" },
		{ "trigger": "floatasin\tfloat.inc - 87", "contents": "floatasin(${1:Float:angle}, ${2:{anglemode}, ${3:_}:radix})" },
		{ "trigger": "floatatan\tfloat.inc - 85", "contents": "floatatan(${1:Float:angle}, ${2:{anglemode}, ${3:_}:radix})" },
		{ "trigger": "floatatan2\tfloat.inc - 88", "contents": "floatatan2(${1:Float:x}, ${2:Float:y}, ${3:{anglemode}, ${4:_}:radix})" },
		{ "trigger": "floatclamp\tfloat.inc - 201", "contents": "floatclamp(${1:Float:Value}, ${2:Float:MinValue}, ${3:Float:MaxValue})" },
		{ "trigger": "floatcmp\tfloat.inc - 57", "contents": "floatcmp(${1:Float:fOne}, ${2:Float:fTwo})" },
		{ "trigger": "floatcos\tfloat.inc - 71", "contents": "floatcos(${1:Float:value}, ${2:anglemode:mode=radian})" },
		{ "trigger": "floatcosh\tfloat.inc - 77", "contents": "floatcosh(${1:Float:angle}, ${2:anglemode:mode=radian})" },
		{ "trigger": "floatdiv\tfloat.inc - 40", "contents": "floatdiv(${1:Float:dividend}, ${2:Float:divisor})" },
		{ "trigger": "floatfract\tfloat.inc - 49", "contents": "floatfract(${1:Float:value})" },
		{ "trigger": "floatlog\tfloat.inc - 66", "contents": "floatlog(${1:Float:value}, ${2:Float:base=10.0})" },
		{ "trigger": "floatmax\tfloat.inc - 192", "contents": "floatmax(${1:Float:ValueA}, ${2:Float:ValueB})" },
		{ "trigger": "floatmin\tfloat.inc - 182", "contents": "floatmin(${1:Float:ValueA}, ${2:Float:ValueB})" },
		{ "trigger": "floatmul\tfloat.inc - 37", "contents": "floatmul(${1:Float:oper1}, ${2:Float:oper2})" },
		{ "trigger": "floatpower\tfloat.inc - 63", "contents": "floatpower(${1:Float:value}, ${2:Float:exponent})" },
		{ "trigger": "floatround\tfloat.inc - 52", "contents": "floatround(${1:Float:value}, ${2:floatround_method:method=floatround_round})" },
		{ "trigger": "floatsin\tfloat.inc - 70", "contents": "floatsin(${1:Float:value}, ${2:anglemode:mode=radian})" },
		{ "trigger": "floatsinh\tfloat.inc - 76", "contents": "floatsinh(${1:Float:angle}, ${2:anglemode:mode=radian})" },
		{ "trigger": "floatsqroot\tfloat.inc - 60", "contents": "floatsqroot(${1:Float:value})" },
		{ "trigger": "floatstr\tfloat.inc - 34", "contents": "floatstr(${1:const string[]})" },
		{ "trigger": "floatsub\tfloat.inc - 46", "contents": "floatsub(${1:Float:oper1}, ${2:Float:oper2})" },
		{ "trigger": "floattan\tfloat.inc - 72", "contents": "floattan(${1:Float:value}, ${2:anglemode:mode=radian})" },
		{ "trigger": "floattanh\tfloat.inc - 78", "contents": "floattanh(${1:Float:angle}, ${2:anglemode:mode=radian})" },
		{ "trigger": "flog\tmaths.inc - 82", "contents": "flog(${1:Float:value}, ${2:Float:base=10.0})" },
		{ "trigger": "fm_DispatchSpawn\tfakemeta_util.inc - 142", "contents": "fm_DispatchSpawn(${1:entity})" },
		{ "trigger": "fm_ViewContents\tfakemeta_util.inc - 326", "contents": "fm_ViewContents(${1:id})" },
		{ "trigger": "fm_attach_view\tfakemeta_util.inc - 199", "contents": "fm_attach_view(${1:index}, ${2:entity})" },
		{ "trigger": "fm_boxents_distance\tfakemeta_util.inc - 610", "contents": "fm_boxents_distance(${1:boxent1}, ${2:boxent2})" },
		{ "trigger": "fm_boxes_distance\tfakemeta_util.inc - 587", "contents": "fm_boxes_distance(${1:const Float:mins1[3]}, ${2:const Float:maxs1[3]}, ${3:const Float:mins2[3]}, ${4:const Float:maxs2[3]})" },
		{ "trigger": "fm_call_think\tfakemeta_util.inc - 108", "contents": "fm_call_think(${1:entity})" },
		{ "trigger": "fm_create_entity\tfakemeta_util.inc - 65", "contents": "fm_create_entity(${1:const classname[]})" },
		{ "trigger": "fm_cs_remove_decals\tfakemeta_util.inc - 806", "contents": "fm_cs_remove_decals(${1:index = 0})" },
		{ "trigger": "fm_cs_user_spawn\tfakemeta_util.inc - 521", "contents": "fm_cs_user_spawn(${1:index})" },
		{ "trigger": "fm_distance_to_box\tfakemeta_util.inc - 575", "contents": "fm_distance_to_box(${1:const Float:point[3]}, ${2:const Float:mins[3]}, ${3:const Float:maxs[3]})" },
		{ "trigger": "fm_distance_to_boxent\tfakemeta_util.inc - 599", "contents": "fm_distance_to_boxent(${1:entity}, ${2:boxent})" },
		{ "trigger": "fm_distance_to_floor\tfakemeta_util.inc - 623", "contents": "fm_distance_to_floor(${1:index}, ${2:ignoremonsters = 1})" },
		{ "trigger": "fm_drop_to_floor\tfakemeta_util.inc - 40", "contents": "fm_drop_to_floor(${1:entity})" },
		{ "trigger": "fm_eng_get_string\tfakemeta_util.inc - 207", "contents": "fm_eng_get_string(${1:istring}, ${2:string[]}, ${3:len})" },
		{ "trigger": "fm_entity_count\tfakemeta_util.inc - 134", "contents": "fm_entity_count()" },
		{ "trigger": "fm_entity_range\tfakemeta_util.inc - 55", "contents": "fm_entity_range(${1:ent1}, ${2:ent2})" },
		{ "trigger": "fm_entity_set_model\tfakemeta_util.inc - 125", "contents": "fm_entity_set_model(${1:index}, ${2:const model[]})" },
		{ "trigger": "fm_entity_set_origin\tfakemeta_util.inc - 115", "contents": "fm_entity_set_origin(${1:index}, ${2:const Float:origin[3]})" },
		{ "trigger": "fm_entity_set_size\tfakemeta_util.inc - 48", "contents": "fm_entity_set_size(${1:index}, ${2:const Float:mins[3]}, ${3:const Float:maxs[3]})" },
		{ "trigger": "fm_fake_touch\tfakemeta_util.inc - 138", "contents": "fm_fake_touch(${1:toucher}, ${2:touched})" },
		{ "trigger": "fm_fakedamage\tfakemeta_util.inc - 255", "contents": "fm_fakedamage(${1:victim}, ${2:const classname[]}, ${3:Float:takedmgdamage}, ${4:damagetype})" },
		{ "trigger": "fm_find_ent\tfakemeta_util.inc - 279", "contents": "fm_find_ent(${1:index}, ${2:const classname[]})" },
		{ "trigger": "fm_find_ent_by_class\tfakemeta_util.inc - 69", "contents": "fm_find_ent_by_class(${1:index}, ${2:const classname[]})" },
		{ "trigger": "fm_find_ent_by_flags\tfakemeta_util.inc - 562", "contents": "fm_find_ent_by_flags(${1:index}, ${2:pev_field}, ${3:flags})" },
		{ "trigger": "fm_find_ent_by_integer\tfakemeta_util.inc - 549", "contents": "fm_find_ent_by_integer(${1:index}, ${2:pev_field}, ${3:value})" },
		{ "trigger": "fm_find_ent_by_model\tfakemeta_util.inc - 92", "contents": "fm_find_ent_by_model(${1:index}, ${2:const classname[]}, ${3:const model[]})" },
		{ "trigger": "fm_find_ent_by_owner\tfakemeta_util.inc - 72", "contents": "fm_find_ent_by_owner(${1:index}, ${2:const classname[]}, ${3:owner}, ${4:jghgtype = 0})" },
		{ "trigger": "fm_find_ent_by_target\tfakemeta_util.inc - 85", "contents": "fm_find_ent_by_target(${1:index}, ${2:const target[]})" },
		{ "trigger": "fm_find_ent_by_tname\tfakemeta_util.inc - 89", "contents": "fm_find_ent_by_tname(${1:index}, ${2:const targetname[]})" },
		{ "trigger": "fm_find_ent_in_sphere\tfakemeta_util.inc - 104", "contents": "fm_find_ent_in_sphere(${1:index}, ${2:const Float:origin[3]}, ${3:Float:radius})" },
		{ "trigger": "fm_force_use\tfakemeta_util.inc - 44", "contents": "fm_force_use(${1:user}, ${2:used})" },
		{ "trigger": "fm_get_aim_origin\tfakemeta_util.inc - 735", "contents": "fm_get_aim_origin(${1:index}, ${2:Float:origin[3]})" },
		{ "trigger": "fm_get_brush_entity_origin\tfakemeta_util.inc - 303", "contents": "fm_get_brush_entity_origin(${1:index}, ${2:Float:origin[3]})" },
		{ "trigger": "fm_get_client_listen\tfakemeta_util.inc - 389", "contents": "fm_get_client_listen(${1:receiver}, ${2:sender})" },
		{ "trigger": "fm_get_decal_index\tfakemeta_util.inc - 52", "contents": "fm_get_decal_index(${1:const decalname[]})" },
		{ "trigger": "fm_get_entity_distance\tfakemeta_util.inc - 295", "contents": "fm_get_entity_distance(${1:ent1}, ${2:ent2})" },
		{ "trigger": "fm_get_entity_flags\tfakemeta_util.inc - 291", "contents": "fm_get_entity_flags(${1:index})" },
		{ "trigger": "fm_get_entity_visibility\tfakemeta_util.inc - 372", "contents": "fm_get_entity_visibility(${1:index})" },
		{ "trigger": "fm_get_grenade\tfakemeta_util.inc - 299", "contents": "fm_get_grenade(${1:id})" },
		{ "trigger": "fm_get_grenade_id\tfakemeta_util.inc - 186", "contents": "fm_get_grenade_id(${1:id}, ${2:model[]}, ${3:len}, ${4:grenadeid = 0})" },
		{ "trigger": "fm_get_speed\tfakemeta_util.inc - 334", "contents": "fm_get_speed(${1:entity})" },
		{ "trigger": "fm_get_user_button\tfakemeta_util.inc - 283", "contents": "fm_get_user_button(${1:index})" },
		{ "trigger": "fm_get_user_godmode\tfakemeta_util.inc - 396", "contents": "fm_get_user_godmode(${1:index})" },
		{ "trigger": "fm_get_user_gravity\tfakemeta_util.inc - 476", "contents": "fm_get_user_gravity(${1:index})" },
		{ "trigger": "fm_get_user_longjump\tfakemeta_util.inc - 754", "contents": "fm_get_user_longjump(${1:index})" },
		{ "trigger": "fm_get_user_maxspeed\tfakemeta_util.inc - 463", "contents": "fm_get_user_maxspeed(${1:index})" },
		{ "trigger": "fm_get_user_noclip\tfakemeta_util.inc - 496", "contents": "fm_get_user_noclip(${1:index})" },
		{ "trigger": "fm_get_user_oldbutton\tfakemeta_util.inc - 287", "contents": "fm_get_user_oldbutton(${1:index})" },
		{ "trigger": "fm_get_user_suit\tfakemeta_util.inc - 786", "contents": "fm_get_user_suit(${1:index})" },
		{ "trigger": "fm_get_user_velocity\tfakemeta_util.inc - 382", "contents": "fm_get_user_velocity(${1:entity}, ${2:Float:vector[3]})" },
		{ "trigger": "fm_get_user_weapon_entity\tfakemeta_util.inc - 647", "contents": "fm_get_user_weapon_entity(${1:id}, ${2:wid = 0})" },
		{ "trigger": "fm_get_view_angle_diff\tfakemeta_util.inc - 845", "contents": "fm_get_view_angle_diff(${1:index}, ${2:const Float:point[3]})" },
		{ "trigger": "fm_get_weaponbox_type\tfakemeta_util.inc - 861", "contents": "fm_get_weaponbox_type(${1:entity})" },
		{ "trigger": "fm_give_item\tfakemeta_util.inc - 432", "contents": "fm_give_item(${1:index}, ${2:const item[]})" },
		{ "trigger": "fm_halflife_time\tfakemeta_util.inc - 195", "contents": "fm_halflife_time()" },
		{ "trigger": "fm_is_ent_classname\tfakemeta_util.inc - 819", "contents": "fm_is_ent_classname(${1:index}, ${2:const classname[]})" },
		{ "trigger": "fm_is_ent_visible\tfakemeta_util.inc - 717", "contents": "fm_is_ent_visible(${1:index}, ${2:entity}, ${3:ignoremonsters = 0})" },
		{ "trigger": "fm_is_in_viewcone\tfakemeta_util.inc - 214", "contents": "fm_is_in_viewcone(${1:index}, ${2:const Float:point[3]})" },
		{ "trigger": "fm_is_valid_ent\tfakemeta_util.inc - 112", "contents": "fm_is_valid_ent(${1:index})" },
		{ "trigger": "fm_is_visible\tfakemeta_util.inc - 236", "contents": "fm_is_visible(${1:index}, ${2:const Float:point[3]}, ${3:ignoremonsters = 0})" },
		{ "trigger": "fm_kill_entity\tfakemeta_util.inc - 640", "contents": "fm_kill_entity(${1:index})" },
		{ "trigger": "fm_playback_event\tfakemeta_util.inc - 202", "contents": "fm_playback_event(${1:flags}, ${2:invoker}, ${3:eventindex}, ${4:Float:delay}, ${5:const Float:origin[3]}, ${6:const Float:angles[3]}, ${7:Float:fparam1}, ${8:Float:fparam2}, ${9:iparam1}, ${10:iparam2}, ${11:bparam1}, ${12:bparam2})" },
		{ "trigger": "fm_point_contents\tfakemeta_util.inc - 147", "contents": "fm_point_contents(${1:const Float:point[3]})" },
		{ "trigger": "fm_precache_event\tfakemeta_util.inc - 35", "contents": "fm_precache_event(${1:type}, ${2:const name[]})" },
		{ "trigger": "fm_precache_generic\tfakemeta_util.inc - 31", "contents": "fm_precache_generic(${1:const file[]})" },
		{ "trigger": "fm_remove_entity\tfakemeta_util.inc - 130", "contents": "fm_remove_entity(${1:index})" },
		{ "trigger": "fm_remove_entity_name\tfakemeta_util.inc - 318", "contents": "fm_remove_entity_name(${1:const classname[]})" },
		{ "trigger": "fm_remove_weaponbox\tfakemeta_util.inc - 881", "contents": "fm_remove_weaponbox(${1:entity})" },
		{ "trigger": "fm_reset_user_model\tplayermodel.inc - 13", "contents": "fm_reset_user_model(${1:index})" },
		{ "trigger": "fm_set_client_listen\tfakemeta_util.inc - 393", "contents": "fm_set_client_listen(${1:receiver}, ${2:sender}, ${3:listen})" },
		{ "trigger": "fm_set_entity_flags\tfakemeta_util.inc - 355", "contents": "fm_set_entity_flags(${1:index}, ${2:flag}, ${3:onoff})" },
		{ "trigger": "fm_set_entity_visibility\tfakemeta_util.inc - 365", "contents": "fm_set_entity_visibility(${1:index}, ${2:visible = 1})" },
		{ "trigger": "fm_set_kvd\tfakemeta_util.inc - 533", "contents": "fm_set_kvd(${1:entity}, ${2:const key[]}, ${3:const value[]}, ${4:const classname[] = \"\"})" },
		{ "trigger": "fm_set_rendering\tfakemeta_util.inc - 341", "contents": "fm_set_rendering(${1:entity}, ${2:fx = kRenderFxNone}, ${3:r = 255}, ${4:g = 255}, ${5:b = 255}, ${6:render = kRenderNormal}, ${7:amount = 16})" },
		{ "trigger": "fm_set_user_armor\tfakemeta_util.inc - 409", "contents": "fm_set_user_armor(${1:index}, ${2:armor})" },
		{ "trigger": "fm_set_user_frags\tfakemeta_util.inc - 512", "contents": "fm_set_user_frags(${1:index}, ${2:frags})" },
		{ "trigger": "fm_set_user_godmode\tfakemeta_util.inc - 403", "contents": "fm_set_user_godmode(${1:index}, ${2:godmode = 0})" },
		{ "trigger": "fm_set_user_gravity\tfakemeta_util.inc - 470", "contents": "fm_set_user_gravity(${1:index}, ${2:Float:gravity = 1.0})" },
		{ "trigger": "fm_set_user_health\tfakemeta_util.inc - 415", "contents": "fm_set_user_health(${1:index}, ${2:health})" },
		{ "trigger": "fm_set_user_longjump\tfakemeta_util.inc - 764", "contents": "fm_set_user_longjump(${1:index}, ${2:bool:longjump = true}, ${3:bool:tempicon = true})" },
		{ "trigger": "fm_set_user_maxspeed\tfakemeta_util.inc - 456", "contents": "fm_set_user_maxspeed(${1:index}, ${2:Float:speed = -1.0})" },
		{ "trigger": "fm_set_user_model\tplayermodel.inc - 12", "contents": "fm_set_user_model(${1:index}, ${2:model[]})" },
		{ "trigger": "fm_set_user_noclip\tfakemeta_util.inc - 489", "contents": "fm_set_user_noclip(${1:index}, ${2:noclip = 0})" },
		{ "trigger": "fm_set_user_origin\tfakemeta_util.inc - 421", "contents": "fm_set_user_origin(${1:index}, ${2:/* const */ origin[3]})" },
		{ "trigger": "fm_set_user_rendering\tfakemeta_util.inc - 428", "contents": "fm_set_user_rendering(${1:index}, ${2:fx = kRenderFxNone}, ${3:r = 255}, ${4:g = 255}, ${5:b = 255}, ${6:render = kRenderNormal}, ${7:amount = 16})" },
		{ "trigger": "fm_set_user_suit\tfakemeta_util.inc - 790", "contents": "fm_set_user_suit(${1:index}, ${2:bool:suit = true}, ${3:bool:sound = true})" },
		{ "trigger": "fm_set_user_velocity\tfakemeta_util.inc - 375", "contents": "fm_set_user_velocity(${1:entity}, ${2:const Float:vector[3]})" },
		{ "trigger": "fm_spawn\tfakemeta_util.inc - 484", "contents": "fm_spawn(${1:entity})" },
		{ "trigger": "fm_strip_user_gun\tfakemeta_util.inc - 659", "contents": "fm_strip_user_gun(${1:index}, ${2:wid = 0}, ${3:const wname[] = \"\"})" },
		{ "trigger": "fm_strip_user_weapons\tfakemeta_util.inc - 500", "contents": "fm_strip_user_weapons(${1:index})" },
		{ "trigger": "fm_trace_hull\tfakemeta_util.inc - 159", "contents": "fm_trace_hull(${1:const Float:origin[3]}, ${2:hull}, ${3:ignoredent = 0}, ${4:ignoremonsters = 0})" },
		{ "trigger": "fm_trace_line\tfakemeta_util.inc - 150", "contents": "fm_trace_line(${1:ignoreent}, ${2:const Float:start[3]}, ${3:const Float:end[3]}, ${4:Float:ret[3]})" },
		{ "trigger": "fm_trace_normal\tfakemeta_util.inc - 173", "contents": "fm_trace_normal(${1:ignoreent}, ${2:const Float:start[3]}, ${3:const Float:end[3]}, ${4:Float:ret[3]})" },
		{ "trigger": "fm_transfer_user_gun\tfakemeta_util.inc - 687", "contents": "fm_transfer_user_gun(${1:index1}, ${2:index2}, ${3:wid = 0}, ${4:const wname[] = \"\"})" },
		{ "trigger": "fm_user_kill\tfakemeta_util.inc - 832", "contents": "fm_user_kill(${1:index}, ${2:flag = 0})" },
		{ "trigger": "fopen\tfile.inc - 52", "contents": "fopen(${1:const filename[]}, ${2:const mode[]})" },
		{ "trigger": "force_unmodified\tamxmodx.inc - 715", "contents": "force_unmodified(${1:force_type}, ${2:const mins[3]}, ${3:const maxs[3]}, ${4:const filename[]})" },
		{ "trigger": "force_use\tengine.inc - 55", "contents": "force_use(${1:entUsed}, ${2:entUser})" },
		{ "trigger": "format\tstring.inc - 39", "contents": "format(${1:output[]}, ${2:len}, ${3:const format[]}, ${4:any:...})" },
		{ "trigger": "format_args\tstring.inc - 73", "contents": "format_args(${1:output[]}, ${2:len}, ${3:pos = 0})" },
		{ "trigger": "format_time\tamxmodx.inc - 438", "contents": "format_time(${1:output[]}, ${2:len}, ${3:const format[]}, ${4:time = -1})" },
		{ "trigger": "formatex\tstring.inc - 50", "contents": "formatex(${1:output[]}, ${2:len}, ${3:const format[]}, ${4:any:...})" },
		{ "trigger": "forward_return\tfakemeta.inc - 140", "contents": "forward_return(${1:type}, ${2:any:...})" },
		{ "trigger": "fpower\tmaths.inc - 77", "contents": "fpower(${1:Float:value}, ${2:Float:exponent})" },
		{ "trigger": "fprintf\tfile.inc - 86", "contents": "fprintf(${1:file}, ${2:const fmt[]}, ${3:any:...})" },
		{ "trigger": "fputc\tfile.inc - 96", "contents": "fputc(${1:file}, ${2:data})" },
		{ "trigger": "fputs\tfile.inc - 83", "contents": "fputs(${1:file}, ${2:const text[]})" },
		{ "trigger": "fread\tfile.inc - 69", "contents": "fread(${1:file}, ${2:&data}, ${3:mode})" },
		{ "trigger": "fread_blocks\tfile.inc - 70", "contents": "fread_blocks(${1:file}, ${2:data[]}, ${3:blocks}, ${4:mode})" },
		{ "trigger": "fread_raw\tfile.inc - 71", "contents": "fread_raw(${1:file}, ${2:stream[]}, ${3:blocksize}, ${4:blocks})" },
		{ "trigger": "free_ptr_to_str\ttext.inc - 21", "contents": "free_ptr_to_str(${1:1%})" },
		{ "trigger": "free_tr2\tfakemeta.inc - 184", "contents": "free_tr2(${1:tr_handle})" },
		{ "trigger": "fseek\tfile.inc - 89", "contents": "fseek(${1:file}, ${2:position}, ${3:start})" },
		{ "trigger": "fsqroot\tmaths.inc - 72", "contents": "fsqroot(${1:Float:value})" },
		{ "trigger": "ftell\tfile.inc - 92", "contents": "ftell(${1:file})" },
		{ "trigger": "funcidx\tcore.inc - 15", "contents": "funcidx(${1:const name[]})" },
		{ "trigger": "fungetc\tfile.inc - 97", "contents": "fungetc(${1:file}, ${2:data})" },
		{ "trigger": "fvault_clear\tfvault.inc - 360", "contents": "fvault_clear(${1:const vaultname[]})" },
		{ "trigger": "fvault_get_data\tfvault.inc - 104", "contents": "fvault_get_data(${1:const vaultname[]}, ${2:const key[]}, ${3:data[]}, ${4:len})" },
		{ "trigger": "fvault_get_keyname\tfvault.inc - 27", "contents": "fvault_get_keyname(${1:const vaultname[]}, ${2:const keynum}, ${3:key[]}, ${4:len})" },
		{ "trigger": "fvault_get_keynum\tfvault.inc - 64", "contents": "fvault_get_keynum(${1:const vaultname[]}, ${2:const key[]})" },
		{ "trigger": "fvault_get_vaultname\tfvault.inc - 210", "contents": "fvault_get_vaultname(${1:const vaultnum}, ${2:vaultname[]}, ${3:len})" },
		{ "trigger": "fvault_get_vaultnum\tfvault.inc - 249", "contents": "fvault_get_vaultnum(${1:const vaultname[]})" },
		{ "trigger": "fvault_remove_key\tfvault.inc - 320", "contents": "fvault_remove_key(${1:const vaultname[]}, ${2:const key[]})" },
		{ "trigger": "fvault_set_data\tfvault.inc - 141", "contents": "fvault_set_data(${1:const vaultname[]}, ${2:const key[]}, ${3:const data[]})" },
		{ "trigger": "fvault_size\tfvault.inc - 194", "contents": "fvault_size(${1:const vaultname[]})" },
		{ "trigger": "fvault_total\tfvault.inc - 287", "contents": "fvault_total()" },
		{ "trigger": "fwStopAnimation\tdHUD.inc - 163", "contents": "fwStopAnimation(${1:id}, ${2:dhud}, ${3:bool:finished})" },
		{ "trigger": "fw_FRC_counter_reset\tfrc.inc - 174", "contents": "fw_FRC_counter_reset(${1:player})" },
		{ "trigger": "fw_FRC_extention_init\tfrc.inc - 202", "contents": "fw_FRC_extention_init()" },
		{ "trigger": "fw_FRC_flash_find_in_sphere\tfrc.inc - 192", "contents": "fw_FRC_flash_find_in_sphere(${1:player}, ${2:flash_entity})" },
		{ "trigger": "fw_FRC_flashbang_explosion\tfrc.inc - 96", "contents": "fw_FRC_flashbang_explosion(${1:flashbang_entity}, ${2:owner})" },
		{ "trigger": "fw_FRC_free_plugin_data\tfrc.inc - 107", "contents": "fw_FRC_free_plugin_data()" },
		{ "trigger": "fw_FRC_postflash\tfrc.inc - 79", "contents": "fw_FRC_postflash(${1:flasher}, ${2:flashed}, ${3:flashbang}, ${4:amount})" },
		{ "trigger": "fw_FRC_preflash\tfrc.inc - 61", "contents": "fw_FRC_preflash(${1:flasher}, ${2:flashed}, ${3:flashbang}, ${4:amount})" },
		{ "trigger": "fw_FRC_punish\tfrc.inc - 124", "contents": "fw_FRC_punish(${1:flasher}, ${2:punish_type})" },
		{ "trigger": "fw_FRC_trace\tfrc.inc - 143", "contents": "fw_FRC_trace(${1:Float:start[3]}, ${2:Float:end[3]}, ${3:conditions}, ${4:ignore_ent}, ${5:trace_handle})" },
		{ "trigger": "fw_FRC_trace_bug\tfrc.inc - 162", "contents": "fw_FRC_trace_bug(${1:Float:start[3]}, ${2:Float:end[3]}, ${3:conditions}, ${4:ignore_ent}, ${5:trace_handle})" },
		{ "trigger": "fwrite\tfile.inc - 72", "contents": "fwrite(${1:file}, ${2:data}, ${3:mode})" },
		{ "trigger": "fwrite_blocks\tfile.inc - 73", "contents": "fwrite_blocks(${1:file}, ${2:const data[]}, ${3:blocks}, ${4:mode})" },
		{ "trigger": "fwrite_raw\tfile.inc - 74", "contents": "fwrite_raw(${1:file}, ${2:const stream[]}, ${3:blocksize}, ${4:mode})" },
		{ "trigger": "g\tddimension.inc - 53", "contents": "g(${1:1%})" },
		{ "trigger": "geoip_city\tgeoip.inc - 86", "contents": "geoip_city(${1:const ip[]}, ${2:result[]}, ${3:len})" },
		{ "trigger": "geoip_code2\tgeoip.inc - 54", "contents": "geoip_code2(${1:const ip[]}, ${2:ccode[3]})" },
		{ "trigger": "geoip_code2_ex\tgeoip.inc - 32", "contents": "geoip_code2_ex(${1:const ip[]}, ${2:result[3]})" },
		{ "trigger": "geoip_code3\tgeoip.inc - 66", "contents": "geoip_code3(${1:const ip[]}, ${2:result[4]})" },
		{ "trigger": "geoip_code3_ex\tgeoip.inc - 42", "contents": "geoip_code3_ex(${1:const ip[]}, ${2:result[4]})" },
		{ "trigger": "geoip_continent_code\tgeoip.inc - 158", "contents": "geoip_continent_code(${1:const ip[]}, ${2:result[3] = \"\"})" },
		{ "trigger": "geoip_country\tgeoip.inc - 76", "contents": "geoip_country(${1:const ip[]}, ${2:result[]}, ${3:len})" },
		{ "trigger": "geoip_distance\tgeoip.inc - 170", "contents": "geoip_distance(${1:Float:lat1}, ${2:Float:lon1}, ${3:Float:lat2}, ${4:Float:lon2}, ${5:system = 0})" },
		{ "trigger": "geoip_latitude\tgeoip.inc - 94", "contents": "geoip_latitude(${1:const ip[]})" },
		{ "trigger": "geoip_longitude\tgeoip.inc - 102", "contents": "geoip_longitude(${1:const ip[]})" },
		{ "trigger": "geoip_region\tgeoip.inc - 114", "contents": "geoip_region(${1:const ip[]}, ${2:result[4]})" },
		{ "trigger": "geoip_region_name\tgeoip.inc - 124", "contents": "geoip_region_name(${1:const ip[]}, ${2:result[]}, ${3:len})" },
		{ "trigger": "geoip_timezone\tgeoip.inc - 134", "contents": "geoip_timezone(${1:const ip[]}, ${2:result[]}, ${3:len})" },
		{ "trigger": "getWepId\tcsdm.inc - 281", "contents": "getWepId(${1:1%})" },
		{ "trigger": "get_FRC_counter\tfrc.inc - 208", "contents": "get_FRC_counter(${1:id})" },
		{ "trigger": "get_FRC_duration\tfrc.inc - 220", "contents": "get_FRC_duration(${1:flashed})" },
		{ "trigger": "get_FRC_exploding_flash\tfrc.inc - 251", "contents": "get_FRC_exploding_flash()" },
		{ "trigger": "get_FRC_exploding_owner\tfrc.inc - 256", "contents": "get_FRC_exploding_owner()" },
		{ "trigger": "get_FRC_flash_limit\tfrc.inc - 246", "contents": "get_FRC_flash_limit()" },
		{ "trigger": "get_FRC_holdtime\tfrc.inc - 234", "contents": "get_FRC_holdtime(${1:flashed})" },
		{ "trigger": "get_addr_val\tamxmodx.inc - 979", "contents": "get_addr_val(${1:addr})" },
		{ "trigger": "get_amxx_verstring\tamxmodx.inc - 209", "contents": "get_amxx_verstring(${1:buffer[]}, ${2:length})" },
		{ "trigger": "get_array\tamxmodx.inc - 800", "contents": "get_array(${1:param}, ${2:dest[]}, ${3:size})" },
		{ "trigger": "get_array_f\tamxmodx.inc - 801", "contents": "get_array_f(${1:param}, ${2:Float:dest[]}, ${3:size})" },
		{ "trigger": "get_basedir\tamxmisc.inc - 509", "contents": "get_basedir(${1:name[]}, ${2:len})" },
		{ "trigger": "get_big_bit\tbits.inc - 64", "contents": "get_big_bit(${1:%1}, ${2:%2})" },
		{ "trigger": "get_bit\tbits.inc - 31", "contents": "get_bit(${1:%1}, ${2:%2})" },
		{ "trigger": "get_bits\tbits.inc - 52", "contents": "get_bits(${1:%1}, ${2:%2})" },
		{ "trigger": "get_bot_data\tbot_api.inc - 63", "contents": "get_bot_data(${1:id}, ${2:bot_data:member}, ${3:{Float}, ${4:_}:...})" },
		{ "trigger": "get_brush_entity_origin\tengine_stocks.inc - 90", "contents": "get_brush_entity_origin(${1:ent}, ${2:Float:orig[3]})" },
		{ "trigger": "get_build\tns2amx.inc - 21", "contents": "get_build(${1:classname[]}, ${2:value}, ${3:number=0}, ${4:any:...})" },
		{ "trigger": "get_cd\tfakemeta.inc - 199", "contents": "get_cd(${1:cd_handle}, ${2:ClientData:member}, ${3:{Float}, ${4:_}:...})" },
		{ "trigger": "get_class\tns2amx.inc - 259", "contents": "get_class(${1:id})" },
		{ "trigger": "get_clcmd\tamxmodx.inc - 500", "contents": "get_clcmd(${1:index}, ${2:command[]}, ${3:len1}, ${4:&flags}, ${5:info[]}, ${6:len2}, ${7:flag})" },
		{ "trigger": "get_clcmdsnum\tamxmodx.inc - 503", "contents": "get_clcmdsnum(${1:flag})" },
		{ "trigger": "get_client_listen\tfun.inc - 23", "contents": "get_client_listen(${1:receiver}, ${2:sender})" },
		{ "trigger": "get_client_listening\tfun_stocks.inc - 20", "contents": "get_client_listening(${1:%1}, ${2:%2})" },
		{ "trigger": "get_cmdaccess\tamxmod.inc - 164", "contents": "get_cmdaccess(${1:cmd[]}, ${2:accessflags[]}, ${3:len})" },
		{ "trigger": "get_concmd\tamxmodx.inc - 514", "contents": "get_concmd(${1:index}, ${2:cmd[]}, ${3:len1}, ${4:&flags}, ${5:info[]}, ${6:len2}, ${7:flag}, ${8:id = -1})" },
		{ "trigger": "get_concmd_plid\tamxmodx.inc - 517", "contents": "get_concmd_plid(${1:cid}, ${2:flag_mask}, ${3:id_type})" },
		{ "trigger": "get_concmdsnum\tamxmodx.inc - 520", "contents": "get_concmdsnum(${1:flag}, ${2:id = -1})" },
		{ "trigger": "get_configsdir\tamxmisc.inc - 514", "contents": "get_configsdir(${1:name[]}, ${2:len})" },
		{ "trigger": "get_current_log\tlogging.inc - 62", "contents": "get_current_log(${1:pluginAbbr[]}, ${2:currentFile[]}, ${3:currentFileSize})" },
		{ "trigger": "get_customdir\tamxmisc.inc - 531", "contents": "get_customdir(${1:name[]}, ${2:len})" },
		{ "trigger": "get_cvar_access\tcvaraccess.inc - 17", "contents": "get_cvar_access(${1:pointer})" },
		{ "trigger": "get_cvar_flags\tamxmodx.inc - 401", "contents": "get_cvar_flags(${1:const cvar[]})" },
		{ "trigger": "get_cvar_float\tamxmodx.inc - 407", "contents": "get_cvar_float(${1:const cvarname[]})" },
		{ "trigger": "get_cvar_num\tamxmodx.inc - 410", "contents": "get_cvar_num(${1:const cvarname[]})" },
		{ "trigger": "get_cvar_pointer\tamxmodx.inc - 1034", "contents": "get_cvar_pointer(${1:const cvar[]})" },
		{ "trigger": "get_cvar_string\tamxmodx.inc - 416", "contents": "get_cvar_string(${1:const cvarname[]}, ${2:output[]}, ${3:iLen})" },
		{ "trigger": "get_datadir\tamxmisc.inc - 519", "contents": "get_datadir(${1:name[]}, ${2:len})" },
		{ "trigger": "get_decal_index\tengine.inc - 68", "contents": "get_decal_index(${1:const szDecalName[]})" },
		{ "trigger": "get_default_cvar_access\tcvaraccess.inc - 40", "contents": "get_default_cvar_access()" },
		{ "trigger": "get_distance\tvector.inc - 19", "contents": "get_distance(${1:const origin1[3]}, ${2:const origin2[3]})" },
		{ "trigger": "get_distance_f\tvector.inc - 22", "contents": "get_distance_f(${1:const Float:Origin1[3]}, ${2:const Float:Origin2[3]})" },
		{ "trigger": "get_entity_distance\tengine_stocks.inc - 69", "contents": "get_entity_distance(${1:ent1}, ${2:ent2})" },
		{ "trigger": "get_entity_flags\tengine_stocks.inc - 63", "contents": "get_entity_flags(${1:ent})" },
		{ "trigger": "get_entity_origin\txtrafun.inc - 31", "contents": "get_entity_origin(${1:index}, ${2:origin[3]})" },
		{ "trigger": "get_entity_velocity\txtrafun.inc - 17", "contents": "get_entity_velocity(${1:index}, ${2:velocity[3]})" },
		{ "trigger": "get_entity_visibility\tengine_stocks.inc - 193", "contents": "get_entity_visibility(${1:entity})" },
		{ "trigger": "get_es\tfakemeta.inc - 206", "contents": "get_es(${1:es_handle}, ${2:EntityState:member}, ${3:{Float}, ${4:_}:...})" },
		{ "trigger": "get_filename\tns2amx.inc - 159", "contents": "get_filename(${1:szFile[]}, ${2:len=-1})" },
		{ "trigger": "get_flags\tamxmodx.inc - 353", "contents": "get_flags(${1:flags}, ${2:output[]}, ${3:len})" },
		{ "trigger": "get_float_byref\tamxmodx.inc - 794", "contents": "get_float_byref(${1:param})" },
		{ "trigger": "get_func_id\tamxmodx.inc - 686", "contents": "get_func_id(${1:const funcName[]}, ${2:pluginId = -1})" },
		{ "trigger": "get_gametime\tamxmodx.inc - 425", "contents": "get_gametime()" },
		{ "trigger": "get_global_edict\tengine.inc - 62", "contents": "get_global_edict(${1:variable})" },
		{ "trigger": "get_global_float\tengine.inc - 58", "contents": "get_global_float(${1:variable})" },
		{ "trigger": "get_global_int\tengine.inc - 59", "contents": "get_global_int(${1:variable})" },
		{ "trigger": "get_global_string\tengine.inc - 60", "contents": "get_global_string(${1:variable}, ${2:string[]}, ${3:maxlen})" },
		{ "trigger": "get_global_vector\tengine.inc - 61", "contents": "get_global_vector(${1:variable}, ${2:Float:vector[3]})" },
		{ "trigger": "get_grenade\tengine_stocks.inc - 75", "contents": "get_grenade(${1:id})" },
		{ "trigger": "get_grenade_id\tengine.inc - 167", "contents": "get_grenade_id(${1:id}, ${2:model[]}, ${3:len}, ${4:grenadeid = 0})" },
		{ "trigger": "get_grenade_index\txtrafun.inc - 53", "contents": "get_grenade_index(${1:index}, ${2:model[]}, ${3:len}, ${4:grenadeindex = 0})" },
		{ "trigger": "get_gunshop_array\txen_gunshop.inc - 11", "contents": "get_gunshop_array(${1:&quot;})" },
		{ "trigger": "get_hudmessage_locs\tchr_engine.inc - 382", "contents": "get_hudmessage_locs(${1:ent}, ${2:const Float:origin[3]}, ${3:Float:hudpos[2]})" },
		{ "trigger": "get_id_on_this_team\tmenu.inc - 51", "contents": "get_id_on_this_team(${1:team})" },
		{ "trigger": "get_info_keybuffer\tengine.inc - 52", "contents": "get_info_keybuffer(${1:id}, ${2:buffer[]}, ${3:length})" },
		{ "trigger": "get_keyvalue\tengine.inc - 138", "contents": "get_keyvalue(${1:entity}, ${2:const szKey[]}, ${3:value[]}, ${4:maxLength})" },
		{ "trigger": "get_kvd\tfakemeta.inc - 188", "contents": "get_kvd(${1:kvd_handle}, ${2:KeyValueData:member}, ${3:{Float}, ${4:_}:...})" },
		{ "trigger": "get_lang\tlang.inc - 18", "contents": "get_lang(${1:id}, ${2:name[3]})" },
		{ "trigger": "get_langsnum\tlang.inc - 14", "contents": "get_langsnum()" },
		{ "trigger": "get_localinfo\tamxmodx.inc - 95", "contents": "get_localinfo(${1:const info[]}, ${2:output[]}, ${3:len})" },
		{ "trigger": "get_logfile\tamxmod.inc - 40", "contents": "get_logfile(${1:name[]}, ${2:len})" },
		{ "trigger": "get_mapname\tamxmodx.inc - 419", "contents": "get_mapname(${1:name[]}, ${2:len})" },
		{ "trigger": "get_mask\tns2amx.inc - 243", "contents": "get_mask(${1:id}, ${2:mask})" },
		{ "trigger": "get_maxentities\tVexdUM_stock.inc - 37", "contents": "get_maxentities()" },
		{ "trigger": "get_maxplayers\tamxmodx.inc - 428", "contents": "get_maxplayers()" },
		{ "trigger": "get_maxspeed\tns2amx.inc - 172", "contents": "get_maxspeed(${1:id})" },
		{ "trigger": "get_modname\tamxmodx.inc - 431", "contents": "get_modname(${1:name[]}, ${2:len})" },
		{ "trigger": "get_module\tamxmodx.inc - 606", "contents": "get_module(${1:id}, ${2:name[]}, ${3:nameLen}, ${4:author[]}, ${5:authorLen}, ${6:version[]}, ${7:versionLen}, ${8:&status})" },
		{ "trigger": "get_modulesnum\tamxmodx.inc - 609", "contents": "get_modulesnum()" },
		{ "trigger": "get_msg_arg_float\tmessages.inc - 84", "contents": "get_msg_arg_float(${1:argn})" },
		{ "trigger": "get_msg_arg_int\tmessages.inc - 83", "contents": "get_msg_arg_int(${1:argn})" },
		{ "trigger": "get_msg_arg_string\tmessages.inc - 85", "contents": "get_msg_arg_string(${1:argn}, ${2:szReturn[]}, ${3:iLength})" },
		{ "trigger": "get_msg_args\tmessages.inc - 77", "contents": "get_msg_args()" },
		{ "trigger": "get_msg_argtype\tmessages.inc - 80", "contents": "get_msg_argtype(${1:argn})" },
		{ "trigger": "get_msg_block\tmessages.inc - 51", "contents": "get_msg_block(${1:iMessage})" },
		{ "trigger": "get_msg_origin\tmessages.inc - 93", "contents": "get_msg_origin(${1:const Float:_Origin[3]})" },
		{ "trigger": "get_num_ents\tVexdUM.inc - 28", "contents": "get_num_ents()" },
		{ "trigger": "get_offset_int\tVexdUM_stock.inc - 22", "contents": "get_offset_int(${1:ent}, ${2:offset}, ${3:linos = 5})" },
		{ "trigger": "get_offset_origin\tchr_engine.inc - 90", "contents": "get_offset_origin(${1:ent}, ${2:const Float:offset[3]}, ${3:Float:origin[3]})" },
		{ "trigger": "get_offset_origin_body\tchr_engine.inc - 143", "contents": "get_offset_origin_body(${1:ent}, ${2:const Float:offset[3]}, ${3:Float:origin[3]})" },
		{ "trigger": "get_orig_retval\tfakemeta.inc - 149", "contents": "get_orig_retval(${1:{Float}, ${2:_}:...})" },
		{ "trigger": "get_param\tamxmodx.inc - 789", "contents": "get_param(${1:param})" },
		{ "trigger": "get_param_byref\tamxmodx.inc - 793", "contents": "get_param_byref(${1:param})" },
		{ "trigger": "get_param_f\tamxmodx.inc - 790", "contents": "get_param_f(${1:param})" },
		{ "trigger": "get_pcvar_flags\tamxmodx.inc - 1036", "contents": "get_pcvar_flags(${1:pcvar})" },
		{ "trigger": "get_pcvar_float\tamxmodx.inc - 1040", "contents": "get_pcvar_float(${1:pcvar})" },
		{ "trigger": "get_pcvar_num\tamxmodx.inc - 1038", "contents": "get_pcvar_num(${1:pcvar})" },
		{ "trigger": "get_pcvar_string\tamxmodx.inc - 1042", "contents": "get_pcvar_string(${1:pcvar}, ${2:string[]}, ${3:maxlen})" },
		{ "trigger": "get_pdata_cbase\thamsandwich.inc - 320", "contents": "get_pdata_cbase(${1:id}, ${2:offset}, ${3:linuxdiff=5})" },
		{ "trigger": "get_pdata_cbase_safe\thamsandwich.inc - 347", "contents": "get_pdata_cbase_safe(${1:id}, ${2:offset}, ${3:linuxdiff=5})" },
		{ "trigger": "get_pdata_ent\tfakemeta.inc - 126", "contents": "get_pdata_ent(${1:_index}, ${2:_offset}, ${3:_linuxdiff=20})" },
		{ "trigger": "get_pdata_float\tfakemeta.inc - 108", "contents": "get_pdata_float(${1:_index}, ${2:_Offset}, ${3:_linuxdiff=5})" },
		{ "trigger": "get_pdata_int\tfakemeta.inc - 102", "contents": "get_pdata_int(${1:_index}, ${2:_Offset}, ${3:_linuxdiff=5})" },
		{ "trigger": "get_pdata_int_ex\tts_stocks.inc - 115", "contents": "get_pdata_int_ex(${1:id}, ${2:offset})" },
		{ "trigger": "get_pdata_string\tfakemeta.inc - 221", "contents": "get_pdata_string(${1:entity}, ${2:offset}, ${3:dest[]}, ${4:maxlength}, ${5:byref=1}, ${6:linux})" },
		{ "trigger": "get_players\tamxmodx.inc - 336", "contents": "get_players(${1:players[32]}, ${2:&num}, ${3:const flags[]=\"\"}, ${4:const team[]=\"\"})" },
		{ "trigger": "get_players_distance\tchr_engine.inc - 214", "contents": "get_players_distance(${1:const Float:origin2[3]}, ${2:players[32]}, ${3:&num}, ${4:const flags[]=\"\"}, ${5:index=0}, ${6:const team[]=\"\"})" },
		{ "trigger": "get_playersnum\tamxmodx.inc - 323", "contents": "get_playersnum(${1:flag=0})" },
		{ "trigger": "get_plugin\tamxmodx.inc - 634", "contents": "get_plugin(${1:index}, ${2:filename[]=}, ${3:len1=0}, ${4:name[]=}, ${5:len2=0}, ${6:version[]=}, ${7:len3=0}, ${8:author[]=}, ${9:len4=0}, ${10:status[]=}, ${11:len5=0}, ${12:...})" },
		{ "trigger": "get_plugincmd\tamxmod.inc - 217", "contents": "get_plugincmd(${1:plugin[]}, ${2:index}, ${3:cmd[]}, ${4:len1}, ${5:accessflags[]}, ${6:len2}, ${7:info[]}, ${8:len3}, ${9:destid=-1}, ${10:type=7})" },
		{ "trigger": "get_plugincmdsnum\tamxmod.inc - 188", "contents": "get_plugincmdsnum(${1:plugin[]}, ${2:type=7})" },
		{ "trigger": "get_plugincvar\tamxmod.inc - 255", "contents": "get_plugincvar(${1:plugin[]}, ${2:index}, ${3:cvar[]}, ${4:len1}, ${5:value[]}, ${6:len2}, ${7:flags=0})" },
		{ "trigger": "get_plugincvarsnum\tamxmod.inc - 280", "contents": "get_plugincvarsnum(${1:plugin[]}, ${2:flags=0})" },
		{ "trigger": "get_plugins_cvar\tamxmodx.inc - 526", "contents": "get_plugins_cvar(${1:num}, ${2:name[]}, ${3:namelen}, ${4:&flags=0}, ${5:&plugin_id=0}, ${6:&pcvar_handle=0})" },
		{ "trigger": "get_plugins_cvarsnum\tamxmodx.inc - 523", "contents": "get_plugins_cvarsnum()" },
		{ "trigger": "get_pluginsnum\tamxmodx.inc - 637", "contents": "get_pluginsnum()" },
		{ "trigger": "get_private_f\tns2amx.inc - 32", "contents": "get_private_f(${1:index}, ${2:offset}, ${3:linuxdiff=5})" },
		{ "trigger": "get_private_i\tns2amx.inc - 24", "contents": "get_private_i(${1:index}, ${2:offset}, ${3:linuxdiff=5})" },
		{ "trigger": "get_ptr_to_str\ttext.inc - 19", "contents": "get_ptr_to_str(${1:1%})" },
		{ "trigger": "get_range\tns2amx.inc - 55", "contents": "get_range(${1:ida}, ${2:idb})" },
		{ "trigger": "get_remaining_seconds\tsecondsleft.inc - 8", "contents": "get_remaining_seconds()" },
		{ "trigger": "get_res\tns2amx.inc - 256", "contents": "get_res(${1:id})" },
		{ "trigger": "get_spawn\tns2amx.inc - 76", "contents": "get_spawn(${1:type}, ${2:number=0}, ${3:Float:ret[3]})" },
		{ "trigger": "get_speak\tengine.inc - 46", "contents": "get_speak(${1:iIndex})" },
		{ "trigger": "get_special\tns2amx.inc - 249", "contents": "get_special(${1:id}, ${2:mask})" },
		{ "trigger": "get_speed\tengine_stocks.inc - 130", "contents": "get_speed(${1:ent})" },
		{ "trigger": "get_speed_vector\tchr_engine.inc - 30", "contents": "get_speed_vector(${1:const Float:origin1[3]}, ${2:const Float:origin2[3]}, ${3:Float:speed}, ${4:Float:new_velocity[3]})" },
		{ "trigger": "get_speed_vector2\tchr_engine.inc - 54", "contents": "get_speed_vector2(${1:ent1}, ${2:ent2}, ${3:Float:speed}, ${4:Float:new_velocity[3]})" },
		{ "trigger": "get_speedchange\tns2amx.inc - 166", "contents": "get_speedchange(${1:id})" },
		{ "trigger": "get_srvcmd\tamxmodx.inc - 506", "contents": "get_srvcmd(${1:index}, ${2:server_cmd[]}, ${3:len1}, ${4:&flags}, ${5:info[]}, ${6:len2}, ${7:flag})" },
		{ "trigger": "get_srvcmdsnum\tamxmodx.inc - 509", "contents": "get_srvcmdsnum(${1:flag})" },
		{ "trigger": "get_stats\tcsstats.inc - 48", "contents": "get_stats(${1:index}, ${2:stats[8]}, ${3:bodyhits[8]}, ${4:name[]}, ${5:len}, ${6:authid[] = \"\"}, ${7:authidlen = 0})" },
		{ "trigger": "get_stats2\tcsstats.inc - 61", "contents": "get_stats2(${1:index}, ${2:stats[4]}, ${3:authid[] = \"\"}, ${4:authidlen = 0})" },
		{ "trigger": "get_statsnum\tcsstats.inc - 51", "contents": "get_statsnum()" },
		{ "trigger": "get_str_from_ptr\ttext.inc - 20", "contents": "get_str_from_ptr(${1:%1}, ${2:%2}, ${3:%3})" },
		{ "trigger": "get_string\tamxmodx.inc - 783", "contents": "get_string(${1:param}, ${2:dest[]}, ${3:maxlen})" },
		{ "trigger": "get_systime\tamxmodx.inc - 442", "contents": "get_systime(${1:offset = 0})" },
		{ "trigger": "get_time\tamxmodx.inc - 434", "contents": "get_time(${1:const format[]}, ${2:output[]}, ${3:len})" },
		{ "trigger": "get_time_length\ttime.inc - 30", "contents": "get_time_length(${1:id}, ${2:unitCnt}, ${3:type}, ${4:output[]}, ${5:outputLen})" },
		{ "trigger": "get_timeleft\tamxmodx.inc - 422", "contents": "get_timeleft()" },
		{ "trigger": "get_tr\tfakemeta.inc - 157", "contents": "get_tr(${1:TraceResult:tr_member}, ${2:{Float}, ${3:_}:...})" },
		{ "trigger": "get_tr2\tfakemeta.inc - 163", "contents": "get_tr2(${1:tr_handle}, ${2:{TraceResult}, ${3:_}:tr_member}, ${4:{Float}, ${5:_}:...})" },
		{ "trigger": "get_uc\tfakemeta.inc - 213", "contents": "get_uc(${1:uc_handle}, ${2:UserCmd:member}, ${3:{Float}, ${4:_}:...})" },
		{ "trigger": "get_user_aiming\tamxmodx.inc - 221", "contents": "get_user_aiming(${1:index}, ${2:&id}, ${3:&body}, ${4:dist=9999})" },
		{ "trigger": "get_user_airaccelerate\tairaccelerate.inc - 37", "contents": "get_user_airaccelerate(${1:id})" },
		{ "trigger": "get_user_ammo\tamxmodx.inc - 250", "contents": "get_user_ammo(${1:index}, ${2:weapon}, ${3:&clip}, ${4:&ammo})" },
		{ "trigger": "get_user_armor\tfun_stocks.inc - 34", "contents": "get_user_armor(${1:1%})" },
		{ "trigger": "get_user_astats\tcsstats.inc - 40", "contents": "get_user_astats(${1:index}, ${2:wpnindex}, ${3:stats[8]}, ${4:bodyhits[8]}, ${5:wpnname[]=}, ${6:len=0})" },
		{ "trigger": "get_user_attacker\tamxmodx.inc - 216", "contents": "get_user_attacker(${1:index}, ${2:...})" },
		{ "trigger": "get_user_authid\tamxmodx.inc - 296", "contents": "get_user_authid(${1:index}, ${2:authid[]}, ${3:len})" },
		{ "trigger": "get_user_button\tengine_stocks.inc - 52", "contents": "get_user_button(${1:id})" },
		{ "trigger": "get_user_deaths\tamxmodx.inc - 230", "contents": "get_user_deaths(${1:index})" },
		{ "trigger": "get_user_flags\tamxmodx.inc - 475", "contents": "get_user_flags(${1:index}, ${2:id=0})" },
		{ "trigger": "get_user_footsteps\tfun_stocks.inc - 57", "contents": "get_user_footsteps(${1:1%})" },
		{ "trigger": "get_user_frags\tfun_stocks.inc - 30", "contents": "get_user_frags(${1:1%})" },
		{ "trigger": "get_user_godmode\tfun_stocks.inc - 24", "contents": "get_user_godmode(${1:1%})" },
		{ "trigger": "get_user_gravity\tfun_stocks.inc - 44", "contents": "get_user_gravity(${1:1%})" },
		{ "trigger": "get_user_health\tfun_stocks.inc - 26", "contents": "get_user_health(${1:1%})" },
		{ "trigger": "get_user_hitzones\tfun.inc - 65", "contents": "get_user_hitzones(${1:index}, ${2:target})" },
		{ "trigger": "get_user_index\tamxmodx.inc - 236", "contents": "get_user_index(${1:const name[]})" },
		{ "trigger": "get_user_info\tamxmodx.inc - 89", "contents": "get_user_info(${1:index}, ${2:const info[]}, ${3:output[]}, ${4:len})" },
		{ "trigger": "get_user_ip\tamxmodx.inc - 239", "contents": "get_user_ip(${1:index}, ${2:ip[]}, ${3:len}, ${4:without_port = 0})" },
		{ "trigger": "get_user_lstats\tdodstats.inc - 41", "contents": "get_user_lstats(${1:index}, ${2:stats[9]}, ${3:bodyhits[8]})" },
		{ "trigger": "get_user_maxspeed\tfun_stocks.inc - 40", "contents": "get_user_maxspeed(${1:1%})" },
		{ "trigger": "get_user_menu\tamxmodx.inc - 538", "contents": "get_user_menu(${1:index}, ${2:&id}, ${3:&keys})" },
		{ "trigger": "get_user_money\tamxmod.inc - 43", "contents": "get_user_money(${1:index})" },
		{ "trigger": "get_user_msgid\tamxmodx.inc - 560", "contents": "get_user_msgid(${1:const name[]})" },
		{ "trigger": "get_user_msgname\tamxmodx.inc - 564", "contents": "get_user_msgname(${1:msgid}, ${2:name[]}, ${3:len})" },
		{ "trigger": "get_user_name\tamxmodx.inc - 293", "contents": "get_user_name(${1:index}, ${2:name[]}, ${3:len})" },
		{ "trigger": "get_user_noclip\tfun_stocks.inc - 48", "contents": "get_user_noclip(${1:1%})" },
		{ "trigger": "get_user_oldbutton\tengine_stocks.inc - 57", "contents": "get_user_oldbutton(${1:id})" },
		{ "trigger": "get_user_origin\tamxmodx.inc - 273", "contents": "get_user_origin(${1:index}, ${2:origin[3]}, ${3:mode = 0})" },
		{ "trigger": "get_user_ping\tamxmodx.inc - 264", "contents": "get_user_ping(${1:index}, ${2:&ping}, ${3:&loss})" },
		{ "trigger": "get_user_rstats\tcsstats.inc - 30", "contents": "get_user_rstats(${1:index}, ${2:stats[8]}, ${3:bodyhits[8]})" },
		{ "trigger": "get_user_stats\tcsstats.inc - 27", "contents": "get_user_stats(${1:index}, ${2:stats[8]}, ${3:bodyhits[8]})" },
		{ "trigger": "get_user_stats2\tcsstats.inc - 60", "contents": "get_user_stats2(${1:index}, ${2:stats[4]})" },
		{ "trigger": "get_user_team\tamxmodx.inc - 257", "contents": "get_user_team(${1:index}, ${2:team[]=}, ${3:len = 0})" },
		{ "trigger": "get_user_time\tamxmodx.inc - 261", "contents": "get_user_time(${1:index}, ${2:flag = 0})" },
		{ "trigger": "get_user_userid\tamxmodx.inc - 299", "contents": "get_user_userid(${1:index})" },
		{ "trigger": "get_user_velocity\tengine_stocks.inc - 203", "contents": "get_user_velocity(${1:entity}, ${2:Float:vec[3]})" },
		{ "trigger": "get_user_vstats\tcsstats.inc - 35", "contents": "get_user_vstats(${1:index}, ${2:victim}, ${3:stats[8]}, ${4:bodyhits[8]}, ${5:wpnname[]=}, ${6:len=0})" },
		{ "trigger": "get_user_weapon\tamxmodx.inc - 247", "contents": "get_user_weapon(${1:index}, ${2:&clip=0}, ${3:&ammo=0})" },
		{ "trigger": "get_user_weapons\tamxmodx.inc - 287", "contents": "get_user_weapons(${1:index}, ${2:weapons[32]}, ${3:&num})" },
		{ "trigger": "get_user_wlstats\tdodstats.inc - 30", "contents": "get_user_wlstats(${1:index}, ${2:wpnindex}, ${3:stats[9]}, ${4:bodyhits[8]})" },
		{ "trigger": "get_user_wrstats\tcsstats.inc - 22", "contents": "get_user_wrstats(${1:index}, ${2:wpnindex}, ${3:stats[8]}, ${4:bodyhits[8]})" },
		{ "trigger": "get_user_wstats\tcsstats.inc - 19", "contents": "get_user_wstats(${1:index}, ${2:wpnindex}, ${3:stats[8]}, ${4:bodyhits[8]})" },
		{ "trigger": "get_usercmd\tengine.inc - 187", "contents": "get_usercmd(${1:type}, ${2:any:...})" },
		{ "trigger": "get_var_addr\tamxmodx.inc - 974", "contents": "get_var_addr(${1:any:...})" },
		{ "trigger": "get_vaultdata\tvault.inc - 17", "contents": "get_vaultdata(${1:const key[]}, ${2:data[] = \"\"}, ${3:len = 0})" },
		{ "trigger": "get_weaponid\tamxmodx.inc - 1054", "contents": "get_weaponid(${1:const name[]})" },
		{ "trigger": "get_weaponname\tamxmodx.inc - 290", "contents": "get_weaponname(${1:id}, ${2:weapon[]}, ${3:len})" },
		{ "trigger": "get_xvar_float\tamxmodx.inc - 579", "contents": "get_xvar_float(${1:id})" },
		{ "trigger": "get_xvar_id\tamxmodx.inc - 571", "contents": "get_xvar_id(${1:const name[]})" },
		{ "trigger": "get_xvar_num\tamxmodx.inc - 575", "contents": "get_xvar_num(${1:id})" },
		{ "trigger": "getarg\tcore.inc - 18", "contents": "getarg(${1:arg}, ${2:index=0})" },
		{ "trigger": "give_item\tfun.inc - 50", "contents": "give_item(${1:index}, ${2:const item[]})" },
		{ "trigger": "global_get\tfakemeta.inc - 99", "contents": "global_get(${1:_value}, ${2:any:...})" },
		{ "trigger": "gpglobals_v\tns2amx.inc - 82", "contents": "gpglobals_v(${1:type}, ${2:Float:ret[3]})" },
		{ "trigger": "gpgobals_time\tns2amx.inc - 52", "contents": "gpgobals_time()" },
		{ "trigger": "grenade_throw\tcsx.inc - 35", "contents": "grenade_throw(${1:index}, ${2:greindex}, ${3:wId})" },
		{ "trigger": "halflife_time\tengine.inc - 170", "contents": "halflife_time()" },
		{ "trigger": "has_access\tcvaraccess.inc - 79", "contents": "has_access(${1:id}, ${2:flags})" },
		{ "trigger": "has_all_flags\tamxmisc.inc - 618", "contents": "has_all_flags(${1:id}, ${2:const flags[]})" },
		{ "trigger": "has_flag\tamxmisc.inc - 611", "contents": "has_flag(${1:id}, ${2:const flags[]})" },
		{ "trigger": "has_weapon\tns2amx.inc - 79", "contents": "has_weapon(${1:index}, ${2:weapon}, ${3:setweapon=-1})" },
		{ "trigger": "heapspace\tcore.inc - 13", "contents": "heapspace()" },
		{ "trigger": "help_add\thelper.inc - 28", "contents": "help_add(${1:caption[]}, ${2:content[]})" },
		{ "trigger": "helper_loaded\thelper.inc - 48", "contents": "helper_loaded()" },
		{ "trigger": "hl_get_user_armor\thl.inc - 150", "contents": "hl_get_user_armor(${1:client})" },
		{ "trigger": "hl_get_user_bpammo\thl.inc - 101", "contents": "hl_get_user_bpammo(${1:client}, ${2:weapon})" },
		{ "trigger": "hl_get_user_deaths\thl.inc - 61", "contents": "hl_get_user_deaths(${1:client})" },
		{ "trigger": "hl_get_user_health\thl.inc - 132", "contents": "hl_get_user_health(${1:client})" },
		{ "trigger": "hl_get_user_longjump\thl.inc - 415", "contents": "hl_get_user_longjump(${1:client})" },
		{ "trigger": "hl_get_user_model\thl.inc - 118", "contents": "hl_get_user_model(${1:client}, ${2:model[]}, ${3:len})" },
		{ "trigger": "hl_get_user_spectator\thl.inc - 364", "contents": "hl_get_user_spectator(${1:client})" },
		{ "trigger": "hl_get_user_team\thl.inc - 166", "contents": "hl_get_user_team(${1:client}, ${2:team[] = \"\"}, ${3:len = 0})" },
		{ "trigger": "hl_get_user_weapon_ent\thl.inc - 277", "contents": "hl_get_user_weapon_ent(${1:client})" },
		{ "trigger": "hl_get_wbox_ammo\thl.inc - 324", "contents": "hl_get_wbox_ammo(${1:entity})" },
		{ "trigger": "hl_get_wbox_weapon_ent\thl.inc - 305", "contents": "hl_get_wbox_weapon_ent(${1:entity})" },
		{ "trigger": "hl_get_weapon_ammo\thl.inc - 284", "contents": "hl_get_weapon_ammo(${1:entity})" },
		{ "trigger": "hl_get_weapon_id\thl.inc - 298", "contents": "hl_get_weapon_id(${1:entity})" },
		{ "trigger": "hl_set_user_armor\thl.inc - 159", "contents": "hl_set_user_armor(${1:client}, ${2:armorvalue})" },
		{ "trigger": "hl_set_user_bpammo\thl.inc - 108", "contents": "hl_set_user_bpammo(${1:client}, ${2:weapon}, ${3:ammo})" },
		{ "trigger": "hl_set_user_deaths\thl.inc - 68", "contents": "hl_set_user_deaths(${1:client}, ${2:deaths})" },
		{ "trigger": "hl_set_user_health\thl.inc - 141", "contents": "hl_set_user_health(${1:client}, ${2:health})" },
		{ "trigger": "hl_set_user_longjump\thl.inc - 429", "contents": "hl_set_user_longjump(${1:client}, ${2:bool:longjump = true}, ${3:bool:tempicon = true})" },
		{ "trigger": "hl_set_user_model\thl.inc - 125", "contents": "hl_set_user_model(${1:client}, ${2:const model[]})" },
		{ "trigger": "hl_set_user_spectator\thl.inc - 374", "contents": "hl_set_user_spectator(${1:client}, ${2:bool:spectator = true})" },
		{ "trigger": "hl_set_user_team\thl.inc - 182", "contents": "hl_set_user_team(${1:client}, ${2:const team[]})" },
		{ "trigger": "hl_set_wbox_ammo\thl.inc - 331", "contents": "hl_set_wbox_ammo(${1:entity}, ${2:ammo})" },
		{ "trigger": "hl_set_weapon_ammo\thl.inc - 291", "contents": "hl_set_weapon_ammo(${1:entity}, ${2:clip})" },
		{ "trigger": "hl_strip_user_weapons\thl.inc - 349", "contents": "hl_strip_user_weapons(${1:client})" },
		{ "trigger": "hl_user_spawn\thl.inc - 338", "contents": "hl_user_spawn(${1:client})" },
		{ "trigger": "http_page\thttp_sys.inc - 16", "contents": "http_page(${1:requestedfile[128]})" },
		{ "trigger": "http_send_text\thttp_sys.inc - 12", "contents": "http_send_text(${1:const msg[]}, ${2:...})" },
		{ "trigger": "hvm_game_ended\thvmmod.inc - 125", "contents": "hvm_game_ended(${1:winner})" },
		{ "trigger": "hvm_get_monster_name\thvmmod.inc - 118", "contents": "hvm_get_monster_name(${1:monster[]}, ${2:monstername[]}, ${3:len})" },
		{ "trigger": "hvm_get_user_kills\thvmmod.inc - 77", "contents": "hvm_get_user_kills(${1:id})" },
		{ "trigger": "hvm_get_user_level\thvmmod.inc - 13", "contents": "hvm_get_user_level(${1:id})" },
		{ "trigger": "hvm_get_user_monkills\thvmmod.inc - 94", "contents": "hvm_get_user_monkills(${1:id}, ${2:monster[]})" },
		{ "trigger": "hvm_get_user_skill1_level\thvmmod.inc - 29", "contents": "hvm_get_user_skill1_level(${1:id})" },
		{ "trigger": "hvm_get_user_skill2_level\thvmmod.inc - 37", "contents": "hvm_get_user_skill2_level(${1:id})" },
		{ "trigger": "hvm_get_user_skill3_level\thvmmod.inc - 45", "contents": "hvm_get_user_skill3_level(${1:id})" },
		{ "trigger": "hvm_get_user_skill4_level\thvmmod.inc - 53", "contents": "hvm_get_user_skill4_level(${1:id})" },
		{ "trigger": "hvm_get_user_skill5_level\thvmmod.inc - 61", "contents": "hvm_get_user_skill5_level(${1:id})" },
		{ "trigger": "hvm_get_user_skill6_level\thvmmod.inc - 69", "contents": "hvm_get_user_skill6_level(${1:id})" },
		{ "trigger": "hvm_get_user_wins\thvmmod.inc - 85", "contents": "hvm_get_user_wins(${1:id})" },
		{ "trigger": "hvm_get_user_xp\thvmmod.inc - 21", "contents": "hvm_get_user_xp(${1:id})" },
		{ "trigger": "hvm_give_user_xp\thvmmod.inc - 102", "contents": "hvm_give_user_xp(${1:id}, ${2:xp})" },
		{ "trigger": "hvm_set_user_wins\thvmmod.inc - 110", "contents": "hvm_set_user_wins(${1:id}, ${2:wins})" },
		{ "trigger": "in_front\tengine.inc - 262", "contents": "in_front(${1:entity}, ${2:const Float:origin[3]})" },
		{ "trigger": "in_range\tip.inc - 104", "contents": "in_range(${1:const net_string[]}, ${2:const ip_string[]})" },
		{ "trigger": "in_view_cone\tVexdUM_stock.inc - 32", "contents": "in_view_cone(${1:ent}, ${2:Float:Orig[3]})" },
		{ "trigger": "inconsistent_file\tamxmodx.inc - 711", "contents": "inconsistent_file(${1:id}, ${2:const filename[]}, ${3:reason[64]})" },
		{ "trigger": "inet_atom\tip.inc - 80", "contents": "inet_atom(${1:const mask_string[]})" },
		{ "trigger": "inet_aton\tip.inc - 61", "contents": "inet_aton(${1:const ip_string[]})" },
		{ "trigger": "inet_maskton\tip.inc - 122", "contents": "inet_maskton(${1:const mask_string[]})" },
		{ "trigger": "inet_mtoa\tip.inc - 119", "contents": "inet_mtoa(${1:const mask_string[]})" },
		{ "trigger": "inet_mton\tip.inc - 112", "contents": "inet_mton(${1:const mask_string[]})" },
		{ "trigger": "inet_ntoa\tip.inc - 73", "contents": "inet_ntoa(${1:ip})" },
		{ "trigger": "inet_ntom\tip.inc - 86", "contents": "inet_ntom(${1:mask})" },
		{ "trigger": "inet_range\tip.inc - 92", "contents": "inet_range(${1:const net_string[]}, ${2:&net}, ${3:&mask})" },
		{ "trigger": "init_irc\tirc.inc - 5", "contents": "init_irc(${1:plugin_name[]})" },
		{ "trigger": "int3\tamxmodx.inc - 963", "contents": "int3()" },
		{ "trigger": "ip_local\tip.inc - 135", "contents": "ip_local(${1:ip})" },
		{ "trigger": "is_FRC_on\tfrc.inc - 280", "contents": "is_FRC_on()" },
		{ "trigger": "is_aiming_at_hostage\ttoolsx.inc - 24", "contents": "is_aiming_at_hostage(${1:index})" },
		{ "trigger": "is_aiming_at_sky\ttoolsx.inc - 39", "contents": "is_aiming_at_sky(${1:index})" },
		{ "trigger": "is_aiming_at_water\ttoolsx.inc - 52", "contents": "is_aiming_at_water(${1:index})" },
		{ "trigger": "is_amd64_server\tamxmodx.inc - 738", "contents": "is_amd64_server()" },
		{ "trigger": "is_borderplane_visible\tengine.inc - 256", "contents": "is_borderplane_visible(${1:Float:startorigin[3]}, ${2:Float:endorigin[3]}, ${3:Float:mins[3]}, ${4:Float:maxs[3]}, ${5:ignore = DONT_IGNORE_MONSTERS}, ${6:ignore_ent = 0}, ${7:Float:mulconst = 1.0})" },
		{ "trigger": "is_bot\tbot_api.inc - 54", "contents": "is_bot(${1:id})" },
		{ "trigger": "is_char\tstring_stocks.inc - 248", "contents": "is_char(${1:1%})" },
		{ "trigger": "is_char_lower\tstring_stocks.inc - 255", "contents": "is_char_lower(${1:c})" },
		{ "trigger": "is_char_upper\tstring_stocks.inc - 250", "contents": "is_char_upper(${1:c})" },
		{ "trigger": "is_combat\tns2amx.inc - 262", "contents": "is_combat()" },
		{ "trigger": "is_cvar_access_running\tcvaraccess.inc - 23", "contents": "is_cvar_access_running()" },
		{ "trigger": "is_dedicated_server\tamxmodx.inc - 200", "contents": "is_dedicated_server()" },
		{ "trigger": "is_entity\tVexdUM_stock.inc - 17", "contents": "is_entity(${1:ent})" },
		{ "trigger": "is_in_viewcone\tengine.inc - 242", "contents": "is_in_viewcone(${1:entity}, ${2:const Float:origin[3]}, ${3:use3d = 0})" },
		{ "trigger": "is_inside\tchr_engine.inc - 671", "contents": "is_inside(${1:const Float:point[2]}, ${2:const Float:polygon[MAX_SIDES][2]}, ${3:numsides})" },
		{ "trigger": "is_jit_enabled\tamxmodx.inc - 206", "contents": "is_jit_enabled()" },
		{ "trigger": "is_linux_server\tamxmodx.inc - 203", "contents": "is_linux_server()" },
		{ "trigger": "is_map_valid\tamxmodx.inc - 182", "contents": "is_map_valid(${1:const mapname[]})" },
		{ "trigger": "is_module_loaded\tamxmodx.inc - 591", "contents": "is_module_loaded(${1:const name[]})" },
		{ "trigger": "is_module_running\tamxmod.inc - 300", "contents": "is_module_running(${1:const module[]})" },
		{ "trigger": "is_nothing_above_index\ttoolsx.inc - 65", "contents": "is_nothing_above_index(${1:index})" },
		{ "trigger": "is_nothing_solid_abv_index\ttoolsx.inc - 87", "contents": "is_nothing_solid_abv_index(${1:index})" },
		{ "trigger": "is_player_flag_set\tboolean.inc - 44", "contents": "is_player_flag_set(${1:%1}, ${2:%2})" },
		{ "trigger": "is_plugin_loaded\tamxmodx.inc - 627", "contents": "is_plugin_loaded(${1:const name[]}, ${2:bool:usefilename=false})" },
		{ "trigger": "is_plugin_running\tamxmod.inc - 308", "contents": "is_plugin_running(${1:const plugin[]})" },
		{ "trigger": "is_running\tamxmisc.inc - 501", "contents": "is_running(${1:const mod[]})" },
		{ "trigger": "is_str_alnum\tstring_stocks.inc - 245", "contents": "is_str_alnum(${1:1%})" },
		{ "trigger": "is_str_alpha\tstring_stocks.inc - 244", "contents": "is_str_alpha(${1:1%})" },
		{ "trigger": "is_str_empty\tstring_stocks.inc - 241", "contents": "is_str_empty(${1:1%})" },
		{ "trigger": "is_str_float\tstring_stocks.inc - 521", "contents": "is_str_float(${1:const string[]})" },
		{ "trigger": "is_str_lower\tstring_stocks.inc - 888", "contents": "is_str_lower(${1:const string[]})" },
		{ "trigger": "is_str_num\tstring_stocks.inc - 243", "contents": "is_str_num(${1:1%})" },
		{ "trigger": "is_str_spaces\tstring_stocks.inc - 246", "contents": "is_str_spaces(${1:1%})" },
		{ "trigger": "is_str_type\tstring_stocks.inc - 497", "contents": "is_str_type(${1:const string[]}, ${2:StrType:flags}, ${3:const exceptions[] = \"\"})" },
		{ "trigger": "is_str_upper\tstring_stocks.inc - 877", "contents": "is_str_upper(${1:const string[]})" },
		{ "trigger": "is_translated\tamxmod.inc - 183", "contents": "is_translated(${1:const sentence[]})" },
		{ "trigger": "is_user_admin\tamxmisc.inc - 30", "contents": "is_user_admin(${1:id})" },
		{ "trigger": "is_user_alive\tamxmodx.inc - 197", "contents": "is_user_alive(${1:index})" },
		{ "trigger": "is_user_authorized\tamxmod.inc - 141", "contents": "is_user_authorized(${1:id})" },
		{ "trigger": "is_user_bot\tamxmodx.inc - 185", "contents": "is_user_bot(${1:index})" },
		{ "trigger": "is_user_connected\tamxmodx.inc - 191", "contents": "is_user_connected(${1:index})" },
		{ "trigger": "is_user_connecting\tamxmodx.inc - 194", "contents": "is_user_connecting(${1:index})" },
		{ "trigger": "is_user_crouching\tchr_engine.inc - 174", "contents": "is_user_crouching(${1:ent}, ${2:ignoreplayer=0})" },
		{ "trigger": "is_user_hltv\tamxmodx.inc - 188", "contents": "is_user_hltv(${1:index})" },
		{ "trigger": "is_valid_ent\tengine.inc - 114", "contents": "is_valid_ent(${1:iIndex})" },
		{ "trigger": "is_visible\tengine.inc - 245", "contents": "is_visible(${1:entity}, ${2:target})" },
		{ "trigger": "is_visible_origin\tengine.inc - 259", "contents": "is_visible_origin(${1:entity}, ${2:Float:origin[3]})" },
		{ "trigger": "is_within_difference\tchr_engine.inc - 624", "contents": "is_within_difference(${1:Float:number1}, ${2:Float:number2}, ${3:Float:difference})" },
		{ "trigger": "isalnum\tstring.inc - 157", "contents": "isalnum(${1:ch})" },
		{ "trigger": "isalpha\tstring.inc - 151", "contents": "isalpha(${1:ch})" },
		{ "trigger": "isdigit\tstring.inc - 148", "contents": "isdigit(${1:ch})" },
		{ "trigger": "isspace\tstring.inc - 154", "contents": "isspace(${1:ch})" },
		{ "trigger": "iterator_add\tmemx_iterator.inc - 23", "contents": "iterator_add(${1:iterator:one}, ${2:amount = 1})" },
		{ "trigger": "iterator_sub\tmemx_iterator.inc - 24", "contents": "iterator_sub(${1:iterator:one}, ${2:amount = 1})" },
		{ "trigger": "keyvalue\tVexdUM.inc - 87", "contents": "keyvalue(${1:entity})" },
		{ "trigger": "kz_cheat_detection\tkzarg.inc - 172", "contents": "kz_cheat_detection(${1:id}, ${2:const Cheat[]})" },
		{ "trigger": "kz_colorchat\tkzarg.inc - 195", "contents": "kz_colorchat(${1:id}, ${2:const msg[]}, ${3:{Float}, ${4:Sql}, ${5:Result}, ${6:_}:...})" },
		{ "trigger": "kz_finishclimb\tkzarg.inc - 231", "contents": "kz_finishclimb(${1:id}, ${2:Float:tiempo}, ${3:CheckPoints}, ${4:GoChecks}, ${5:Weapon})" },
		{ "trigger": "kz_get_plugin_version\tkzarg.inc - 24", "contents": "kz_get_plugin_version(${1:output[]}, ${2:len})" },
		{ "trigger": "kz_get_user_checkpoint\tkzarg.inc - 34", "contents": "kz_get_user_checkpoint(${1:id})" },
		{ "trigger": "kz_get_user_gocheck\tkzarg.inc - 44", "contents": "kz_get_user_gocheck(${1:id})" },
		{ "trigger": "kz_get_user_roundtime\tkzarg.inc - 54", "contents": "kz_get_user_roundtime(${1:id})" },
		{ "trigger": "kz_get_user_showtimer\tkzarg.inc - 190", "contents": "kz_get_user_showtimer(${1:id})" },
		{ "trigger": "kz_get_user_startweapon\tkzarg.inc - 64", "contents": "kz_get_user_startweapon(${1:id})" },
		{ "trigger": "kz_get_user_status\tkzarg.inc - 74", "contents": "kz_get_user_status(${1:id})" },
		{ "trigger": "kz_get_user_team\tkzarg.inc - 134", "contents": "kz_get_user_team(${1:id})" },
		{ "trigger": "kz_get_user_vip\tkzarg.inc - 92", "contents": "kz_get_user_vip(${1:id})" },
		{ "trigger": "kz_itemmainmenu\tkzarg.inc - 252", "contents": "kz_itemmainmenu(${1:id}, ${2:item}, ${3:page})" },
		{ "trigger": "kz_itemrewardsmenu\tkzarg.inc - 263", "contents": "kz_itemrewardsmenu(${1:id}, ${2:item}, ${3:page})" },
		{ "trigger": "kz_mainmenu_item_register\tkzarg.inc - 113", "contents": "kz_mainmenu_item_register(${1:const itemname[]}, ${2:const itemaccess[]})" },
		{ "trigger": "kz_open_mainmenu\tkzarg.inc - 154", "contents": "kz_open_mainmenu(${1:id}, ${2:page=0})" },
		{ "trigger": "kz_open_rewardsmenu\tkzarg.inc - 163", "contents": "kz_open_rewardsmenu(${1:id}, ${2:page=0})" },
		{ "trigger": "kz_pluginload\tkzarg.inc - 270", "contents": "kz_pluginload()" },
		{ "trigger": "kz_prestartclimb\tkzarg.inc - 209", "contents": "kz_prestartclimb(${1:id})" },
		{ "trigger": "kz_reset_user_data\tkzarg.inc - 82", "contents": "kz_reset_user_data(${1:id})" },
		{ "trigger": "kz_resetclimb\tkzarg.inc - 241", "contents": "kz_resetclimb(${1:id})" },
		{ "trigger": "kz_rewards_item_register\tkzarg.inc - 124", "contents": "kz_rewards_item_register(${1:const itemname[]}, ${2:const itemaccess[]})" },
		{ "trigger": "kz_set_hud_overtime\tkzarg.inc - 102", "contents": "kz_set_hud_overtime(${1:id}, ${2:const message[]}, ${3:{Float}, ${4:Sql}, ${5:Result}, ${6:_}:...})" },
		{ "trigger": "kz_set_user_team\tkzarg.inc - 145", "contents": "kz_set_user_team(${1:id}, ${2:team})" },
		{ "trigger": "kz_startclimb\tkzarg.inc - 218", "contents": "kz_startclimb(${1:id})" },
		{ "trigger": "lang_exists\tlang.inc - 26", "contents": "lang_exists(${1:const name[]})" },
		{ "trigger": "load_gun\txen_gunshop.inc - 13", "contents": "load_gun(${1:infostr[]})" },
		{ "trigger": "load_translations\ttranslator.inc - 31", "contents": "load_translations(${1:const file[]})" },
		{ "trigger": "log_amx\tamxmodx.inc - 313", "contents": "log_amx(${1:const string[]}, ${2:any:...})" },
		{ "trigger": "log_error\tamxmodx.inc - 769", "contents": "log_error(${1:error}, ${2:const fmt[]}, ${3:any:...})" },
		{ "trigger": "log_message\tamxmodx.inc - 316", "contents": "log_message(${1:const message[]}, ${2:any:...})" },
		{ "trigger": "log_to_file\tamxmodx.inc - 319", "contents": "log_to_file(${1:const file[]}, ${2:const message[]}, ${3:any:...})" },
		{ "trigger": "lookup_sequence\tfakemeta.inc - 247", "contents": "lookup_sequence(${1:entity}, ${2:const name[]}, ${3:&Float:framerate = 0.0}, ${4:&bool:loops = false}, ${5:&Float:groundspeed = 0.0})" },
		{ "trigger": "make_deathmsg\tmessage_stocks.inc - 44", "contents": "make_deathmsg(${1:killer}, ${2:victim}, ${3:headshot}, ${4:const weapon[]})" },
		{ "trigger": "make_string\tns2amx.inc - 42", "contents": "make_string(${1:value[]})" },
		{ "trigger": "map_reset\tns.inc - 577", "contents": "map_reset(${1:isload})" },
		{ "trigger": "max\tcore.inc - 30", "contents": "max(${1:value1}, ${2:value2})" },
		{ "trigger": "md5\tamxmodx.inc - 718", "contents": "md5(${1:const szString[]}, ${2:md5buffer[34]})" },
		{ "trigger": "md5_file\tamxmodx.inc - 721", "contents": "md5_file(${1:const file[]}, ${2:md5buffer[34]})" },
		{ "trigger": "menu_addblank\tnewmenus.inc - 228", "contents": "menu_addblank(${1:menu}, ${2:slot=1})" },
		{ "trigger": "menu_additem\tnewmenus.inc - 89", "contents": "menu_additem(${1:menu}, ${2:const name[]}, ${3:const info[]=}, ${4:paccess=0}, ${5:callback=-1})" },
		{ "trigger": "menu_addtext\tnewmenus.inc - 240", "contents": "menu_addtext(${1:menu}, ${2:const text[]}, ${3:slot=1})" },
		{ "trigger": "menu_cancel\tnewmenus.inc - 262", "contents": "menu_cancel(${1:player})" },
		{ "trigger": "menu_create\tnewmenus.inc - 58", "contents": "menu_create(${1:const title[]}, ${2:const handler[]}, ${3:ml=0})" },
		{ "trigger": "menu_destroy\tnewmenus.inc - 197", "contents": "menu_destroy(${1:menu})" },
		{ "trigger": "menu_display\tnewmenus.inc - 120", "contents": "menu_display(${1:id}, ${2:menu}, ${3:page=0})" },
		{ "trigger": "menu_find_id\tnewmenus.inc - 132", "contents": "menu_find_id(${1:menu}, ${2:page}, ${3:key})" },
		{ "trigger": "menu_item_getinfo\tnewmenus.inc - 148", "contents": "menu_item_getinfo(${1:menu}, ${2:item}, ${3:&access}, ${4:info[]}, ${5:infolen}, ${6:name[]=}, ${7:namelen=0}, ${8:&callback})" },
		{ "trigger": "menu_item_setcall\tnewmenus.inc - 181", "contents": "menu_item_setcall(${1:menu}, ${2:item}, ${3:callback=-1})" },
		{ "trigger": "menu_item_setcmd\tnewmenus.inc - 170", "contents": "menu_item_setcmd(${1:menu}, ${2:item}, ${3:const info[]})" },
		{ "trigger": "menu_item_setname\tnewmenus.inc - 159", "contents": "menu_item_setname(${1:menu}, ${2:item}, ${3:const name[]})" },
		{ "trigger": "menu_items\tnewmenus.inc - 107", "contents": "menu_items(${1:menu})" },
		{ "trigger": "menu_makecallback\tnewmenus.inc - 75", "contents": "menu_makecallback(${1:const function[]})" },
		{ "trigger": "menu_pages\tnewmenus.inc - 98", "contents": "menu_pages(${1:menu})" },
		{ "trigger": "menu_setprop\tnewmenus.inc - 251", "contents": "menu_setprop(${1:menu}, ${2:prop}, ${3:...})" },
		{ "trigger": "message_begin\tmessages.inc - 19", "contents": "message_begin(${1:dest}, ${2:msg_type}, ${3:const origin[3] = {0}, ${4:0}, ${5:0}}, ${6:player = 0})" },
		{ "trigger": "message_end\tmessages.inc - 20", "contents": "message_end()" },
		{ "trigger": "message_fbegin\tengine.inc - 104", "contents": "message_fbegin(${1:dest}, ${2:msg_type}, ${3:Float:origin[3]={0.0}, ${4:0.0}, ${5:0.0}}, ${6:player=0})" },
		{ "trigger": "min\tcore.inc - 29", "contents": "min(${1:value1}, ${2:value2})" },
		{ "trigger": "mkdir\tfile.inc - 108", "contents": "mkdir(${1:const dirname[]})" },
		{ "trigger": "module_exists\tamxmodx.inc - 915", "contents": "module_exists(${1:const logtag[]})" },
		{ "trigger": "msg_args\tns2amx.inc - 115", "contents": "msg_args()" },
		{ "trigger": "msg_data\tns2amx.inc - 154", "contents": "msg_data(${1:value}, ${2:...})" },
		{ "trigger": "msg_data_type\tns2amx.inc - 148", "contents": "msg_data_type(${1:value})" },
		{ "trigger": "msg_dest\tns2amx.inc - 130", "contents": "msg_dest()" },
		{ "trigger": "msg_loc\tns2amx.inc - 118", "contents": "msg_loc(${1:vec})" },
		{ "trigger": "msg_name\tns2amx.inc - 136", "contents": "msg_name()" },
		{ "trigger": "msg_set_f\tns2amx.inc - 142", "contents": "msg_set_f(${1:number}, ${2:Float:value})" },
		{ "trigger": "msg_set_i\tns2amx.inc - 145", "contents": "msg_set_i(${1:number}, ${2:value})" },
		{ "trigger": "msg_set_s\tns2amx.inc - 139", "contents": "msg_set_s(${1:number}, ${2:value[]})" },
		{ "trigger": "msg_strdata\tns2amx.inc - 151", "contents": "msg_strdata(${1:value})" },
		{ "trigger": "msg_type\tns2amx.inc - 133", "contents": "msg_type()" },
		{ "trigger": "mysql_affected_rows\tmysql.inc - 16", "contents": "mysql_affected_rows(${1:sql})" },
		{ "trigger": "mysql_close\tmysql.inc - 12", "contents": "mysql_close(${1:sql})" },
		{ "trigger": "mysql_connect\tmysql.inc - 9", "contents": "mysql_connect(${1:host[]}, ${2:user[]}, ${3:pass[]}, ${4:dbname[]}, ${5:error[]}, ${6:maxlength})" },
		{ "trigger": "mysql_error\tmysql.inc - 11", "contents": "mysql_error(${1:sql}, ${2:dest[]}, ${3:maxlength})" },
		{ "trigger": "mysql_field_name\tmysql.inc - 19", "contents": "mysql_field_name(${1:sql}, ${2:field}, ${3:name[]}, ${4:length})" },
		{ "trigger": "mysql_getfield\tmysql.inc - 14", "contents": "mysql_getfield(${1:sql}, ${2:fieldnum}, ${3:{Float}, ${4:_}:...})" },
		{ "trigger": "mysql_getresult\tmysql.inc - 15", "contents": "mysql_getresult(${1:sql}, ${2:field[]}, ${3:{Float}, ${4:_}:...})" },
		{ "trigger": "mysql_insert_id\tmysql.inc - 20", "contents": "mysql_insert_id(${1:sql})" },
		{ "trigger": "mysql_nextrow\tmysql.inc - 13", "contents": "mysql_nextrow(${1:sql})" },
		{ "trigger": "mysql_num_fields\tmysql.inc - 17", "contents": "mysql_num_fields(${1:sql})" },
		{ "trigger": "mysql_num_rows\tmysql.inc - 18", "contents": "mysql_num_rows(${1:sql})" },
		{ "trigger": "mysql_query\tmysql.inc - 10", "contents": "mysql_query(${1:sql}, ${2:query[]}, ${3:{Float}, ${4:_}:...})" },
		{ "trigger": "next_file\tfile.inc - 116", "contents": "next_file(${1:dirh}, ${2:buffer[]}, ${3:length})" },
		{ "trigger": "next_hudchannel\tamxmodx.inc - 925", "contents": "next_hudchannel(${1:player})" },
		{ "trigger": "nfv_add_float\tnfvault.inc - 694", "contents": "nfv_add_float(${1:const filename[]}, ${2:const key[]}, ${3:name[]}, ${4:const Float:data}, ${5:const NFV_PROP:nfv_prop=NFV_OVERWRITE}, ${6:const identifier=';'})" },
		{ "trigger": "nfv_add_key\tnfvault.inc - 113", "contents": "nfv_add_key(${1:const filename[]}, ${2:const key[]}, ${3:const NFV_PROP:nfv_prop=NFV_OVERWRITE}, ${4:const identifier=';'}, ${5:any:...})" },
		{ "trigger": "nfv_add_num\tnfvault.inc - 451", "contents": "nfv_add_num(${1:const filename[]}, ${2:const key[]}, ${3:name[]}, ${4:const data}, ${5:const NFV_PROP:nfv_prop=NFV_OVERWRITE}, ${6:const identifier=';'})" },
		{ "trigger": "nfv_change_key\tnfvault.inc - 3167", "contents": "nfv_change_key(${1:const filename[]}, ${2:const key1[]}, ${3:const key2[]}, ${4:const NFV_PROP:nfv_prop=NFV_OVERWRITE}, ${5:const identifier=';'})" },
		{ "trigger": "nfv_create_file\tnfvault.inc - 2927", "contents": "nfv_create_file(${1:const filename[]}, ${2:const new_time=-1})" },
		{ "trigger": "nfv_file\tnfvault.inc - 2902", "contents": "nfv_file(${1:const filename[]}, ${2:filepath[]=}, ${3:const size=0})" },
		{ "trigger": "nfv_get_array\tnfvault.inc - 2049", "contents": "nfv_get_array(${1:const filename[]}, ${2:const key[]}, ${3:name[]}, ${4:any:data[]}, ${5:const size}, ${6:const identifier=';'}, ${7:const key_tell_start=0}, ${8:&key_tell_find=0}, ${9:const name_tell_start=0}, ${10:&name_tell_find=0}, ${11:key_copy[]=}, ${12:const key_len=0}, ${13:name_copy[]=}, ${14:const name_len=0})" },
		{ "trigger": "nfv_get_bool\tnfvault.inc - 1943", "contents": "nfv_get_bool(${1:const filename[]}, ${2:const key[]}, ${3:name[]}, ${4:const identifier=';'}, ${5:const key_tell_start=0}, ${6:&key_tell_find=0}, ${7:const name_tell_start=0}, ${8:&name_tell_find=0}, ${9:key_copy[]=\"\"}, ${10:const key_len=0}, ${11:name_copy[]=\"\"}, ${12:const name_len=0})" },
		{ "trigger": "nfv_get_cellarray\tnfvault.inc - 2256", "contents": "nfv_get_cellarray(${1:const filename[]}, ${2:const key[]}, ${3:name[]}, ${4:&Array:data=Invalid_Array}, ${5:const identifier=';'}, ${6:const key_tell_start=0}, ${7:&key_tell_find=0}, ${8:const name_tell_start=0}, ${9:&name_tell_find=0}, ${10:key_copy[]=\"\"}, ${11:const key_len=0}, ${12:name_copy[]=\"\"}, ${13:const name_len=0})" },
		{ "trigger": "nfv_get_cellarray2\tnfvault.inc - 2357", "contents": "nfv_get_cellarray2(${1:const filename[]}, ${2:const key[]}, ${3:name[]}, ${4:&Array:data=Invalid_Array}, ${5:const identifier=';'}, ${6:const key_tell_start=0}, ${7:&key_tell_find=0}, ${8:const name_tell_start=0}, ${9:&name_tell_find=0}, ${10:key_copy[]=\"\"}, ${11:const key_len=0}, ${12:name_copy[]=\"\"}, ${13:const name_len=0})" },
		{ "trigger": "nfv_get_data\tnfvault.inc - 1652", "contents": "nfv_get_data(${1:const filename[]}, ${2:const key[]}, ${3:name[]}, ${4:data[]=}, ${5:len=0}, ${6:const identifier=';'}, ${7:const key_tell_start=0}, ${8:&key_tell_find=0}, ${9:const name_tell_start=0}, ${10:&name_tell_find=0}, ${11:key_copy[]=}, ${12:const key_len=0}, ${13:name_copy[]=}, ${14:const name_len=0})" },
		{ "trigger": "nfv_get_float\tnfvault.inc - 1847", "contents": "nfv_get_float(${1:const filename[]}, ${2:const key[]}, ${3:name[]}, ${4:const identifier=';'}, ${5:const key_tell_start=0}, ${6:&key_tell_find=0}, ${7:const name_tell_start=0}, ${8:&name_tell_find=0}, ${9:key_copy[]=\"\"}, ${10:const key_len=0}, ${11:name_copy[]=\"\"}, ${12:const name_len=0})" },
		{ "trigger": "nfv_get_linedata\tnfvault.inc - 2579", "contents": "nfv_get_linedata(${1:const filename[]}, ${2:const key[]}, ${3:name[]}, ${4:data[]=}, ${5:len=0}, ${6:const identifier=';'}, ${7:const key_line_start=0}, ${8:&key_line_find=0}, ${9:const name_line_start=0}, ${10:&name_line_find=0}, ${11:name_copy[]}, ${12:const name_len=0})" },
		{ "trigger": "nfv_get_num\tnfvault.inc - 1751", "contents": "nfv_get_num(${1:const filename[]}, ${2:const key[]}, ${3:name[]}, ${4:const identifier=';'}, ${5:const key_tell_start=0}, ${6:&key_tell_find=0}, ${7:const name_tell_start=0}, ${8:&name_tell_find=0}, ${9:key_copy[]=}, ${10:const key_len=0}, ${11:name_copy[]=}, ${12:const name_len=0})" },
		{ "trigger": "nfv_get_vec\tnfvault.inc - 2151", "contents": "nfv_get_vec(${1:const filename[]}, ${2:const key[]}, ${3:name[]}, ${4:Float:data[3]}, ${5:const identifier=';'}, ${6:const key_tell_start=0}, ${7:&key_tell_find=0}, ${8:const name_tell_start=0}, ${9:&name_tell_find=0}, ${10:key_copy[]=}, ${11:const key_len=0}, ${12:name_copy[]=}, ${13:const name_len=0})" },
		{ "trigger": "nfv_player_file\tnfvault.inc - 2951", "contents": "nfv_player_file(${1:const id})" },
		{ "trigger": "nfv_prune\tnfvault.inc - 2662", "contents": "nfv_prune(${1:const key[]}, ${2:name[]}, ${3:const start=-1}, ${4:const end=-1}, ${5:const identifier=';'})" },
		{ "trigger": "nfv_remove_key\tnfvault.inc - 3188", "contents": "nfv_remove_key(${1:const filename[]}, ${2:const key[]}, ${3:const identifier=';'})" },
		{ "trigger": "nfv_replace_quote\tnfvault.inc - 2870", "contents": "nfv_replace_quote(${1:string[]})" },
		{ "trigger": "nfv_return_quote\tnfvault.inc - 2885", "contents": "nfv_return_quote(${1:string[]})" },
		{ "trigger": "nfv_set_array\tnfvault.inc - 1198", "contents": "nfv_set_array(${1:const filename[]}, ${2:const key[]}, ${3:name[]}, ${4:const any:data[]}, ${5:const array_size}, ${6:const NFV_PROP:nfv_prop=NFV_OVERWRITE}, ${7:const identifier=';'})" },
		{ "trigger": "nfv_set_bool\tnfvault.inc - 804", "contents": "nfv_set_bool(${1:const filename[]}, ${2:const key[]}, ${3:name[]}, ${4:const bool:data}, ${5:const NFV_PROP:nfv_prop=NFV_OVERWRITE}, ${6:const identifier=';'})" },
		{ "trigger": "nfv_set_cellarray\tnfvault.inc - 1341", "contents": "nfv_set_cellarray(${1:const filename[]}, ${2:const key[]}, ${3:name[]}, ${4:const Array:data}, ${5:const NFV_PROP:nfv_prop=NFV_OVERWRITE}, ${6:const identifier=';'})" },
		{ "trigger": "nfv_set_cellarray2\tnfvault.inc - 1485", "contents": "nfv_set_cellarray2(${1:const filename[]}, ${2:const key[]}, ${3:name[]}, ${4:const Array:data}, ${5:const NFV_PROP:nfv_prop=NFV_OVERWRITE}, ${6:const identifier=';'})" },
		{ "trigger": "nfv_set_data\tnfvault.inc - 187", "contents": "nfv_set_data(${1:const filename[]}, ${2:const key[]}, ${3:name[]}, ${4:data[]}, ${5:const NFV_PROP:nfv_prop=NFV_OVERWRITE}, ${6:const identifier=';'})" },
		{ "trigger": "nfv_set_float\tnfvault.inc - 561", "contents": "nfv_set_float(${1:const filename[]}, ${2:const key[]}, ${3:name[]}, ${4:const Float:data}, ${5:const NFV_PROP:nfv_prop=NFV_OVERWRITE}, ${6:const identifier=';'})" },
		{ "trigger": "nfv_set_num\tnfvault.inc - 318", "contents": "nfv_set_num(${1:const filename[]}, ${2:const key[]}, ${3:name[]}, ${4:const data}, ${5:const NFV_PROP:nfv_prop=NFV_OVERWRITE}, ${6:const identifier=';'})" },
		{ "trigger": "nfv_set_vec\tnfvault.inc - 1064", "contents": "nfv_set_vec(${1:const filename[]}, ${2:const key[]}, ${3:name[]}, ${4:const Float:data[3]}, ${5:const NFV_PROP:nfv_prop=NFV_OVERWRITE}, ${6:const identifier=';'})" },
		{ "trigger": "nfv_string_clean\tnfvault.inc - 2834", "contents": "nfv_string_clean(${1:const string[]}, ${2:output[]}, ${3:len})" },
		{ "trigger": "nfv_switch_keys\tnfvault.inc - 3100", "contents": "nfv_switch_keys(${1:const filename[]}, ${2:const key1[]}, ${3:const key2[]}, ${4:const identifier=';'})" },
		{ "trigger": "nfv_take_data\tnfvault.inc - 2451", "contents": "nfv_take_data(${1:const filename[]}, ${2:const key[]}, ${3:name[]}, ${4:data[]=}, ${5:len=0}, ${6:const take_times=1}, ${7:const identifier=';'}, ${8:name_copy[]=}, ${9:const name_len=0})" },
		{ "trigger": "nfv_touch\tnfvault.inc - 2705", "contents": "nfv_touch(${1:const filename[]}, ${2:const new_time=-1})" },
		{ "trigger": "nfv_xor_bool\tnfvault.inc - 945", "contents": "nfv_xor_bool(${1:const filename[]}, ${2:const key[]}, ${3:name[]}, ${4:const NFV_PROP:nfv_prop=NFV_OVERWRITE}, ${5:const identifier=';'})" },
		{ "trigger": "ns2amx_getammo\tns2amx.inc - 190", "contents": "ns2amx_getammo(${1:id}, ${2:Weapon})" },
		{ "trigger": "ns2amx_getenergy\tns2amx.inc - 231", "contents": "ns2amx_getenergy(${1:id})" },
		{ "trigger": "ns2amx_gethives\tns2amx.inc - 211", "contents": "ns2amx_gethives()" },
		{ "trigger": "ns2amx_getjpfuel\tns2amx.inc - 237", "contents": "ns2amx_getjpfuel(${1:id})" },
		{ "trigger": "ns2amx_giveitem\tns2amx.inc - 196", "contents": "ns2amx_giveitem(${1:id}, ${2:svClassname[]})" },
		{ "trigger": "ns2amx_inrange\tns2amx.inc - 215", "contents": "ns2amx_inrange(${1:ida}, ${2:idb}, ${3:range})" },
		{ "trigger": "ns2amx_isdigesting\tns2amx.inc - 207", "contents": "ns2amx_isdigesting(${1:id})" },
		{ "trigger": "ns2amx_moveto\tns2amx.inc - 199", "contents": "ns2amx_moveto(${1:idMoved}, ${2:idDest})" },
		{ "trigger": "ns2amx_nspopup\tns2amx.inc - 222", "contents": "ns2amx_nspopup(${1:id}, ${2:svMessage[190]})" },
		{ "trigger": "ns2amx_setammo\tns2amx.inc - 193", "contents": "ns2amx_setammo(${1:id}, ${2:Weapon}, ${3:Value})" },
		{ "trigger": "ns2amx_setenergy\tns2amx.inc - 234", "contents": "ns2amx_setenergy(${1:id}, ${2:energy})" },
		{ "trigger": "ns2amx_setjpfuel\tns2amx.inc - 240", "contents": "ns2amx_setjpfuel(${1:id}, ${2:fuel})" },
		{ "trigger": "ns2amx_setres\tns2amx.inc - 228", "contents": "ns2amx_setres(${1:id}, ${2:value})" },
		{ "trigger": "ns2amx_version\tns2amx.inc - 184", "contents": "ns2amx_version()" },
		{ "trigger": "ns_add_deaths\tns.inc - 472", "contents": "ns_add_deaths(${1:idPlayer}, ${2:numdeaths})" },
		{ "trigger": "ns_add_energy\tns.inc - 238", "contents": "ns_add_energy(${1:id}, ${2:Float:amount})" },
		{ "trigger": "ns_add_exp\tns.inc - 331", "contents": "ns_add_exp(${1:id}, ${2:Float:value})" },
		{ "trigger": "ns_add_jpfuel\tns.inc - 212", "contents": "ns_add_jpfuel(${1:id}, ${2:Float:amount})" },
		{ "trigger": "ns_add_obs_energy\tns.inc - 665", "contents": "ns_add_obs_energy(${1:idObs}, ${2:Float:value})" },
		{ "trigger": "ns_add_points\tns.inc - 357", "contents": "ns_add_points(${1:id}, ${2:points})" },
		{ "trigger": "ns_add_res\tns.inc - 268", "contents": "ns_add_res(${1:id}, ${2:Float:amount})" },
		{ "trigger": "ns_add_score\tns.inc - 461", "contents": "ns_add_score(${1:idPlayer}, ${2:score})" },
		{ "trigger": "ns_add_teamres\tns.inc - 301", "contents": "ns_add_teamres(${1:Team}, ${2:Float:value})" },
		{ "trigger": "ns_add_weld_done\tns.inc - 660", "contents": "ns_add_weld_done(${1:idWeldable}, ${2:Float:value})" },
		{ "trigger": "ns_add_weld_time\tns.inc - 644", "contents": "ns_add_weld_time(${1:idWeldable}, ${2:Float:value})" },
		{ "trigger": "ns_build_structure\tns.inc - 605", "contents": "ns_build_structure(${1:idStructure})" },
		{ "trigger": "ns_create_ps\tns.inc - 699", "contents": "ns_create_ps()" },
		{ "trigger": "ns_finish_weldable\tns.inc - 626", "contents": "ns_finish_weldable(${1:idWeldable})" },
		{ "trigger": "ns_fire_ps\tns.inc - 726", "contents": "ns_fire_ps(${1:Particle:system}, ${2:const Float:origin[3]}, ${3:const Float:angles[3]={0.0}, ${4:0.0}, ${5:0.0}}, ${6:flags=0})" },
		{ "trigger": "ns_get_build\tns.inc - 165", "contents": "ns_get_build(${1:const classname[]}, ${2:builtOnly=1}, ${3:Number=0})" },
		{ "trigger": "ns_get_class\tns.inc - 186", "contents": "ns_get_class(${1:id})" },
		{ "trigger": "ns_get_deaths\tns.inc - 464", "contents": "ns_get_deaths(${1:idPlayer})" },
		{ "trigger": "ns_get_energy\tns.inc - 220", "contents": "ns_get_energy(${1:id})" },
		{ "trigger": "ns_get_exp\tns.inc - 311", "contents": "ns_get_exp(${1:id})" },
		{ "trigger": "ns_get_gameplay\tns.inc - 65", "contents": "ns_get_gameplay()" },
		{ "trigger": "ns_get_hive_ability\tns.inc - 507", "contents": "ns_get_hive_ability(${1:idPlayer}, ${2:ability=0})" },
		{ "trigger": "ns_get_hive_trait\tns.inc - 481", "contents": "ns_get_hive_trait(${1:idHive})" },
		{ "trigger": "ns_get_jpfuel\tns.inc - 194", "contents": "ns_get_jpfuel(${1:id})" },
		{ "trigger": "ns_get_locationname\tns.inc - 593", "contents": "ns_get_locationname(${1:Float:x}, ${2:Float:y}, ${3:name[]}, ${4:len}, ${5:titlelookup=0})" },
		{ "trigger": "ns_get_mask\tns.inc - 148", "contents": "ns_get_mask(${1:id}, ${2:mask})" },
		{ "trigger": "ns_get_maxspeed\tns.inc - 145", "contents": "ns_get_maxspeed(${1:id})" },
		{ "trigger": "ns_get_obs_energy\tns.inc - 663", "contents": "ns_get_obs_energy(${1:idObs})" },
		{ "trigger": "ns_get_points\tns.inc - 339", "contents": "ns_get_points(${1:id})" },
		{ "trigger": "ns_get_ps_id\tns.inc - 731", "contents": "ns_get_ps_id(${1:const Name[]})" },
		{ "trigger": "ns_get_res\tns.inc - 248", "contents": "ns_get_res(${1:id})" },
		{ "trigger": "ns_get_score\tns.inc - 446", "contents": "ns_get_score(${1:idPlayer})" },
		{ "trigger": "ns_get_spawn\tns.inc - 183", "contents": "ns_get_spawn(${1:team}, ${2:number=0}, ${3:Float:ret[3]})" },
		{ "trigger": "ns_get_speedchange\tns.inc - 137", "contents": "ns_get_speedchange(${1:id})" },
		{ "trigger": "ns_get_struct_owner\tns.inc - 475", "contents": "ns_get_struct_owner(${1:idStructsure})" },
		{ "trigger": "ns_get_teamres\tns.inc - 277", "contents": "ns_get_teamres(${1:Team})" },
		{ "trigger": "ns_get_user_team\tns.inc - 75", "contents": "ns_get_user_team(${1:id}, ${2:buff[]}, ${3:len})" },
		{ "trigger": "ns_get_weap_clip\tns.inc - 404", "contents": "ns_get_weap_clip(${1:idWeapon})" },
		{ "trigger": "ns_get_weap_dmg\tns.inc - 366", "contents": "ns_get_weap_dmg(${1:idWeapon})" },
		{ "trigger": "ns_get_weap_range\tns.inc - 385", "contents": "ns_get_weap_range(${1:idWeapon})" },
		{ "trigger": "ns_get_weap_reserve\tns.inc - 425", "contents": "ns_get_weap_reserve(${1:id}, ${2:weapon})" },
		{ "trigger": "ns_get_weapon\tns.inc - 579", "contents": "ns_get_weapon(${1:idPlayer}, ${2:weaponid}, ${3:&weapontype=0})" },
		{ "trigger": "ns_get_weld_done\tns.inc - 649", "contents": "ns_get_weld_done(${1:idWeldable})" },
		{ "trigger": "ns_get_weld_time\tns.inc - 633", "contents": "ns_get_weld_time(${1:idWeldable})" },
		{ "trigger": "ns_give_item\tns.inc - 496", "contents": "ns_give_item(${1:id}, ${2:const class[]})" },
		{ "trigger": "ns_has_weapon\tns.inc - 169", "contents": "ns_has_weapon(${1:id}, ${2:weapon}, ${3:setweapon=-1})" },
		{ "trigger": "ns_is_combat\tns.inc - 53", "contents": "ns_is_combat()" },
		{ "trigger": "ns_lookup_title\tns.inc - 599", "contents": "ns_lookup_title(${1:const KeyName[]}, ${2:Output[]}, ${3:length})" },
		{ "trigger": "ns_popup\tns.inc - 85", "contents": "ns_popup(${1:target}, ${2:const szMsg[180]}, ${3:ah=0})" },
		{ "trigger": "ns_recycle\tns.inc - 614", "contents": "ns_recycle(${1:idStructure})" },
		{ "trigger": "ns_remove_upgrade\tns.inc - 681", "contents": "ns_remove_upgrade(${1:idPlayer}, ${2:upgrade})" },
		{ "trigger": "ns_round_in_progress\tns.inc - 560", "contents": "ns_round_in_progress()" },
		{ "trigger": "ns_set_deaths\tns.inc - 467", "contents": "ns_set_deaths(${1:idPlayer}, ${2:numdeaths})" },
		{ "trigger": "ns_set_energy\tns.inc - 229", "contents": "ns_set_energy(${1:id}, ${2:Float:energy})" },
		{ "trigger": "ns_set_exp\tns.inc - 321", "contents": "ns_set_exp(${1:id}, ${2:Float:exp})" },
		{ "trigger": "ns_set_fov\tns.inc - 487", "contents": "ns_set_fov(${1:idPlayer}, ${2:Float:_fov=0.0})" },
		{ "trigger": "ns_set_hive_trait\tns.inc - 484", "contents": "ns_set_hive_trait(${1:idHive}, ${2:trait})" },
		{ "trigger": "ns_set_jpfuel\tns.inc - 203", "contents": "ns_set_jpfuel(${1:id}, ${2:Float:fuel})" },
		{ "trigger": "ns_set_mask\tns.inc - 151", "contents": "ns_set_mask(${1:id}, ${2:mask}, ${3:value})" },
		{ "trigger": "ns_set_obs_energy\tns.inc - 664", "contents": "ns_set_obs_energy(${1:idObs}, ${2:Float:value})" },
		{ "trigger": "ns_set_player_body\tns.inc - 118", "contents": "ns_set_player_body(${1:id}, ${2:body=-1})" },
		{ "trigger": "ns_set_player_model\tns.inc - 96", "contents": "ns_set_player_model(${1:id}, ${2:const szModel[]=\"\"})" },
		{ "trigger": "ns_set_player_skin\tns.inc - 107", "contents": "ns_set_player_skin(${1:id}, ${2:skin=-1})" },
		{ "trigger": "ns_set_points\tns.inc - 348", "contents": "ns_set_points(${1:id}, ${2:points})" },
		{ "trigger": "ns_set_ps_anim_speed\tns.inc - 749", "contents": "ns_set_ps_anim_speed(${1:RawPS:system}, ${2:speed})" },
		{ "trigger": "ns_set_ps_base_color\tns.inc - 751", "contents": "ns_set_ps_base_color(${1:RawPS:system}, ${2:const colors[]})" },
		{ "trigger": "ns_set_ps_genrate\tns.inc - 737", "contents": "ns_set_ps_genrate(${1:RawPS:system}, ${2:genrate})" },
		{ "trigger": "ns_set_ps_genshape\tns.inc - 738", "contents": "ns_set_ps_genshape(${1:RawPS:system}, ${2:NSPS_GenShape:genshape})" },
		{ "trigger": "ns_set_ps_genshape_params\tns.inc - 739", "contents": "ns_set_ps_genshape_params(${1:RawPS:system}, ${2:const params[]})" },
		{ "trigger": "ns_set_ps_max_alpha\tns.inc - 753", "contents": "ns_set_ps_max_alpha(${1:RawPS:system}, ${2:Float:maxalpha})" },
		{ "trigger": "ns_set_ps_name\tns.inc - 707", "contents": "ns_set_ps_name(${1:RawPS:system}, ${2:const name[]})" },
		{ "trigger": "ns_set_ps_numparticles\tns.inc - 741", "contents": "ns_set_ps_numparticles(${1:RawPS:system}, ${2:numparticles})" },
		{ "trigger": "ns_set_ps_particle_life\tns.inc - 746", "contents": "ns_set_ps_particle_life(${1:RawPS:system}, ${2:Float:lifetime})" },
		{ "trigger": "ns_set_ps_rendermode\tns.inc - 747", "contents": "ns_set_ps_rendermode(${1:RawPS:system}, ${2:NSPS_RenderMode:rendermode})" },
		{ "trigger": "ns_set_ps_scale\tns.inc - 752", "contents": "ns_set_ps_scale(${1:RawPS:system}, ${2:Float:scale})" },
		{ "trigger": "ns_set_ps_size\tns.inc - 742", "contents": "ns_set_ps_size(${1:RawPS:system}, ${2:Float:size})" },
		{ "trigger": "ns_set_ps_spawn_flags\tns.inc - 750", "contents": "ns_set_ps_spawn_flags(${1:RawPS:system}, ${2:NSPS_Flags:flags})" },
		{ "trigger": "ns_set_ps_sprite\tns.inc - 715", "contents": "ns_set_ps_sprite(${1:RawPS:system}, ${2:const sprite[]})" },
		{ "trigger": "ns_set_ps_spriteframes\tns.inc - 740", "contents": "ns_set_ps_spriteframes(${1:RawPS:system}, ${2:spriteframes})" },
		{ "trigger": "ns_set_ps_sys_life\tns.inc - 745", "contents": "ns_set_ps_sys_life(${1:RawPS:system}, ${2:Float:lifetime})" },
		{ "trigger": "ns_set_ps_to_gen\tns.inc - 748", "contents": "ns_set_ps_to_gen(${1:RawPS:system}, ${2:const name[]})" },
		{ "trigger": "ns_set_ps_vel_params\tns.inc - 743", "contents": "ns_set_ps_vel_params(${1:RawPS:system}, ${2:const params[]})" },
		{ "trigger": "ns_set_ps_vel_shape\tns.inc - 744", "contents": "ns_set_ps_vel_shape(${1:RawPS:system}, ${2:NSPS_VelShape:shape})" },
		{ "trigger": "ns_set_res\tns.inc - 258", "contents": "ns_set_res(${1:id}, ${2:Float:res})" },
		{ "trigger": "ns_set_score\tns.inc - 456", "contents": "ns_set_score(${1:idPlayer}, ${2:score})" },
		{ "trigger": "ns_set_speedchange\tns.inc - 129", "contents": "ns_set_speedchange(${1:id}, ${2:speedchange=0})" },
		{ "trigger": "ns_set_struct_owner\tns.inc - 478", "contents": "ns_set_struct_owner(${1:idStructure}, ${2:indexOwner})" },
		{ "trigger": "ns_set_teamres\tns.inc - 289", "contents": "ns_set_teamres(${1:Team}, ${2:Float:value})" },
		{ "trigger": "ns_set_weap_clip\tns.inc - 414", "contents": "ns_set_weap_clip(${1:idWeapon}, ${2:clipsize})" },
		{ "trigger": "ns_set_weap_dmg\tns.inc - 376", "contents": "ns_set_weap_dmg(${1:idWeapon}, ${2:Float:damage})" },
		{ "trigger": "ns_set_weap_range\tns.inc - 395", "contents": "ns_set_weap_range(${1:idWeapon}, ${2:Float:range})" },
		{ "trigger": "ns_set_weap_reserve\tns.inc - 437", "contents": "ns_set_weap_reserve(${1:id}, ${2:weapon}, ${3:ammo})" },
		{ "trigger": "ns_set_weld_done\tns.inc - 654", "contents": "ns_set_weld_done(${1:idWeldable}, ${2:Float:value})" },
		{ "trigger": "ns_set_weld_time\tns.inc - 638", "contents": "ns_set_weld_time(${1:idWeldable}, ${2:Float:value})" },
		{ "trigger": "ns_spawn_ps\tns.inc - 720", "contents": "ns_spawn_ps(${1:RawPS:system})" },
		{ "trigger": "ns_takedamage\tns.inc - 540", "contents": "ns_takedamage(${1:IDVictim}, ${2:IDInflictor}, ${3:IDAttacker}, ${4:Float:Damage}, ${5:DamageType})" },
		{ "trigger": "ns_unstick_player\tns.inc - 553", "contents": "ns_unstick_player(${1:id}, ${2:StartDistance=32}, ${3:MaxAttempts=128})" },
		{ "trigger": "nst_alien\tnsteam.inc - 137", "contents": "nst_alien(${1:id})" },
		{ "trigger": "nst_alien_count\tnsteam.inc - 217", "contents": "nst_alien_count()" },
		{ "trigger": "nst_bot_use_weapons\tnst_wpn.inc - 102", "contents": "nst_bot_use_weapons()" },
		{ "trigger": "nst_color_saytext\tnst_wpn.inc - 114", "contents": "nst_color_saytext(${1:player}, ${2:const message[]}, ${3:any:...})" },
		{ "trigger": "nst_create_user_sound_bhit\tnst_player.inc - 29", "contents": "nst_create_user_sound_bhit(${1:id})" },
		{ "trigger": "nst_get_alien\tnsteam.inc - 318", "contents": "nst_get_alien()" },
		{ "trigger": "nst_get_marine\tnsteam.inc - 295", "contents": "nst_get_marine()" },
		{ "trigger": "nst_get_mod_runing\tnst_wpn.inc - 108", "contents": "nst_get_mod_runing()" },
		{ "trigger": "nst_get_readyroom\tnsteam.inc - 249", "contents": "nst_get_readyroom()" },
		{ "trigger": "nst_get_spectate\tnsteam.inc - 272", "contents": "nst_get_spectate()" },
		{ "trigger": "nst_get_user_buyzone\tnst_wpn.inc - 111", "contents": "nst_get_user_buyzone(${1:id})" },
		{ "trigger": "nst_get_user_hand\tnst_player.inc - 23", "contents": "nst_get_user_hand(${1:id})" },
		{ "trigger": "nst_get_user_sex\tnst_player.inc - 2", "contents": "nst_get_user_sex(${1:id})" },
		{ "trigger": "nst_get_user_team\tnst_player.inc - 8", "contents": "nst_get_user_team(${1:id})" },
		{ "trigger": "nst_get_weapon_type\tnst_wpn.inc - 99", "contents": "nst_get_weapon_type(${1:weapon_id})" },
		{ "trigger": "nst_is_alien\tnsteam.inc - 65", "contents": "nst_is_alien(${1:id})" },
		{ "trigger": "nst_is_marine\tnsteam.inc - 52", "contents": "nst_is_marine(${1:id})" },
		{ "trigger": "nst_is_readyroom\tnsteam.inc - 26", "contents": "nst_is_readyroom(${1:id})" },
		{ "trigger": "nst_is_spectate\tnsteam.inc - 39", "contents": "nst_is_spectate(${1:id})" },
		{ "trigger": "nst_is_user_admin\tnst_wpn.inc - 120", "contents": "nst_is_user_admin(${1:id})" },
		{ "trigger": "nst_marine\tnsteam.inc - 120", "contents": "nst_marine(${1:id})" },
		{ "trigger": "nst_marine_count\tnsteam.inc - 198", "contents": "nst_marine_count()" },
		{ "trigger": "nst_readyroom\tnsteam.inc - 83", "contents": "nst_readyroom(${1:id})" },
		{ "trigger": "nst_readyroom_count\tnsteam.inc - 160", "contents": "nst_readyroom_count()" },
		{ "trigger": "nst_readyroomall\tnsteam.inc - 95", "contents": "nst_readyroomall()" },
		{ "trigger": "nst_reset_user_model\tnst_player.inc - 11", "contents": "nst_reset_user_model(${1:id})" },
		{ "trigger": "nst_reset_user_model_index\tnst_player.inc - 20", "contents": "nst_reset_user_model_index(${1:id})" },
		{ "trigger": "nst_scn_bot_spawn\tnst_scenario.inc - 18", "contents": "nst_scn_bot_spawn(${1:bot})" },
		{ "trigger": "nst_scn_get_bot_health\tnst_scenario.inc - 7", "contents": "nst_scn_get_bot_health(${1:bot})" },
		{ "trigger": "nst_scn_get_damage_nade\tnst_scenario.inc - 5", "contents": "nst_scn_get_damage_nade()" },
		{ "trigger": "nst_scn_get_human_takedmg\tnst_scenario.inc - 6", "contents": "nst_scn_get_human_takedmg(${1:human}, ${2:Float:damage})" },
		{ "trigger": "nst_scn_get_weapons_ammo\tnst_scenario.inc - 11", "contents": "nst_scn_get_weapons_ammo(${1:weapon})" },
		{ "trigger": "nst_scn_human_kill_bot\tnst_scenario.inc - 10", "contents": "nst_scn_human_kill_bot(${1:human}, ${2:bot})" },
		{ "trigger": "nst_scn_is_boss\tnst_scenario.inc - 9", "contents": "nst_scn_is_boss(${1:bot})" },
		{ "trigger": "nst_scn_is_bot\tnst_scenario.inc - 8", "contents": "nst_scn_is_bot(${1:bot})" },
		{ "trigger": "nst_set_user_hand\tnst_player.inc - 26", "contents": "nst_set_user_hand(${1:id}, ${2:hand})" },
		{ "trigger": "nst_set_user_model\tnst_player.inc - 14", "contents": "nst_set_user_model(${1:id}, ${2:model[]})" },
		{ "trigger": "nst_set_user_model_index\tnst_player.inc - 17", "contents": "nst_set_user_model_index(${1:id}, ${2:modelindex})" },
		{ "trigger": "nst_set_user_money\tnst_wpn.inc - 117", "contents": "nst_set_user_money(${1:id}, ${2:money})" },
		{ "trigger": "nst_set_user_sex\tnst_player.inc - 5", "contents": "nst_set_user_sex(${1:id}, ${2:sex})" },
		{ "trigger": "nst_spectate\tnsteam.inc - 106", "contents": "nst_spectate(${1:id})" },
		{ "trigger": "nst_spectate_count\tnsteam.inc - 179", "contents": "nst_spectate_count()" },
		{ "trigger": "nst_weapons_stay\tnst_wpn.inc - 105", "contents": "nst_weapons_stay()" },
		{ "trigger": "nst_wpn_free\tnst_wpn.inc - 127", "contents": "nst_wpn_free()" },
		{ "trigger": "nst_wpn_get_canbuy_team_mod\tnst_wpn.inc - 142", "contents": "nst_wpn_get_canbuy_team_mod()" },
		{ "trigger": "nst_wpn_get_fastrunanim_weapon\tnst_wpn.inc - 169", "contents": "nst_wpn_get_fastrunanim_weapon(${1:id}, ${2:type})" },
		{ "trigger": "nst_wpn_get_fastrunanim_weapon1\tnst_wpn.inc - 170", "contents": "nst_wpn_get_fastrunanim_weapon1(${1:id}, ${2:type})" },
		{ "trigger": "nst_wpn_get_fastrunanim_weapon2\tnst_wpn.inc - 171", "contents": "nst_wpn_get_fastrunanim_weapon2(${1:id}, ${2:type})" },
		{ "trigger": "nst_wpn_get_float\tnst_wpn.inc - 179", "contents": "nst_wpn_get_float(${1:id}, ${2:data})" },
		{ "trigger": "nst_wpn_get_float1\tnst_wpn.inc - 180", "contents": "nst_wpn_get_float1(${1:id}, ${2:data})" },
		{ "trigger": "nst_wpn_get_float2\tnst_wpn.inc - 181", "contents": "nst_wpn_get_float2(${1:id}, ${2:data})" },
		{ "trigger": "nst_wpn_get_float3\tnst_wpn.inc - 182", "contents": "nst_wpn_get_float3(${1:id}, ${2:data})" },
		{ "trigger": "nst_wpn_get_float4\tnst_wpn.inc - 183", "contents": "nst_wpn_get_float4(${1:id}, ${2:data})" },
		{ "trigger": "nst_wpn_get_freezetime\tnst_wpn.inc - 145", "contents": "nst_wpn_get_freezetime()" },
		{ "trigger": "nst_wpn_get_int\tnst_wpn.inc - 174", "contents": "nst_wpn_get_int(${1:id}, ${2:data})" },
		{ "trigger": "nst_wpn_get_int1\tnst_wpn.inc - 175", "contents": "nst_wpn_get_int1(${1:id}, ${2:data})" },
		{ "trigger": "nst_wpn_get_int2\tnst_wpn.inc - 176", "contents": "nst_wpn_get_int2(${1:id}, ${2:data})" },
		{ "trigger": "nst_wpn_get_int3\tnst_wpn.inc - 177", "contents": "nst_wpn_get_int3(${1:id}, ${2:data})" },
		{ "trigger": "nst_wpn_get_int4\tnst_wpn.inc - 178", "contents": "nst_wpn_get_int4(${1:id}, ${2:data})" },
		{ "trigger": "nst_wpn_get_mod_has_supplybox\tnst_wpn.inc - 148", "contents": "nst_wpn_get_mod_has_supplybox()" },
		{ "trigger": "nst_wpn_get_sound_attack\tnst_wpn.inc - 133", "contents": "nst_wpn_get_sound_attack()" },
		{ "trigger": "nst_wpn_get_user_fastrun\tnst_wpn.inc - 166", "contents": "nst_wpn_get_user_fastrun(${1:id})" },
		{ "trigger": "nst_wpn_get_user_sight\tnst_wpn.inc - 186", "contents": "nst_wpn_get_user_sight(${1:id})" },
		{ "trigger": "nst_wpn_get_user_sight1\tnst_wpn.inc - 187", "contents": "nst_wpn_get_user_sight1(${1:id})" },
		{ "trigger": "nst_wpn_get_user_sight2\tnst_wpn.inc - 188", "contents": "nst_wpn_get_user_sight2(${1:id})" },
		{ "trigger": "nst_wpn_give_weapon\tnst_wpn.inc - 159", "contents": "nst_wpn_give_weapon(${1:id}, ${2:const weapon[]})" },
		{ "trigger": "nst_wpn_give_weapon1\tnst_wpn.inc - 160", "contents": "nst_wpn_give_weapon1(${1:id}, ${2:const weapon[]})" },
		{ "trigger": "nst_wpn_give_weapon2\tnst_wpn.inc - 161", "contents": "nst_wpn_give_weapon2(${1:id}, ${2:const weapon[]})" },
		{ "trigger": "nst_wpn_give_weapon3\tnst_wpn.inc - 162", "contents": "nst_wpn_give_weapon3(${1:id}, ${2:const weapon[]})" },
		{ "trigger": "nst_wpn_give_weapon4\tnst_wpn.inc - 163", "contents": "nst_wpn_give_weapon4(${1:id}, ${2:const weapon[]})" },
		{ "trigger": "nst_wpn_mywpn\tnst_wpn.inc - 151", "contents": "nst_wpn_mywpn()" },
		{ "trigger": "nst_wpn_send_weapon_anim\tnst_wpn.inc - 130", "contents": "nst_wpn_send_weapon_anim(${1:player}, ${2:anim})" },
		{ "trigger": "nst_wpn_set_fullammo\tnst_wpn.inc - 154", "contents": "nst_wpn_set_fullammo(${1:id})" },
		{ "trigger": "nst_wpn_set_fullammo1\tnst_wpn.inc - 155", "contents": "nst_wpn_set_fullammo1(${1:id})" },
		{ "trigger": "nst_wpn_set_fullammo2\tnst_wpn.inc - 156", "contents": "nst_wpn_set_fullammo2(${1:id})" },
		{ "trigger": "nst_wpn_show_weaponpickup\tnst_wpn.inc - 136", "contents": "nst_wpn_show_weaponpickup(${1:id}, ${2:const weapon[]})" },
		{ "trigger": "nst_wpn_take_damage\tnst_wpn.inc - 139", "contents": "nst_wpn_take_damage(${1:attacker}, ${2:victim}, ${3:Float:damage}, ${4:damage_type})" },
		{ "trigger": "nst_wpn_weapon_draw\tnst_wpn.inc - 196", "contents": "nst_wpn_weapon_draw(${1:id})" },
		{ "trigger": "nst_zb3_register_zombie_class\tnst_zombie.inc - 70", "contents": "nst_zb3_register_zombie_class(${1:const name[]}, ${2:const model[]}, ${3:Float:gravity}, ${4:Float:speed}, ${5:Float:knockback}, ${6:const sound_death1[]}, ${7:const sound_death2[]}, ${8:const sound_hurt1[]}, ${9:const sound_hurt2[]}, ${10:const sound_heal[]}, ${11:const sound_evolution[]}, ${12:sex}, ${13:modelindex})" },
		{ "trigger": "nst_zb_color_saytext\tnst_zombie.inc - 49", "contents": "nst_zb_color_saytext(${1:player}, ${2:const message[]}, ${3:any:...})" },
		{ "trigger": "nst_zb_get_damage_nade\tnst_zombie.inc - 67", "contents": "nst_zb_get_damage_nade()" },
		{ "trigger": "nst_zb_get_maxlevel_human\tnst_zombie.inc - 52", "contents": "nst_zb_get_maxlevel_human()" },
		{ "trigger": "nst_zb_get_mod\tnst_zombie.inc - 19", "contents": "nst_zb_get_mod()" },
		{ "trigger": "nst_zb_get_take_damage\tnst_zombie.inc - 64", "contents": "nst_zb_get_take_damage()" },
		{ "trigger": "nst_zb_get_user_damage_attack\tnst_zombie.inc - 58", "contents": "nst_zb_get_user_damage_attack(${1:id})" },
		{ "trigger": "nst_zb_get_user_hero\tnst_zombie.inc - 31", "contents": "nst_zb_get_user_hero(${1:id})" },
		{ "trigger": "nst_zb_get_user_level\tnst_zombie.inc - 25", "contents": "nst_zb_get_user_level(${1:id})" },
		{ "trigger": "nst_zb_get_user_sex\tnst_zombie.inc - 37", "contents": "nst_zb_get_user_sex(${1:id})" },
		{ "trigger": "nst_zb_get_user_start_health\tnst_zombie.inc - 34", "contents": "nst_zb_get_user_start_health(${1:id})" },
		{ "trigger": "nst_zb_get_user_zombie\tnst_zombie.inc - 22", "contents": "nst_zb_get_user_zombie(${1:id})" },
		{ "trigger": "nst_zb_get_user_zombie_class\tnst_zombie.inc - 28", "contents": "nst_zb_get_user_zombie_class(${1:id})" },
		{ "trigger": "nst_zb_get_weapons_ammo\tnst_zombie.inc - 55", "contents": "nst_zb_get_weapons_ammo(${1:idwpn})" },
		{ "trigger": "nst_zb_human_damage\tnst_zombie.inc - 84", "contents": "nst_zb_human_damage(${1:attacker}, ${2:damage}, ${3:type})" },
		{ "trigger": "nst_zb_human_kill_zombie\tnst_zombie.inc - 46", "contents": "nst_zb_human_kill_zombie(${1:killer}, ${2:victim}, ${3:headshot})" },
		{ "trigger": "nst_zb_remove_weapons_newround\tnst_zombie.inc - 43", "contents": "nst_zb_remove_weapons_newround()" },
		{ "trigger": "nst_zb_set_user_damage_attack\tnst_zombie.inc - 61", "contents": "nst_zb_set_user_damage_attack(${1:id}, ${2:damage})" },
		{ "trigger": "nst_zb_user_infected\tnst_zombie.inc - 92", "contents": "nst_zb_user_infected(${1:id}, ${2:infector})" },
		{ "trigger": "nst_zb_zombie_respawn\tnst_zombie.inc - 40", "contents": "nst_zb_zombie_respawn(${1:id})" },
		{ "trigger": "nst_zbs_register_zombie_class\tnst_zombie.inc - 76", "contents": "nst_zbs_register_zombie_class(${1:const name[]}, ${2:const model[]}, ${3:health}, ${4:Float:gravity}, ${5:Float:speed}, ${6:Float:knockback}, ${7:const sound_death1[]}, ${8:const sound_death2[]}, ${9:const sound_hurt1[]}, ${10:const sound_hurt2[]}, ${11:const sound_heal[]}, ${12:sex}, ${13:modelindex}, ${14:boss})" },
		{ "trigger": "nst_zbu_register_zombie_class\tnst_zombie.inc - 73", "contents": "nst_zbu_register_zombie_class(${1:const name[]}, ${2:const model[]}, ${3:health}, ${4:Float:gravity}, ${5:Float:speed}, ${6:Float:knockback}, ${7:const sound_death1[]}, ${8:const sound_death2[]}, ${9:const sound_hurt1[]}, ${10:const sound_hurt2[]}, ${11:const sound_heal[]}, ${12:sex}, ${13:modelindex})" },
		{ "trigger": "num_to_binstr\tboolean.inc - 47", "contents": "num_to_binstr(${1:num}, ${2:dest[]}, ${3:len=32})" },
		{ "trigger": "num_to_hexstr\tboolean.inc - 64", "contents": "num_to_hexstr(${1:num}, ${2:dest[]}, ${3:len=4})" },
		{ "trigger": "num_to_str\tstring.inc - 76", "contents": "num_to_str(${1:num}, ${2:string[]}, ${3:len})" },
		{ "trigger": "num_to_word\tamxmodx.inc - 253", "contents": "num_to_word(${1:num}, ${2:output[]}, ${3:len})" },
		{ "trigger": "numargs\tcore.inc - 17", "contents": "numargs()" },
		{ "trigger": "numtostr\tamxmod.inc - 49", "contents": "numtostr(${1:num}, ${2:string[]}, ${3:len})" },
		{ "trigger": "nvault_close\tnvault.inc - 51", "contents": "nvault_close(${1:vault})" },
		{ "trigger": "nvault_get\tnvault.inc - 32", "contents": "nvault_get(${1:vault}, ${2:const key[]}, ${3:{Float}, ${4:_}:...})" },
		{ "trigger": "nvault_lookup\tnvault.inc - 37", "contents": "nvault_lookup(${1:vault}, ${2:const key[]}, ${3:value[]}, ${4:maxlen}, ${5:&timestamp})" },
		{ "trigger": "nvault_open\tnvault.inc - 27", "contents": "nvault_open(${1:const name[]})" },
		{ "trigger": "nvault_prune\tnvault.inc - 48", "contents": "nvault_prune(${1:vault}, ${2:start}, ${3:end})" },
		{ "trigger": "nvault_pset\tnvault.inc - 43", "contents": "nvault_pset(${1:vault}, ${2:const key[]}, ${3:const value[]})" },
		{ "trigger": "nvault_remove\tnvault.inc - 54", "contents": "nvault_remove(${1:vault}, ${2:const key[]})" },
		{ "trigger": "nvault_set\tnvault.inc - 40", "contents": "nvault_set(${1:vault}, ${2:const key[]}, ${3:const value[]})" },
		{ "trigger": "nvault_touch\tnvault.inc - 61", "contents": "nvault_touch(${1:vault}, ${2:const key[]}, ${3:timestamp=-1})" },
		{ "trigger": "nvault_util_close\tnvault_util.inc - 39", "contents": "nvault_util_close(${1:iVaultHandle})" },
		{ "trigger": "nvault_util_count\tnvault_util.inc - 44", "contents": "nvault_util_count(${1:iVaultHandle})" },
		{ "trigger": "nvault_util_open\tnvault_util.inc - 30", "contents": "nvault_util_open(${1:const szVault[]})" },
		{ "trigger": "nvault_util_pos\tnvault_util.inc - 98", "contents": "nvault_util_pos(${1:iVaultHandle})" },
		{ "trigger": "nvault_util_read\tnvault_util.inc - 54", "contents": "nvault_util_read(${1:iVaultHandle}, ${2:iOffset}, ${3:szKey[]}, ${4:iKeySize}, ${5:szVal[]}, ${6:iValSize}, ${7:&iTimeStamp})" },
		{ "trigger": "nvault_util_readall\tnvault_util.inc - 78", "contents": "nvault_util_readall(${1:iVaultHandle}, ${2:const szForwardFunc[]}, ${3:Data[] = {0}}, ${4:iSize=0})" },
		{ "trigger": "objective_get_data\tdodfun.inc - 128", "contents": "objective_get_data(${1:index}, ${2:CP_VALUE:key}, ${3:szValue[]=}, ${4:len=0})" },
		{ "trigger": "objective_set_data\tdodfun.inc - 131", "contents": "objective_set_data(${1:index}, ${2:CP_VALUE:key}, ${3:iValue=-1}, ${4:const szValue[]=\"\"})" },
		{ "trigger": "objectives_get_num\tdodfun.inc - 121", "contents": "objectives_get_num()" },
		{ "trigger": "objectives_reinit\tdodfun.inc - 125", "contents": "objectives_reinit(${1:player=0})" },
		{ "trigger": "open_dir\tfile.inc - 115", "contents": "open_dir(${1:dir[]}, ${2:firstfile[]}, ${3:length})" },
		{ "trigger": "p\tddimension.inc - 52", "contents": "p(${1:1%})" },
		{ "trigger": "pack_color\tdhudmessage.inc - 22", "contents": "pack_color(${1:%1}, ${2:%2}, ${3:%3})" },
		{ "trigger": "param_convert\tamxmodx.inc - 780", "contents": "param_convert(${1:num})" },
		{ "trigger": "parse\tstring.inc - 111", "contents": "parse(${1:const text[]}, ${2:...})" },
		{ "trigger": "parse_loguser\tamxmodx.inc - 175", "contents": "parse_loguser(${1:const text[]}, ${2:name[]}, ${3:nlen}, ${4:&userid = -2}, ${5:authid[] = \"\"}, ${6:alen = 0}, ${7:team[]=}, ${8:tlen=0})" },
		{ "trigger": "parse_time\tamxmodx.inc - 450", "contents": "parse_time(${1:const input[]}, ${2:const format[]}, ${3:time = -1})" },
		{ "trigger": "pause\tamxmodx.inc - 652", "contents": "pause(${1:const flag[]}, ${2:const param1[]=\"\"}, ${3:const param2[]=\"\"})" },
		{ "trigger": "pev\tfakemeta.inc - 41", "contents": "pev(${1:_index}, ${2:_value}, ${3:any:...\"\"})" },
		{ "trigger": "pev_f\tns2amx.inc - 105", "contents": "pev_f(${1:_index}, ${2:_field})" },
		{ "trigger": "pev_i\tns2amx.inc - 99", "contents": "pev_i(${1:_index}, ${2:_field})" },
		{ "trigger": "pev_serial\tfakemeta.inc - 88", "contents": "pev_serial(${1:entindex})" },
		{ "trigger": "pev_valid\tfakemeta.inc - 78", "contents": "pev_valid(${1:entindex})" },
		{ "trigger": "pfn_keyvalue\tengine.inc - 226", "contents": "pfn_keyvalue(${1:entid})" },
		{ "trigger": "pfn_playbackevent\tengine.inc - 223", "contents": "pfn_playbackevent(${1:flags}, ${2:entid}, ${3:eventid}, ${4:Float:delay}, ${5:Float:Origin[3]}, ${6:Float:Angles[3]}, ${7:Float:fparam1}, ${8:Float:fparam2}, ${9:iparam1}, ${10:iparam2}, ${11:bparam1}, ${12:bparam2})" },
		{ "trigger": "pfn_spawn\tengine.inc - 229", "contents": "pfn_spawn(${1:entid})" },
		{ "trigger": "pfn_think\tengine.inc - 220", "contents": "pfn_think(${1:entid})" },
		{ "trigger": "pfn_touch\tengine.inc - 204", "contents": "pfn_touch(${1:ptr}, ${2:ptd})" },
		{ "trigger": "playback_event\tengine.inc - 182", "contents": "playback_event(${1:flags}, ${2:invoker}, ${3:eventindex}, ${4:Float:delay}, ${5:const Float:origin[3]}, ${6:const Float:angles[3]}, ${7:Float:fparam1}, ${8:Float:fparam2}, ${9:iparam1}, ${10:iparam2}, ${11:bparam1}, ${12:bparam2})" },
		{ "trigger": "player_add_float\tnfvault.inc - 3032", "contents": "player_add_float(${1:const id}, ${2:const key[]}, ${3:name[]}, ${4:const Float:data}, ${5:const NFV_PROP:nfv_prop=NFV_OVERWRITE}, ${6:const identifier=';'})" },
		{ "trigger": "player_add_num\tnfvault.inc - 3004", "contents": "player_add_num(${1:const id}, ${2:const key[]}, ${3:name[]}, ${4:const data}, ${5:const NFV_PROP:nfv_prop=NFV_OVERWRITE}, ${6:const identifier=';'})" },
		{ "trigger": "player_get_data\tnfvault.inc - 3046", "contents": "player_get_data(${1:const id}, ${2:const key[]}, ${3:name[]}, ${4:data[]=}, ${5:len=0}, ${6:const identifier=';'})" },
		{ "trigger": "player_get_float\tnfvault.inc - 3070", "contents": "player_get_float(${1:const id}, ${2:const key[]}, ${3:name[]}, ${4:const identifier=';'})" },
		{ "trigger": "player_get_num\tnfvault.inc - 3058", "contents": "player_get_num(${1:const id}, ${2:const key[]}, ${3:name[]}, ${4:const identifier=';'})" },
		{ "trigger": "player_menu_info\tnewmenus.inc - 217", "contents": "player_menu_info(${1:id}, ${2:&menu}, ${3:&newmenu}, ${4:&menupage=0})" },
		{ "trigger": "player_set_data\tnfvault.inc - 2976", "contents": "player_set_data(${1:const id}, ${2:const key[]}, ${3:name[]}, ${4:data[]}, ${5:const NFV_PROP:nfv_prop=NFV_OVERWRITE}, ${6:const identifier=';'})" },
		{ "trigger": "player_set_float\tnfvault.inc - 3018", "contents": "player_set_float(${1:const id}, ${2:const key[]}, ${3:name[]}, ${4:const Float:data}, ${5:const NFV_PROP:nfv_prop=NFV_OVERWRITE}, ${6:const identifier=';'})" },
		{ "trigger": "player_set_num\tnfvault.inc - 2990", "contents": "player_set_num(${1:const id}, ${2:const key[]}, ${3:name[]}, ${4:const data}, ${5:const NFV_PROP:nfv_prop=NFV_OVERWRITE}, ${6:const identifier=';'})" },
		{ "trigger": "player_take_data\tnfvault.inc - 3085", "contents": "player_take_data(${1:const id}, ${2:const key[]}, ${3:name[]}, ${4:data[]=}, ${5:len=0}, ${6:const take_times=1}, ${7:const identifier=';'})" },
		{ "trigger": "player_to_flag\tboolean.inc - 24", "contents": "player_to_flag(${1:1%})" },
		{ "trigger": "plugin_cfg\tamxmodx.inc - 43", "contents": "plugin_cfg()" },
		{ "trigger": "plugin_end\tamxmodx.inc - 46", "contents": "plugin_end()" },
		{ "trigger": "plugin_flags\tamxmodx.inc - 728", "contents": "plugin_flags(${1:hdr=0}, ${2:plid=-1})" },
		{ "trigger": "plugin_init\tamxmodx.inc - 30", "contents": "plugin_init()" },
		{ "trigger": "plugin_log\tamxmodx.inc - 49", "contents": "plugin_log()" },
		{ "trigger": "plugin_modules\tamxmodx.inc - 734", "contents": "plugin_modules()" },
		{ "trigger": "plugin_natives\tamxmodx.inc - 744", "contents": "plugin_natives()" },
		{ "trigger": "plugin_pause\tamxmodx.inc - 33", "contents": "plugin_pause()" },
		{ "trigger": "plugin_precache\tamxmodx.inc - 52", "contents": "plugin_precache()" },
		{ "trigger": "plugin_unpause\tamxmodx.inc - 36", "contents": "plugin_unpause()" },
		{ "trigger": "point_contents\tengine.inc - 151", "contents": "point_contents(${1:const Float:fCheckAt[3]})" },
		{ "trigger": "power\tcore.inc - 33", "contents": "power(${1:value}, ${2:exponent})" },
		{ "trigger": "precache_event\tengine.inc - 42", "contents": "precache_event(${1:type}, ${2:const Name[]}, ${3:any:...})" },
		{ "trigger": "precache_generic\tamxmodx.inc - 83", "contents": "precache_generic(${1:const szFile[]})" },
		{ "trigger": "precache_model\tamxmodx.inc - 77", "contents": "precache_model(${1:const name[]})" },
		{ "trigger": "precache_sound\tamxmodx.inc - 80", "contents": "precache_sound(${1:const name[]})" },
		{ "trigger": "query_client_cvar\tamxmodx.inc - 814", "contents": "query_client_cvar(${1:id}, ${2:const cvar[]}, ${3:const resultFunc[]}, ${4:paramlen=0}, ${5:const params[] = \"\"})" },
		{ "trigger": "radius_damage\tVexdUM.inc - 24", "contents": "radius_damage(${1:inflictor}, ${2:Float:dmg}, ${3:Float:orig[3]}, ${4:Float:rad}, ${5:bit = DMG_BULLET}, ${6:wpnName[]=\"\"}, ${7:hs = 0})" },
		{ "trigger": "random\tcore.inc - 27", "contents": "random(${1:max})" },
		{ "trigger": "random_float\tamxmodx.inc - 553", "contents": "random_float(${1:Float:a}, ${2:Float:b})" },
		{ "trigger": "random_num\tamxmodx.inc - 556", "contents": "random_num(${1:a}, ${2:b})" },
		{ "trigger": "read_argc\tamxmodx.inc - 345", "contents": "read_argc()" },
		{ "trigger": "read_args\tamxmodx.inc - 342", "contents": "read_args(${1:output[]}, ${2:len})" },
		{ "trigger": "read_argv\tamxmodx.inc - 339", "contents": "read_argv(${1:id}, ${2:output[]}, ${3:len})" },
		{ "trigger": "read_data\tamxmodx.inc - 158", "contents": "read_data(${1:value}, ${2:any:...})" },
		{ "trigger": "read_datanum\tamxmodx.inc - 161", "contents": "read_datanum()" },
		{ "trigger": "read_dir\tfile.inc - 16", "contents": "read_dir(${1:const dirname[]}, ${2:pos}, ${3:output[]}, ${4:len}, ${5:&outlen})" },
		{ "trigger": "read_file\tfile.inc - 19", "contents": "read_file(${1:const file[]}, ${2:line}, ${3:text[]}, ${4:len}, ${5:&txtlen})" },
		{ "trigger": "read_flags\tamxmodx.inc - 349", "contents": "read_flags(${1:const flags[]})" },
		{ "trigger": "read_logargc\tamxmodx.inc - 168", "contents": "read_logargc()" },
		{ "trigger": "read_logargv\tamxmodx.inc - 172", "contents": "read_logargv(${1:id}, ${2:output[]}, ${3:len})" },
		{ "trigger": "read_logdata\tamxmodx.inc - 164", "contents": "read_logdata(${1:output[]}, ${2:len})" },
		{ "trigger": "redirect\txredirect.inc - 6", "contents": "redirect(${1:id}, ${2:nServer}, ${3:bCanDrop})" },
		{ "trigger": "regex_compile\tregex.inc - 53", "contents": "regex_compile(${1:const pattern[]}, ${2:&ret}, ${3:error[]}, ${4:maxLen}, ${5:const flags[]=\"\"})" },
		{ "trigger": "regex_escape\tstring_stocks.inc - 899", "contents": "regex_escape(${1:const string[]}, ${2:output[]}, ${3:output_len})" },
		{ "trigger": "regex_free\tregex.inc - 134", "contents": "regex_free(${1:&Regex:id})" },
		{ "trigger": "regex_match\tregex.inc - 105", "contents": "regex_match(${1:const string[]}, ${2:const pattern[]}, ${3:&ret}, ${4:error[]}, ${5:maxLen}, ${6:const flags[] = \"\"})" },
		{ "trigger": "regex_match_c\tregex.inc - 73", "contents": "regex_match_c(${1:const string[]}, ${2:Regex:pattern}, ${3:&ret})" },
		{ "trigger": "regex_substr\tregex.inc - 118", "contents": "regex_substr(${1:Regex:id}, ${2:str_id}, ${3:buffer[]}, ${4:maxLen})" },
		{ "trigger": "register_changelvl\tns2amx.inc - 64", "contents": "register_changelvl()" },
		{ "trigger": "register_clcmd\tamxmodx.inc - 485", "contents": "register_clcmd(${1:const client_cmd[]}, ${2:const function[]}, ${3:flags=-1}, ${4:const info[]=}, ${5:FlagManager=-1})" },
		{ "trigger": "register_clientkill\tns2amx.inc - 61", "contents": "register_clientkill()" },
		{ "trigger": "register_concmd\tamxmodx.inc - 492", "contents": "register_concmd(${1:const cmd[]}, ${2:const function[]}, ${3:flags=-1}, ${4:const info[]=}, ${5:FlagManager=-1})" },
		{ "trigger": "register_cvar\tamxmodx.inc - 550", "contents": "register_cvar(${1:const name[]}, ${2:const string[]}, ${3:flags = 0}, ${4:Float:fvalue = 0.0})" },
		{ "trigger": "register_dictionary\tlang.inc - 23", "contents": "register_dictionary(${1:const filename[]})" },
		{ "trigger": "register_dictionary_colored\tchatcolor.inc - 27", "contents": "register_dictionary_colored(${1:const filename[]})" },
		{ "trigger": "register_event\tamxmodx.inc - 129", "contents": "register_event(${1:const event[]}, ${2:const function[]}, ${3:const flags[]}, ${4:const cond[]=}, ${5:...})" },
		{ "trigger": "register_forward\tfakemeta.inc - 131", "contents": "register_forward(${1:_forwardType}, ${2:const _function[]}, ${3:_post=0})" },
		{ "trigger": "register_impulse\tengine.inc - 28", "contents": "register_impulse(${1:impulse}, ${2:const function[]})" },
		{ "trigger": "register_keyvalue\tkve.inc - 10", "contents": "register_keyvalue(${1:szClassName[32]}, ${2:szKeyName[64]}, ${3:szFunction[32]})" },
		{ "trigger": "register_library\tamxmodx.inc - 764", "contents": "register_library(${1:const library[]})" },
		{ "trigger": "register_logevent\tamxmodx.inc - 139", "contents": "register_logevent(${1:const function[]}, ${2:argsnum}, ${3:...})" },
		{ "trigger": "register_menu\tamxmisc.inc - 524", "contents": "register_menu(${1:const title[]}, ${2:keys}, ${3:const function[]}, ${4:outside=0})" },
		{ "trigger": "register_menucmd\tamxmodx.inc - 533", "contents": "register_menucmd(${1:menuid}, ${2:keys}, ${3:const function[]})" },
		{ "trigger": "register_menuid\tamxmodx.inc - 530", "contents": "register_menuid(${1:const menu[]}, ${2:outside=0})" },
		{ "trigger": "register_message\tmessages.inc - 60", "contents": "register_message(${1:iMsgId}, ${2:const szFunction[]})" },
		{ "trigger": "register_msgblock\tns2amx.inc - 67", "contents": "register_msgblock(${1:msgName[]})" },
		{ "trigger": "register_msgedit\tns2amx.inc - 70", "contents": "register_msgedit(${1:msgName[]}, ${2:cmd[]})" },
		{ "trigger": "register_native\tamxmodx.inc - 755", "contents": "register_native(${1:const name[]}, ${2:const handler[]}, ${3:style=0})" },
		{ "trigger": "register_playback\tns2amx.inc - 73", "contents": "register_playback(${1:event}, ${2:cmd[]})" },
		{ "trigger": "register_plugin\tamxmodx.inc - 74", "contents": "register_plugin(${1:const plugin_name[]}, ${2:const version[]}, ${3:const author[]})" },
		{ "trigger": "register_srvcmd\tamxmodx.inc - 497", "contents": "register_srvcmd(${1:const server_cmd[]}, ${2:const function[]}, ${3:flags=-1}, ${4:const info[]=\"\"})" },
		{ "trigger": "register_statsfwd\tdodx.inc - 34", "contents": "register_statsfwd(${1:ftype})" },
		{ "trigger": "register_think\tengine.inc - 34", "contents": "register_think(${1:const Classname[]}, ${2:const function[]})" },
		{ "trigger": "register_touch\tengine.inc - 31", "contents": "register_touch(${1:const Touched[]}, ${2:const Toucher[]}, ${3:const function[]})" },
		{ "trigger": "remove_bot\tbot_api.inc - 60", "contents": "remove_bot(${1:id})" },
		{ "trigger": "remove_cvar_flags\tamxmodx.inc - 394", "contents": "remove_cvar_flags(${1:const cvar[]}, ${2:flags = -1})" },
		{ "trigger": "remove_entity\tengine.inc - 123", "contents": "remove_entity(${1:iIndex})" },
		{ "trigger": "remove_entity_name\tengine_stocks.inc - 106", "contents": "remove_entity_name(${1:const eName[]})" },
		{ "trigger": "remove_filepath\tstring.inc - 209", "contents": "remove_filepath(${1:const szFilePath[]}, ${2:szFile[]}, ${3:pMax})" },
		{ "trigger": "remove_quotes\tamxmodx.inc - 372", "contents": "remove_quotes(${1:text[]})" },
		{ "trigger": "remove_task\tamxmodx.inc - 463", "contents": "remove_task(${1:id = 0}, ${2:outside = 0})" },
		{ "trigger": "remove_user_flags\tamxmodx.inc - 478", "contents": "remove_user_flags(${1:index}, ${2:flags=-1}, ${3:id=0})" },
		{ "trigger": "remove_vaultdata\tvault.inc - 23", "contents": "remove_vaultdata(${1:const key[]})" },
		{ "trigger": "rename_file\tfile.inc - 36", "contents": "rename_file(${1:const oldname[]}, ${2:const newname[]}, ${3:relative=0})" },
		{ "trigger": "replace\tstring.inc - 25", "contents": "replace(${1:text[]}, ${2:len}, ${3:const what[]}, ${4:const with[]})" },
		{ "trigger": "replace_all\tstring.inc - 224", "contents": "replace_all(${1:string[]}, ${2:len}, ${3:const what[]}, ${4:const with[]})" },
		{ "trigger": "replace_all_format\ttext.inc - 71", "contents": "replace_all_format(${1:string[]}, ${2:len}, ${3:const format_char}, ${4:const with[]})" },
		{ "trigger": "require_module\tamxmodx.inc - 736", "contents": "require_module(${1:const module[]})" },
		{ "trigger": "reset_user_airaccelerate\tairaccelerate.inc - 49", "contents": "reset_user_airaccelerate(${1:id})" },
		{ "trigger": "reset_user_wstats\tcsstats.inc - 43", "contents": "reset_user_wstats(${1:index})" },
		{ "trigger": "rmdir\tfile.inc - 105", "contents": "rmdir(${1:const path[]})" },
		{ "trigger": "rocket_shoot\tdodfun.inc - 27", "contents": "rocket_shoot(${1:index}, ${2:rocketindex}, ${3:wId})" },
		{ "trigger": "rol\tboolean.inc - 81", "contents": "rol(${1:integer}, ${2:step=1})" },
		{ "trigger": "ror\tboolean.inc - 103", "contents": "ror(${1:integer}, ${2:step=1})" },
		{ "trigger": "round_end\tns.inc - 575", "contents": "round_end(${1:Float:roundtime})" },
		{ "trigger": "round_start\tns.inc - 567", "contents": "round_start()" },
		{ "trigger": "rts_is_authorized\trememberthescore.inc - 56", "contents": "rts_is_authorized(${1:_index})" },
		{ "trigger": "rts_plugin_active\trememberthescore.inc - 36", "contents": "rts_plugin_active()" },
		{ "trigger": "rts_plugin_inactive\trememberthescore.inc - 30", "contents": "rts_plugin_inactive(${1:_type})" },
		{ "trigger": "rts_save_score\trememberthescore.inc - 95", "contents": "rts_save_score(${1:_index})" },
		{ "trigger": "rts_update_score\trememberthescore.inc - 74", "contents": "rts_update_score(${1:_index})" },
		{ "trigger": "rts_user_authorized\trememberthescore.inc - 43", "contents": "rts_user_authorized(${1:_index})" },
		{ "trigger": "save_gun\txen_gunshop.inc - 27", "contents": "save_gun(${1:infostr[]})" },
		{ "trigger": "scomm_receive\tserver_comm.inc - 25", "contents": "scomm_receive(${1:data[]}, ${2:len})" },
		{ "trigger": "scomm_send\tserver_comm.inc - 39", "contents": "scomm_send(${1:const ip[]}, ${2:const data[]})" },
		{ "trigger": "scomm_sendf\tserver_comm.inc - 53", "contents": "scomm_sendf(${1:const ip[]}, ${2:const format[]}, ${3:any:...})" },
		{ "trigger": "scopy\ttext.inc - 24", "contents": "scopy(${1:%1}, ${2:%2})" },
		{ "trigger": "send_dhudMessage\tdhudmessage.inc - 106", "contents": "send_dhudMessage(${1:const index}, ${2:const message[]})" },
		{ "trigger": "sentry_build\tSentryGun_AI.inc - 46", "contents": "sentry_build(${1:Float:origin[3]}, ${2:dropToGround}, ${3:owner}, ${4:team}, ${5:level})" },
		{ "trigger": "sentry_detonate\tSentryGun_AI.inc - 33", "contents": "sentry_detonate(${1:sentry})" },
		{ "trigger": "sentry_getBase\tSentryGun_AI.inc - 57", "contents": "sentry_getBase(${1:ent})" },
		{ "trigger": "sentry_getEnemy\tSentryGun_AI.inc - 61", "contents": "sentry_getEnemy(${1:ent})" },
		{ "trigger": "sentry_getHead\tSentryGun_AI.inc - 55", "contents": "sentry_getHead(${1:ent})" },
		{ "trigger": "sentry_getOwner\tSentryGun_AI.inc - 59", "contents": "sentry_getOwner(${1:ent})" },
		{ "trigger": "sentry_remove\tSentryGun_AI.inc - 30", "contents": "sentry_remove(${1:sentry})" },
		{ "trigger": "sentry_setBase\tSentryGun_AI.inc - 65", "contents": "sentry_setBase(${1:ent}, ${2:base})" },
		{ "trigger": "sentry_setEnemy\tSentryGun_AI.inc - 69", "contents": "sentry_setEnemy(${1:ent}, ${2:enemy})" },
		{ "trigger": "sentry_setHead\tSentryGun_AI.inc - 63", "contents": "sentry_setHead(${1:ent}, ${2:head})" },
		{ "trigger": "sentry_setOwner\tSentryGun_AI.inc - 67", "contents": "sentry_setOwner(${1:ent}, ${2:owner})" },
		{ "trigger": "sentry_sethealth\tSentryGun_AI.inc - 23", "contents": "sentry_sethealth(${1:sentry}, ${2:Float:health})" },
		{ "trigger": "sentry_setlevel\tSentryGun_AI.inc - 39", "contents": "sentry_setlevel(${1:sentry}, ${2:level}, ${3:playsound}, ${4:sethealh})" },
		{ "trigger": "sentry_setorigin\tSentryGun_AI.inc - 27", "contents": "sentry_setorigin(${1:sentry}, ${2:Float:origin[3]})" },
		{ "trigger": "server_changelevel\tamxmodx.inc - 39", "contents": "server_changelevel(${1:map[]})" },
		{ "trigger": "server_cmd\tamxmodx.inc - 384", "contents": "server_cmd(${1:const command[]}, ${2:any:...})" },
		{ "trigger": "server_exec\tamxmodx.inc - 542", "contents": "server_exec()" },
		{ "trigger": "server_frame\tengine.inc - 207", "contents": "server_frame()" },
		{ "trigger": "server_print\tamxmodx.inc - 179", "contents": "server_print(${1:const message[]}, ${2:any:...})" },
		{ "trigger": "set_FRC_counter\tfrc.inc - 213", "contents": "set_FRC_counter(${1:id}, ${2:quantity})" },
		{ "trigger": "set_FRC_duration\tfrc.inc - 227", "contents": "set_FRC_duration(${1:flashed}, ${2:duration})" },
		{ "trigger": "set_FRC_holdtime\tfrc.inc - 241", "contents": "set_FRC_holdtime(${1:flashed}, ${2:duration})" },
		{ "trigger": "set_addr_val\tamxmodx.inc - 982", "contents": "set_addr_val(${1:addr}, ${2:val})" },
		{ "trigger": "set_array\tamxmodx.inc - 802", "contents": "set_array(${1:param}, ${2:const source[]}, ${3:size})" },
		{ "trigger": "set_array_f\tamxmodx.inc - 803", "contents": "set_array_f(${1:param}, ${2:const Float:source[]}, ${3:size})" },
		{ "trigger": "set_big_bit\tbits.inc - 63", "contents": "set_big_bit(${1:%1}, ${2:%2})" },
		{ "trigger": "set_bit\tbits.inc - 30", "contents": "set_bit(${1:%1}, ${2:%2})" },
		{ "trigger": "set_bits\tbits.inc - 51", "contents": "set_bits(${1:%1}, ${2:%2})" },
		{ "trigger": "set_bot_angles\tbot_api.inc - 67", "contents": "set_bot_angles(${1:id}, ${2:Float:origin[3]})" },
		{ "trigger": "set_bot_chat\tbot_api.inc - 73", "contents": "set_bot_chat(${1:id}, ${2:bot_chat:member}, ${3:const text[]})" },
		{ "trigger": "set_bot_data\tbot_api.inc - 64", "contents": "set_bot_data(${1:id}, ${2:bot_data:member}, ${3:{Float}, ${4:_}:...})" },
		{ "trigger": "set_bot_voice\tbot_api.inc - 70", "contents": "set_bot_voice(${1:id}, ${2:const wavefile[]}, ${3:pitch=100}, ${4:Float:duration=1.0})" },
		{ "trigger": "set_cd\tfakemeta.inc - 200", "contents": "set_cd(${1:cd_handle}, ${2:ClientData:member}, ${3:{Float}, ${4:_}:...})" },
		{ "trigger": "set_client_listen\tfun.inc - 27", "contents": "set_client_listen(${1:receiver}, ${2:sender}, ${3:listen})" },
		{ "trigger": "set_client_listening\tfun_stocks.inc - 18", "contents": "set_client_listening(${1:%1}, ${2:%2}, ${3:%3})" },
		{ "trigger": "set_controller\tfakemeta.inc - 257", "contents": "set_controller(${1:entity}, ${2:controller}, ${3:Float:value})" },
		{ "trigger": "set_cvar_access\tcvaraccess.inc - 20", "contents": "set_cvar_access(${1:pointer}, ${2:flags})" },
		{ "trigger": "set_cvar_flags\tamxmodx.inc - 398", "contents": "set_cvar_flags(${1:const cvar[]}, ${2:flags})" },
		{ "trigger": "set_cvar_float\tamxmodx.inc - 404", "contents": "set_cvar_float(${1:const cvar[]}, ${2:Float:value})" },
		{ "trigger": "set_cvar_num\tamxmodx.inc - 413", "contents": "set_cvar_num(${1:const cvarname[]}, ${2:value})" },
		{ "trigger": "set_cvar_string\tamxmodx.inc - 387", "contents": "set_cvar_string(${1:const cvar[]}, ${2:const value[]})" },
		{ "trigger": "set_dhudmessage\tdhudmessage.inc - 19", "contents": "set_dhudmessage(${1:red = 0}, ${2:green = 160}, ${3:blue = 0}, ${4:Float:x = -1.0}, ${5:Float:y = 0.65}, ${6:effects = 2}, ${7:Float:fxtime = 6.0}, ${8:Float:holdtime = 3.0}, ${9:Float:fadeintime = 0.1}, ${10:Float:fadeouttime = 1.5}, ${11:bool:reliable = false})" },
		{ "trigger": "set_entity_flags\tengine_stocks.inc - 154", "contents": "set_entity_flags(${1:ent}, ${2:flag}, ${3:onoff})" },
		{ "trigger": "set_entity_origin\txtrafun.inc - 38", "contents": "set_entity_origin(${1:index}, ${2:origin[3]})" },
		{ "trigger": "set_entity_velocity\txtrafun.inc - 24", "contents": "set_entity_velocity(${1:index}, ${2:velocity[3]})" },
		{ "trigger": "set_entity_visibility\tengine_stocks.inc - 185", "contents": "set_entity_visibility(${1:entity}, ${2:visible = 1})" },
		{ "trigger": "set_error_filter\tamxmodx.inc - 828", "contents": "set_error_filter(${1:const handler[]})" },
		{ "trigger": "set_es\tfakemeta.inc - 207", "contents": "set_es(${1:es_handle}, ${2:EntityState:member}, ${3:{Float}, ${4:_}:...})" },
		{ "trigger": "set_fail_state\tamxmodx.inc - 969", "contents": "set_fail_state(${1:const err_msg[]})" },
		{ "trigger": "set_float_byref\tamxmodx.inc - 796", "contents": "set_float_byref(${1:param}, ${2:Float:value})" },
		{ "trigger": "set_hudmessage\tamxmodx.inc - 146", "contents": "set_hudmessage(${1:red=200}, ${2:green=100}, ${3:blue=0}, ${4:Float:x=-1.0}, ${5:Float:y=0.35}, ${6:effects=0}, ${7:Float:fxtime=6.0}, ${8:Float:holdtime=12.0}, ${9:Float:fadeintime=0.1}, ${10:Float:fadeouttime=0.2}, ${11:channel=4})" },
		{ "trigger": "set_kvd\tfakemeta.inc - 193", "contents": "set_kvd(${1:kvd_handle}, ${2:KeyValueData:member}, ${3:{Float}, ${4:_}:...})" },
		{ "trigger": "set_kvhandled\tns2amx.inc - 187", "contents": "set_kvhandled()" },
		{ "trigger": "set_lights\tengine.inc - 173", "contents": "set_lights(${1:const Lighting[]})" },
		{ "trigger": "set_localinfo\tamxmodx.inc - 92", "contents": "set_localinfo(${1:const info[]}, ${2:const value[]})" },
		{ "trigger": "set_mask\tns2amx.inc - 246", "contents": "set_mask(${1:id}, ${2:mask}, ${3:value})" },
		{ "trigger": "set_model\tVexdUM.inc - 70", "contents": "set_model(${1:entity}, ${2:const model[]})" },
		{ "trigger": "set_module_filter\tamxmodx.inc - 896", "contents": "set_module_filter(${1:const handler[]})" },
		{ "trigger": "set_msg_arg_float\tmessages.inc - 89", "contents": "set_msg_arg_float(${1:argn}, ${2:argtype}, ${3:Float:fValue})" },
		{ "trigger": "set_msg_arg_int\tmessages.inc - 88", "contents": "set_msg_arg_int(${1:argn}, ${2:argtype}, ${3:iValue})" },
		{ "trigger": "set_msg_arg_string\tmessages.inc - 90", "contents": "set_msg_arg_string(${1:argn}, ${2:const szString[]})" },
		{ "trigger": "set_msg_block\tmessages.inc - 50", "contents": "set_msg_block(${1:iMessage}, ${2:iMessageFlags})" },
		{ "trigger": "set_native_filter\tamxmodx.inc - 876", "contents": "set_native_filter(${1:const handler[]})" },
		{ "trigger": "set_offset_int\tVexdUM_stock.inc - 27", "contents": "set_offset_int(${1:ent}, ${2:offset}, ${3:value}, ${4:linos = 5})" },
		{ "trigger": "set_param_byref\tamxmodx.inc - 795", "contents": "set_param_byref(${1:param}, ${2:value})" },
		{ "trigger": "set_pcvar_flags\tamxmodx.inc - 1037", "contents": "set_pcvar_flags(${1:pcvar}, ${2:flags})" },
		{ "trigger": "set_pcvar_float\tamxmodx.inc - 1041", "contents": "set_pcvar_float(${1:pcvar}, ${2:Float:num})" },
		{ "trigger": "set_pcvar_num\tamxmodx.inc - 1039", "contents": "set_pcvar_num(${1:pcvar}, ${2:num})" },
		{ "trigger": "set_pcvar_string\tamxmodx.inc - 1043", "contents": "set_pcvar_string(${1:pcvar}, ${2:const string[]})" },
		{ "trigger": "set_pdata_cbase\thamsandwich.inc - 333", "contents": "set_pdata_cbase(${1:id}, ${2:offset}, ${3:value}, ${4:linuxdiff=5})" },
		{ "trigger": "set_pdata_float\tfakemeta.inc - 111", "contents": "set_pdata_float(${1:_index}, ${2:_Offset}, ${3:Float:_Value}, ${4:_linuxdiff=5})" },
		{ "trigger": "set_pdata_int\tfakemeta.inc - 105", "contents": "set_pdata_int(${1:_index}, ${2:_Offset}, ${3:_Value}, ${4:_linuxdiff=5})" },
		{ "trigger": "set_pdata_int_ex\tts_stocks.inc - 120", "contents": "set_pdata_int_ex(${1:id}, ${2:offset}, ${3:amt})" },
		{ "trigger": "set_pdata_string\tfakemeta.inc - 230", "contents": "set_pdata_string(${1:entity}, ${2:offset}, ${3:const source[]}, ${4:realloc=2}, ${5:linux})" },
		{ "trigger": "set_pev\tfakemeta.inc - 53", "contents": "set_pev(${1:_index}, ${2:_value}, ${3:any:...})" },
		{ "trigger": "set_pev_f\tns2amx.inc - 111", "contents": "set_pev_f(${1:_index}, ${2:_field}, ${3:Float:_val})" },
		{ "trigger": "set_pev_i\tns2amx.inc - 102", "contents": "set_pev_i(${1:_index}, ${2:_field}, ${3:_val})" },
		{ "trigger": "set_pev_string\tfakemeta.inc - 66", "contents": "set_pev_string(${1:_index}, ${2:_value}, ${3:_string})" },
		{ "trigger": "set_player_body\tns2amx.inc - 181", "contents": "set_player_body(${1:id}, ${2:body=-1})" },
		{ "trigger": "set_player_flag\tboolean.inc - 41", "contents": "set_player_flag(${1:%1}, ${2:%2})" },
		{ "trigger": "set_player_model\tns2amx.inc - 175", "contents": "set_player_model(${1:id}, ${2:model[]=\"\"})" },
		{ "trigger": "set_player_skin\tns2amx.inc - 178", "contents": "set_player_skin(${1:id}, ${2:skin=-1})" },
		{ "trigger": "set_private_f\tns2amx.inc - 37", "contents": "set_private_f(${1:index}, ${2:offset}, ${3:Float:value}, ${4:linuxdiff=5})" },
		{ "trigger": "set_private_i\tns2amx.inc - 27", "contents": "set_private_i(${1:index}, ${2:offset}, ${3:value}, ${4:linuxdiff=5})" },
		{ "trigger": "set_rendering\tengine_stocks.inc - 139", "contents": "set_rendering(${1:index}, ${2:fx=kRenderFxNone}, ${3:r=255}, ${4:g=255}, ${5:b=255}, ${6:render=kRenderNormal}, ${7:amount=16})" },
		{ "trigger": "set_size\tengine_stocks.inc - 225", "contents": "set_size(${1:index}, ${2:const Float:mins[3]}, ${3:const Float:maxs[3]})" },
		{ "trigger": "set_speak\tengine.inc - 45", "contents": "set_speak(${1:iIndex}, ${2:iSpeakFlags})" },
		{ "trigger": "set_speed\tchr_engine.inc - 465", "contents": "set_speed(${1:ent}, ${2:Float:speed}, ${3:mode=0}, ${4:const Float:origin[3]={0.0}, ${5:0.0}, ${6:0.0}})" },
		{ "trigger": "set_speedchange\tns2amx.inc - 169", "contents": "set_speedchange(${1:id}, ${2:speed})" },
		{ "trigger": "set_string\tamxmodx.inc - 786", "contents": "set_string(${1:param}, ${2:dest[]}, ${3:maxlen})" },
		{ "trigger": "set_task\tamxmodx.inc - 458", "contents": "set_task(${1:Float:time}, ${2:const function[]}, ${3:id = 0}, ${4:const parameter[]=}, ${5:len = 0}, ${6:const flags[]=}, ${7:repeat = 0})" },
		{ "trigger": "set_tr\tfakemeta.inc - 158", "contents": "set_tr(${1:TraceResult:tr_member}, ${2:{Float}, ${3:_}:...})" },
		{ "trigger": "set_tr2\tfakemeta.inc - 164", "contents": "set_tr2(${1:tr_handle}, ${2:{TraceResult}, ${3:_}:tr_member}, ${4:{Float}, ${5:_}:...})" },
		{ "trigger": "set_uc\tfakemeta.inc - 214", "contents": "set_uc(${1:uc_handle}, ${2:UserCmd:member}, ${3:{Float}, ${4:_}:...})" },
		{ "trigger": "set_user_airaccelerate\tairaccelerate.inc - 27", "contents": "set_user_airaccelerate(${1:id}, ${2:const airaccelerate})" },
		{ "trigger": "set_user_armor\tfun_stocks.inc - 36", "contents": "set_user_armor(${1:%1}, ${2:%2})" },
		{ "trigger": "set_user_flags\tamxmodx.inc - 472", "contents": "set_user_flags(${1:index}, ${2:flags=-1}, ${3:id=0})" },
		{ "trigger": "set_user_footsteps\tfun.inc - 93", "contents": "set_user_footsteps(${1:id}, ${2:set = 1})" },
		{ "trigger": "set_user_frags\tfun_stocks.inc - 32", "contents": "set_user_frags(${1:%1}, ${2:%2})" },
		{ "trigger": "set_user_godmode\tfun_stocks.inc - 22", "contents": "set_user_godmode(${1:%1}, ${2:%2})" },
		{ "trigger": "set_user_gravity\tfun_stocks.inc - 46", "contents": "set_user_gravity(${1:%1}, ${2:%2})" },
		{ "trigger": "set_user_health\tfun_stocks.inc - 28", "contents": "set_user_health(${1:%1}, ${2:%2})" },
		{ "trigger": "set_user_hitzones\tfun.inc - 62", "contents": "set_user_hitzones(${1:index = 0}, ${2:target = 0}, ${3:body = 255})" },
		{ "trigger": "set_user_info\tamxmodx.inc - 86", "contents": "set_user_info(${1:index}, ${2:const info[]}, ${3:const value[]})" },
		{ "trigger": "set_user_maxspeed\tfun_stocks.inc - 42", "contents": "set_user_maxspeed(${1:%1}, ${2:%2})" },
		{ "trigger": "set_user_model\tVexdUM.inc - 26", "contents": "set_user_model(${1:id}, ${2:const Model[]=\"\"})" },
		{ "trigger": "set_user_money\tamxmod.inc - 46", "contents": "set_user_money(${1:index}, ${2:money}, ${3:flash=1})" },
		{ "trigger": "set_user_noclip\tfun.inc - 83", "contents": "set_user_noclip(${1:index}, ${2:noclip = 0})" },
		{ "trigger": "set_user_origin\tfun_stocks.inc - 38", "contents": "set_user_origin(${1:%1}, ${2:%2})" },
		{ "trigger": "set_user_rendering\tfun.inc - 45", "contents": "set_user_rendering(${1:index}, ${2:fx = kRenderFxNone}, ${3:r = 255}, ${4:g = 255}, ${5:b = 255}, ${6:render = kRenderNormal}, ${7:amount = 16})" },
		{ "trigger": "set_user_velocity\tengine_stocks.inc - 198", "contents": "set_user_velocity(${1:entity}, ${2:const Float:vec[3]})" },
		{ "trigger": "set_usercmd\tengine.inc - 191", "contents": "set_usercmd(${1:type}, ${2:any:...})" },
		{ "trigger": "set_vaultdata\tvault.inc - 20", "contents": "set_vaultdata(${1:const key[]}, ${2:const data[] = \"\"})" },
		{ "trigger": "set_view\tengine.inc - 179", "contents": "set_view(${1:iIndex}, ${2:ViewType})" },
		{ "trigger": "set_xvar_float\tamxmodx.inc - 587", "contents": "set_xvar_float(${1:id}, ${2:Float:value = 0.0})" },
		{ "trigger": "set_xvar_num\tamxmodx.inc - 583", "contents": "set_xvar_num(${1:id}, ${2:value = 0})" },
		{ "trigger": "setarg\tcore.inc - 19", "contents": "setarg(${1:arg}, ${2:index=0}, ${3:value})" },
		{ "trigger": "setc\tstring.inc - 104", "contents": "setc(${1:src[]}, ${2:len}, ${3:ch})" },
		{ "trigger": "setclientkeyvalue\tVexdUM.inc - 82", "contents": "setclientkeyvalue(${1:id}, ${2:key[]}, ${3:value[]})" },
		{ "trigger": "shake_player_screen\ttoolsx.inc - 267", "contents": "shake_player_screen(${1:index}, ${2:destType}, ${3:iAmplitude}, ${4:iDuration}, ${5:iFrequency})" },
		{ "trigger": "show_activity\tamxmisc.inc - 191", "contents": "show_activity(${1:id}, ${2:const name[]}, ${3:const fmt[]}, ${4:any:...})" },
		{ "trigger": "show_activity_id\tamxmisc.inc - 304", "contents": "show_activity_id(${1:idtarget}, ${2:idadmin}, ${3:const name[]}, ${4:const fmt[]}, ${5:any:...})" },
		{ "trigger": "show_activity_key\tamxmisc.inc - 387", "contents": "show_activity_key(${1:const KeyWithoutName[]}, ${2:const KeyWithName[]}, ${3:const ___AdminName[]}, ${4:any:...})" },
		{ "trigger": "show_dhudmessage\tdhudmessage.inc - 37", "contents": "show_dhudmessage(${1:index}, ${2:const message[]}, ${3:any:...})" },
		{ "trigger": "show_hudmessage\tamxmodx.inc - 149", "contents": "show_hudmessage(${1:index}, ${2:const message[]}, ${3:any:...})" },
		{ "trigger": "show_menu\tamxmodx.inc - 152", "contents": "show_menu(${1:index}, ${2:keys}, ${3:const menu[]}, ${4:time = -1}, ${5:const title[] = \"\"})" },
		{ "trigger": "show_motd\tamxmodx.inc - 100", "contents": "show_motd(${1:player}, ${2:const message[]}, ${3:const header[]=\"\"})" },
		{ "trigger": "sin\tmaths.inc - 27", "contents": "sin(${1:Float:value})" },
		{ "trigger": "sinh\tmaths.inc - 32", "contents": "sinh(${1:Float:value})" },
		{ "trigger": "socket_accept\tsockets_hz.inc - 62", "contents": "socket_accept(${1:_socket})" },
		{ "trigger": "socket_change\tsockets.inc - 64", "contents": "socket_change(${1:_socket}, ${2:_timeout=100000})" },
		{ "trigger": "socket_close\tsockets.inc - 46", "contents": "socket_close(${1:_socket})" },
		{ "trigger": "socket_getpeername\tsockets_hz.inc - 91", "contents": "socket_getpeername(${1:_socket}, ${2:&family}, ${3:data[]}, ${4:length})" },
		{ "trigger": "socket_listen\tsockets_hz.inc - 53", "contents": "socket_listen(${1:const _hostname[]}, ${2:_port}, ${3:_protocol = SOCKET_TCP}, ${4:&_error})" },
		{ "trigger": "socket_open\tsockets.inc - 42", "contents": "socket_open(${1:const _hostname[]}, ${2:_port}, ${3:_protocol = SOCKET_TCP}, ${4:&_error})" },
		{ "trigger": "socket_recv\tsockets.inc - 50", "contents": "socket_recv(${1:_socket}, ${2:_data[]}, ${3:_length})" },
		{ "trigger": "socket_send\tsockets.inc - 54", "contents": "socket_send(${1:_socket}, ${2:const _data[]}, ${3:_length})" },
		{ "trigger": "socket_send2\tsockets.inc - 58", "contents": "socket_send2(${1:_socket}, ${2:const _data[]}, ${3:_length})" },
		{ "trigger": "socket_unblock\tsockets_hz.inc - 66", "contents": "socket_unblock(${1:_socket})" },
		{ "trigger": "spawn\tfun_stocks.inc - 66", "contents": "spawn(${1:1%})" },
		{ "trigger": "spawn_weapon\txen_gunshop.inc - 37", "contents": "spawn_weapon(${1:gunid[]}, ${2:duration[]}, ${3:clips[]}, ${4:flags[]})" },
		{ "trigger": "split\tstring.inc - 184", "contents": "split(${1:const szInput[]}, ${2:szLeft[]}, ${3:pL_Max}, ${4:szRight[]}, ${5:pR_Max}, ${6:const szDelim[]})" },
		{ "trigger": "sq_error\tserver_query.inc - 81", "contents": "sq_error(${1:const errcode}, ${2:error[]}, ${3:const len})" },
		{ "trigger": "sq_fixedunsigned8\tserver_query.inc - 516", "contents": "sq_fixedunsigned8(${1:value})" },
		{ "trigger": "sq_is_A2S_GETCHALLENGE_response\tserver_query.inc - 332", "contents": "sq_is_A2S_GETCHALLENGE_response(${1:const buffer[]}, ${2:const buffer_len})" },
		{ "trigger": "sq_is_A2S_INFO_response\tserver_query.inc - 304", "contents": "sq_is_A2S_INFO_response(${1:const buffer[]}, ${2:const buffer_len})" },
		{ "trigger": "sq_is_A2S_PLAYER_response\tserver_query.inc - 318", "contents": "sq_is_A2S_PLAYER_response(${1:const buffer[]}, ${2:const buffer_len})" },
		{ "trigger": "sq_query\tserver_query.inc - 58", "contents": "sq_query(${1:ip[]}, ${2:port}, ${3:type}, ${4:function[]}, ${5:&error})" },
		{ "trigger": "sq_readbuffer_challenge\tserver_query.inc - 350", "contents": "sq_readbuffer_challenge(${1:const buffer[]}, ${2:const buffer_len}, ${3:challenge[]=\"\"}, ${4:const len=0})" },
		{ "trigger": "sq_readbuffer_players\tserver_query.inc - 225", "contents": "sq_readbuffer_players(${1:const buffer[]}, ${2:const buffer_len}, ${3:&pnum=0}, ${4:names[32][]={\"\"}, ${5:\"\"}, ${6:\"\"}, ${7:\"\"}, ${8:\"\"}, ${9:\"\"}, ${10:\"\"}, ${11:\"\"}, ${12:\"\"}, ${13:\"\"}, ${14:\"\"}, ${15:\"\"}, ${16:\"\"}, ${17:\"\"}, ${18:\"\"}, ${19:\"\"}, ${20:\"\"}, ${21:\"\"}, ${22:\"\"}, ${23:\"\"}, ${24:\"\"}, ${25:\"\"}, ${26:\"\"}, ${27:\"\"}, ${28:\"\"}, ${29:\"\"}, ${30:\"\"}, ${31:\"\"}, ${32:\"\"}, ${33:\"\"}, ${34:\"\"}, ${35:\"\"}}, ${36:const len=0}, ${37:frags[32]={0}, ${38:...}}, ${39:Float:times[32]={0.0}, ${40:...}})" },
		{ "trigger": "sq_readbuffer_server\tserver_query.inc - 149", "contents": "sq_readbuffer_server(${1:const buffer[]}, ${2:const buffer_len}, ${3:hostname[]=\"\"}, ${4:const len1=0}, ${5:map[]=\"\"}, ${6:const len2=0}, ${7:gamedir[]=\"\"}, ${8:const len3=0}, ${9:gamedesc[]=\"\"}, ${10:const len4=0}, ${11:&appid=0}, ${12:&numplayers=0}, ${13:&maxplayers=0}, ${14:&numbots=0}, ${15:&servertype=0}, ${16:&bool:windows=false}, ${17:&bool:password=false}, ${18:&bool:secure=false})" },
		{ "trigger": "sq_readbyte\tserver_query.inc - 408", "contents": "sq_readbyte(${1:const buffer[]}, ${2:const buffer_len}, ${3:start}, ${4:&result})" },
		{ "trigger": "sq_readfloat\tserver_query.inc - 424", "contents": "sq_readfloat(${1:const buffer[]}, ${2:const buffer_len}, ${3:start}, ${4:&Float:result})" },
		{ "trigger": "sq_readint\tserver_query.inc - 442", "contents": "sq_readint(${1:const buffer[]}, ${2:const buffer_len}, ${3:start}, ${4:bytes}, ${5:&result}, ${6:bool:check_neg=true})" },
		{ "trigger": "sq_readlong\tserver_query.inc - 376", "contents": "sq_readlong(${1:const buffer[]}, ${2:const buffer_len}, ${3:start}, ${4:&result})" },
		{ "trigger": "sq_readshort\tserver_query.inc - 392", "contents": "sq_readshort(${1:const buffer[]}, ${2:const buffer_len}, ${3:start}, ${4:&result})" },
		{ "trigger": "sq_readstring\tserver_query.inc - 492", "contents": "sq_readstring(${1:const buffer[]}, ${2:const buffer_len}, ${3:start}, ${4:output[]}, ${5:const output_len})" },
		{ "trigger": "sq_servertype\tserver_query.inc - 187", "contents": "sq_servertype(${1:const servertype}, ${2:result[]}, ${3:const len})" },
		{ "trigger": "sq_timeplayed\tserver_query.inc - 259", "contents": "sq_timeplayed(${1:const Float:time_played}, ${2:output[]}, ${3:const output_len}, ${4:bool:steam_format=false})" },
		{ "trigger": "sqlite_TableExists\tsqlx.inc - 270", "contents": "sqlite_TableExists(${1:Handle:db}, ${2:const table[]})" },
		{ "trigger": "sqlite_table_exists\tdbi.inc - 122", "contents": "sqlite_table_exists(${1:Sql:sql}, ${2:table[]})" },
		{ "trigger": "sqroot\tcore.inc - 34", "contents": "sqroot(${1:value})" },
		{ "trigger": "str_addcommas\tstring_stocks.inc - 554", "contents": "str_addcommas(${1:const string[]}, ${2:output[]}, ${3:output_len})" },
		{ "trigger": "str_cat\tstring_stocks.inc - 368", "contents": "str_cat(${1:output[]}, ${2:output_len}, ${3:...})" },
		{ "trigger": "str_delete\tstring_stocks.inc - 445", "contents": "str_delete(${1:string[]}, ${2:chars}, ${3:pos})" },
		{ "trigger": "str_empty\tstring_stocks.inc - 812", "contents": "str_empty(${1:string[]}, ${2:length = 0})" },
		{ "trigger": "str_explode\tstring_stocks.inc - 285", "contents": "str_explode(${1:const string[]}, ${2:delimiter}, ${3:output[][]}, ${4:output_size}, ${5:output_len})" },
		{ "trigger": "str_explode_str\tstring_stocks.inc - 298", "contents": "str_explode_str(${1:const string[]}, ${2:const delimiter[]}, ${3:output[][]}, ${4:output_size}, ${5:output_len})" },
		{ "trigger": "str_implode\tstring_stocks.inc - 331", "contents": "str_implode(${1:const input[][]}, ${2:size}, ${3:delimiter}, ${4:output[]}, ${5:output_len})" },
		{ "trigger": "str_implode_str\tstring_stocks.inc - 339", "contents": "str_implode_str(${1:const input[][]}, ${2:size}, ${3:const delimiter[]}, ${4:output[]}, ${5:output_len})" },
		{ "trigger": "str_insert\tstring_stocks.inc - 356", "contents": "str_insert(${1:const string[]}, ${2:const input[]}, ${3:pos}, ${4:output[]}, ${5:output_len})" },
		{ "trigger": "str_lpad\tstring_stocks.inc - 649", "contents": "str_lpad(${1:const string[]}, ${2:pad_size}, ${3:output[]}, ${4:output_len}, ${5:const pad_string[] =  \"\"})" },
		{ "trigger": "str_ltrim\tstring_stocks.inc - 589", "contents": "str_ltrim(${1:string[]=\"\"})" },
		{ "trigger": "str_parsetok\tstring_stocks.inc - 393", "contents": "str_parsetok(${1:const text[]}, ${2:token = ' '}, ${3:trimSpaces = 0}, ${4:...})" },
		{ "trigger": "str_repeat\tstring_stocks.inc - 659", "contents": "str_repeat(${1:const string[]}, ${2:times}, ${3:output[]}, ${4:output_len})" },
		{ "trigger": "str_replace\tstring_stocks.inc - 474", "contents": "str_replace(${1:string[]}, ${2:string_len}, ${3:const what[]}, ${4:const with[]}, ${5:max_replace = 0}, ${6:ignorecase = 0})" },
		{ "trigger": "str_rpad\tstring_stocks.inc - 654", "contents": "str_rpad(${1:const string[]}, ${2:pad_size}, ${3:output[]}, ${4:output_len}, ${5:const pad_string[] =  \"\"})" },
		{ "trigger": "str_rtrim\tstring_stocks.inc - 600", "contents": "str_rtrim(${1:string[]=\"\"})" },
		{ "trigger": "str_shuffle\tstring_stocks.inc - 684", "contents": "str_shuffle(${1:string[]})" },
		{ "trigger": "str_substr\tstring_stocks.inc - 275", "contents": "str_substr(${1:const string[]}, ${2:start}, ${3:output[]}, ${4:output_len}, ${5:len = 0})" },
		{ "trigger": "str_substr_count\tstring_stocks.inc - 696", "contents": "str_substr_count(${1:const string[]}, ${2:const find[]}, ${3:start = 0}, ${4:len = 0})" },
		{ "trigger": "str_to_array\tnfvault.inc - 3225", "contents": "str_to_array(${1:const string[]}, ${2:array[]}, ${3:const size})" },
		{ "trigger": "str_to_bool\tnfvault.inc - 3199", "contents": "str_to_bool(${1:const string[]})" },
		{ "trigger": "str_to_cellarray\tnfvault.inc - 3263", "contents": "str_to_cellarray(${1:const string[]}, ${2:&Array:array=Invalid_Array})" },
		{ "trigger": "str_to_cellarray2\tnfvault.inc - 3286", "contents": "str_to_cellarray2(${1:const string[]}, ${2:&Array:array=Invalid_Array})" },
		{ "trigger": "str_to_float\tstring.inc - 85", "contents": "str_to_float(${1:const string[]})" },
		{ "trigger": "str_to_num\tstring.inc - 79", "contents": "str_to_num(${1:const string[]})" },
		{ "trigger": "str_to_vector\tnfvault.inc - 3244", "contents": "str_to_vector(${1:const string[]}, ${2:Float:vec[3]})" },
		{ "trigger": "str_ucwords\tstring_stocks.inc - 721", "contents": "str_ucwords(${1:string[]})" },
		{ "trigger": "str_uridecode\tstring_stocks.inc - 852", "contents": "str_uridecode(${1:const string[]}, ${2:output[]}, ${3:output_len})" },
		{ "trigger": "str_uriencode\tstring_stocks.inc - 817", "contents": "str_uriencode(${1:const string[]}, ${2:output[]}, ${3:output_len})" },
		{ "trigger": "str_wordwrap\tstring_stocks.inc - 750", "contents": "str_wordwrap(${1:const string[]}, ${2:output[]}, ${3:output_len}, ${4:width = 75}, ${5:const wrapper[] = ^n}, ${6:bool:cut = false})" },
		{ "trigger": "strbreak\tstring.inc - 133", "contents": "strbreak(${1:const text[]}, ${2:Left[]}, ${3:leftLen}, ${4:Right[]}, ${5:rightLen})" },
		{ "trigger": "strcat\tstring.inc - 160", "contents": "strcat(${1:dest[]}, ${2:const source[]}, ${3:maxlength})" },
		{ "trigger": "strcmp\tstring.inc - 166", "contents": "strcmp(${1:const string1[]}, ${2:const string2[]}, ${3:ignorecase=0})" },
		{ "trigger": "strfind\tstring.inc - 163", "contents": "strfind(${1:const string[]}, ${2:const sub[]}, ${3:ignorecase=0}, ${4:pos=0})" },
		{ "trigger": "string\tns2amx.inc - 45", "contents": "string(${1:value}, ${2:ret[]})" },
		{ "trigger": "strip_user_weapons\tfun.inc - 96", "contents": "strip_user_weapons(${1:index})" },
		{ "trigger": "strlen\tcore.inc - 21", "contents": "strlen(${1:const string[]})" },
		{ "trigger": "strrfind\tstring_stocks.inc - 263", "contents": "strrfind(${1:const string[]}, ${2:const sub[]}, ${3:ignorecase = 0}, ${4:pos = 0})" },
		{ "trigger": "strtok\tstring.inc - 122", "contents": "strtok(${1:const text[]}, ${2:Left[]}, ${3:leftLen}, ${4:Right[]}, ${5:rightLen}, ${6:token=' '}, ${7:trimSpaces=0})" },
		{ "trigger": "strtolower\tstring.inc - 139", "contents": "strtolower(${1:string[]})" },
		{ "trigger": "strtonum\tamxmod.inc - 52", "contents": "strtonum(${1:const string[]})" },
		{ "trigger": "strtoupper\tstring.inc - 142", "contents": "strtoupper(${1:string[]})" },
		{ "trigger": "supercede\tns2amx.inc - 58", "contents": "supercede()" },
		{ "trigger": "swapchars\tcore.inc - 25", "contents": "swapchars(${1:c})" },
		{ "trigger": "take_damage\tVexdUM.inc - 25", "contents": "take_damage(${1:victim}, ${2:attacker}, ${3:Float:orig[3]}, ${4:Float:dmg}, ${5:bit = DMG_BULLET}, ${6:wpnName[]=}, ${7:hs = 0})" },
		{ "trigger": "tan\tmaths.inc - 62", "contents": "tan(${1:Float:value})" },
		{ "trigger": "tanh\tmaths.inc - 67", "contents": "tanh(${1:Float:value})" },
		{ "trigger": "task_exists\tamxmodx.inc - 469", "contents": "task_exists(${1:id = 0}, ${2:outside = 0})" },
		{ "trigger": "tea_crypt\ttea.inc - 39", "contents": "tea_crypt(${1:str[]}, ${2:key[4]})" },
		{ "trigger": "tea_crypt_str\ttea.inc - 21", "contents": "tea_crypt_str(${1:str[]}, ${2:key[4]})" },
		{ "trigger": "tea_decrypt\ttea.inc - 54", "contents": "tea_decrypt(${1:str[]}, ${2:key[4]})" },
		{ "trigger": "tea_decrypt_str\ttea.inc - 30", "contents": "tea_decrypt_str(${1:str[]}, ${2:key[4]})" },
		{ "trigger": "tfc_clearmodel\ttfcx.inc - 107", "contents": "tfc_clearmodel(${1:index})" },
		{ "trigger": "tfc_get_user_goalitem\ttfcx.inc - 135", "contents": "tfc_get_user_goalitem(${1:index}, ${2:&team})" },
		{ "trigger": "tfc_getbammo\ttfcx.inc - 111", "contents": "tfc_getbammo(${1:index}, ${2:ammo})" },
		{ "trigger": "tfc_getweaponammo\ttfcx.inc - 125", "contents": "tfc_getweaponammo(${1:index})" },
		{ "trigger": "tfc_getweaponbammo\ttfcx.inc - 118", "contents": "tfc_getweaponbammo(${1:index}, ${2:weapon})" },
		{ "trigger": "tfc_is_team_ally\ttfcx.inc - 145", "contents": "tfc_is_team_ally(${1:TeamA}, ${2:TeamB})" },
		{ "trigger": "tfc_is_user_feigning\ttfcx.inc - 138", "contents": "tfc_is_user_feigning(${1:index})" },
		{ "trigger": "tfc_isgrenade\ttfcx.inc - 71", "contents": "tfc_isgrenade(${1:weapon})" },
		{ "trigger": "tfc_setbammo\ttfcx.inc - 114", "contents": "tfc_setbammo(${1:index}, ${2:ammo}, ${3:value})" },
		{ "trigger": "tfc_setmodel\ttfcx.inc - 106", "contents": "tfc_setmodel(${1:index}, ${2:const Model[]}, ${3:const Skin[]})" },
		{ "trigger": "tfc_setpddata\ttfcx.inc - 102", "contents": "tfc_setpddata(${1:timer}, ${2:sentrygun}, ${3:shells}, ${4:bullets}, ${5:cells}, ${6:rockets}, ${7:nade1}, ${8:nade2})" },
		{ "trigger": "tfc_setweaponammo\ttfcx.inc - 129", "contents": "tfc_setweaponammo(${1:index}, ${2:value})" },
		{ "trigger": "tfc_setweaponbammo\ttfcx.inc - 121", "contents": "tfc_setweaponbammo(${1:index}, ${2:weapon}, ${3:value})" },
		{ "trigger": "tfc_userkill\ttfcx.inc - 88", "contents": "tfc_userkill(${1:index})" },
		{ "trigger": "tickcount\tcore.inc - 39", "contents": "tickcount(${1:&granularity=0})" },
		{ "trigger": "time\tcore.inc - 36", "contents": "time(${1:&hour=0}, ${2:&minute=0}, ${3:&second=0})" },
		{ "trigger": "tlx_AddVectors\ttoolsx.inc - 530", "contents": "tlx_AddVectors(${1:Float:vec1[3]}, ${2:Float:vec2[3]}, ${3:Float:ret[3]})" },
		{ "trigger": "tlx_AngleDiff\ttoolsx.inc - 554", "contents": "tlx_AngleDiff(${1:Float:destAngle}, ${2:Float:srcAngle})" },
		{ "trigger": "tlx_AngleDistance\ttoolsx.inc - 746", "contents": "tlx_AngleDistance(${1:Float:next}, ${2:Float:cur})" },
		{ "trigger": "tlx_Approach\ttoolsx.inc - 728", "contents": "tlx_Approach(${1:Float:target}, ${2:Float:value}, ${3:Float:speed})" },
		{ "trigger": "tlx_CLadder\ttoolsx.inc - 775", "contents": "tlx_CLadder(${1:ent})" },
		{ "trigger": "tlx_ConcatTransforms\ttoolsx.inc - 489", "contents": "tlx_ConcatTransforms(${1:Float:in1[3][4]}, ${2:Float:in2[3][4]}, ${3:Float:out[3][4]})" },
		{ "trigger": "tlx_CrossProduct\ttoolsx.inc - 471", "contents": "tlx_CrossProduct(${1:const Float:v1[3]}, ${2:const Float:v2[3]}, ${3:Float:cross[3]})" },
		{ "trigger": "tlx_EV_IsPlayer\ttoolsx.inc - 427", "contents": "tlx_EV_IsPlayer(${1:index})" },
		{ "trigger": "tlx_EntitiesInBox\ttoolsx.inc - 626", "contents": "tlx_EntitiesInBox(${1:pList[]}, ${2:listMax}, ${3:Float:mins[3]}, ${4:Float:maxs[3]}, ${5:flagMask})" },
		{ "trigger": "tlx_GetHullBounds\ttoolsx.inc - 351", "contents": "tlx_GetHullBounds(${1:hullnumber}, ${2:Float:mins[3]}, ${3:Float:maxs[3]})" },
		{ "trigger": "tlx_MonstersInSphere\ttoolsx.inc - 664", "contents": "tlx_MonstersInSphere(${1:pList[]}, ${2:listMax}, ${3:Float:center[3]}, ${4:Float:radius})" },
		{ "trigger": "tlx_SplineFraction\ttoolsx.inc - 761", "contents": "tlx_SplineFraction(${1:Float:value}, ${2:Float:scale})" },
		{ "trigger": "tlx_StudioFrameAdvance\ttoolsx.inc - 582", "contents": "tlx_StudioFrameAdvance(${1:ent}, ${2:Float:flInterval})" },
		{ "trigger": "tlx_SubtractVectors\ttoolsx.inc - 542", "contents": "tlx_SubtractVectors(${1:Float:vec1[3]}, ${2:Float:vec2[3]}, ${3:Float:ret[3]})" },
		{ "trigger": "tlx_VectorAvg\ttoolsx.inc - 410", "contents": "tlx_VectorAvg(${1:a[]}, ${2:num})" },
		{ "trigger": "tlx_VectorClear\ttoolsx.inc - 454", "contents": "tlx_VectorClear(${1:Float:a[3]})" },
		{ "trigger": "tlx_VectorCompare\ttoolsx.inc - 441", "contents": "tlx_VectorCompare(${1:const Float:v1[3]}, ${2:const Float:v2[3]})" },
		{ "trigger": "tlx_VectorInverse\ttoolsx.inc - 288", "contents": "tlx_VectorInverse(${1:Float:vector[3]})" },
		{ "trigger": "tlx_VectorMA\ttoolsx.inc - 332", "contents": "tlx_VectorMA(${1:Float:vecA[3]}, ${2:Float:scale}, ${3:Float:vecB[3]}, ${4:Float:vecC[3]})" },
		{ "trigger": "tlx_VectorNormalize\ttoolsx.inc - 311", "contents": "tlx_VectorNormalize(${1:Float:vector[3]})" },
		{ "trigger": "tlx_VectorScale\ttoolsx.inc - 298", "contents": "tlx_VectorScale(${1:const Float:in[3]}, ${2:Float:scale}, ${3:Float:out[3]})" },
		{ "trigger": "tlx_clear_path\ttoolsx.inc - 809", "contents": "tlx_clear_path(${1:id}, ${2:Float:fDist}, ${3:Float:fZOffset})" },
		{ "trigger": "tlx_create_explosion\ttoolsx.inc - 171", "contents": "tlx_create_explosion(${1:Float:origin[3]}, ${2:destType}, ${3:msgType}, ${4:sprite}, ${5:scale}, ${6:framerate}, ${7:flags})" },
		{ "trigger": "tlx_distance_to_sky\ttoolsx.inc - 120", "contents": "tlx_distance_to_sky(${1:id})" },
		{ "trigger": "tlx_flash_player\ttoolsx.inc - 224", "contents": "tlx_flash_player(${1:index}, ${2:destType}, ${3:iDuration}, ${4:iHoldTime}, ${5:iFlags}, ${6:r}, ${7:g}, ${8:b}, ${9:alpha})" },
		{ "trigger": "tlx_fvectorProduct\ttoolsx.inc - 390", "contents": "tlx_fvectorProduct(${1:Float:Vec1[3]}, ${2:Float:Vec2[3]})" },
		{ "trigger": "tlx_vectorProduct\ttoolsx.inc - 397", "contents": "tlx_vectorProduct(${1:Vec1[3]}, ${2:Vec2[3]})" },
		{ "trigger": "toggle_player_flag\tboolean.inc - 35", "contents": "toggle_player_flag(${1:%1}, ${2:%2})" },
		{ "trigger": "tolower\tcore.inc - 23", "contents": "tolower(${1:c})" },
		{ "trigger": "toupper\tcore.inc - 24", "contents": "toupper(${1:c})" },
		{ "trigger": "trace_forward\tengine.inc - 269", "contents": "trace_forward(${1:const Float:start[3]}, ${2:const Float:angle[3]}, ${3:Float:give}, ${4:ignoreEnt}, ${5:&Float:hitX}, ${6:&Float:hitY}, ${7:&Float:shortestDistance}, ${8:&Float:shortestDistLow}, ${9:&Float:shortestDistHigh})" },
		{ "trigger": "trace_hull\tengine.inc - 160", "contents": "trace_hull(${1:const Float:origin[3]}, ${2:hull}, ${3:ignoredent=0}, ${4:ignoremonsters=0})" },
		{ "trigger": "trace_line\tVexdUM.inc - 34", "contents": "trace_line(${1:ent}, ${2:Float:vStart[3]}, ${3:Float:vEnd[3]}, ${4:Float:vReturn[3]})" },
		{ "trigger": "trace_normal\tengine.inc - 164", "contents": "trace_normal(${1:iIgnoreEnt}, ${2:const Float:fStart[3]}, ${3:const Float:fEnd[3]}, ${4:Float:vReturn[3]})" },
		{ "trigger": "trace_texture\tengine.inc - 266", "contents": "trace_texture(${1:entity}, ${2:Float:v1[3]}, ${3:Float:v2[3]}, ${4:texture[]}, ${5:len})" },
		{ "trigger": "traceline\tVexdUM.inc - 74", "contents": "traceline(${1:entity})" },
		{ "trigger": "traceline_get_edict\tVexdUM.inc - 42", "contents": "traceline_get_edict(${1:iVar})" },
		{ "trigger": "traceline_get_float\tVexdUM.inc - 38", "contents": "traceline_get_float(${1:iVar})" },
		{ "trigger": "traceline_get_int\tVexdUM.inc - 36", "contents": "traceline_get_int(${1:iVar})" },
		{ "trigger": "traceline_get_vector\tVexdUM.inc - 40", "contents": "traceline_get_vector(${1:iVar}, ${2:Float:vVal[3]})" },
		{ "trigger": "traceline_set_edict\tVexdUM.inc - 43", "contents": "traceline_set_edict(${1:iVar}, ${2:iEnt})" },
		{ "trigger": "traceline_set_float\tVexdUM.inc - 39", "contents": "traceline_set_float(${1:iVar}, ${2:Float:fVal})" },
		{ "trigger": "traceline_set_int\tVexdUM.inc - 37", "contents": "traceline_set_int(${1:iVar}, ${2:iVal})" },
		{ "trigger": "traceline_set_vector\tVexdUM.inc - 41", "contents": "traceline_set_vector(${1:iVar}, ${2:Float:vVal[3]})" },
		{ "trigger": "traceresult\tengine.inc - 25", "contents": "traceresult(${1:type}, ${2:any:...})" },
		{ "trigger": "translate\ttranslator.inc - 22", "contents": "translate(${1:const string[]}, ${2:destid=-1}, ${3:forcelang=-1})" },
		{ "trigger": "trim\tstring.inc - 136", "contents": "trim(${1:text[]})" },
		{ "trigger": "ts_createpwup\tts_stocks.inc - 125", "contents": "ts_createpwup(${1:pwup})" },
		{ "trigger": "ts_force_run_powerup\ttsfun.inc - 154", "contents": "ts_force_run_powerup(${1:id}, ${2:PWUP_TYPE})" },
		{ "trigger": "ts_get_message\ttsfun.inc - 104", "contents": "ts_get_message(${1:id})" },
		{ "trigger": "ts_getconsecutivekills\tts_stocks.inc - 102", "contents": "ts_getconsecutivekills(${1:id})" },
		{ "trigger": "ts_getkillingstreak\ttsfun.inc - 74", "contents": "ts_getkillingstreak(${1:index})" },
		{ "trigger": "ts_getusercash\ttsfun.inc - 63", "contents": "ts_getusercash(${1:index})" },
		{ "trigger": "ts_getuserkillflags\ttsfun.inc - 73", "contents": "ts_getuserkillflags(${1:killer})" },
		{ "trigger": "ts_getuserlastfrag\ttsfun.inc - 75", "contents": "ts_getuserlastfrag(${1:index})" },
		{ "trigger": "ts_getuserpwup\ttsfun.inc - 79", "contents": "ts_getuserpwup(${1:index})" },
		{ "trigger": "ts_getuserslots\ttsfun.inc - 66", "contents": "ts_getuserslots(${1:index})" },
		{ "trigger": "ts_getuserspace\ttsfun.inc - 71", "contents": "ts_getuserspace(${1:index})" },
		{ "trigger": "ts_getuserstate\ttsfun.inc - 69", "contents": "ts_getuserstate(${1:index})" },
		{ "trigger": "ts_getuserwpn\ttsfun.inc - 70", "contents": "ts_getuserwpn(${1:index}, ${2:&clip=0}, ${3:&ammo=0}, ${4:&mode=0}, ${5:&extra=0})" },
		{ "trigger": "ts_givepwup\tts_stocks.inc - 150", "contents": "ts_givepwup(${1:id}, ${2:pwupent})" },
		{ "trigger": "ts_giveweapon\ttsfun.inc - 77", "contents": "ts_giveweapon(${1:index}, ${2:weapon}, ${3:clips}, ${4:extra})" },
		{ "trigger": "ts_has_armor\ttsfun.inc - 87", "contents": "ts_has_armor(${1:id})" },
		{ "trigger": "ts_has_dfirerate\ttsfun.inc - 84", "contents": "ts_has_dfirerate(${1:id})" },
		{ "trigger": "ts_has_fupowerup\ttsfun.inc - 123", "contents": "ts_has_fupowerup(${1:id})" },
		{ "trigger": "ts_has_grenade\ttsfun.inc - 85", "contents": "ts_has_grenade(${1:id})" },
		{ "trigger": "ts_has_health\ttsfun.inc - 86", "contents": "ts_has_health(${1:id})" },
		{ "trigger": "ts_has_infammo\ttsfun.inc - 82", "contents": "ts_has_infammo(${1:id})" },
		{ "trigger": "ts_has_slowmo\ttsfun.inc - 81", "contents": "ts_has_slowmo(${1:id})" },
		{ "trigger": "ts_has_slowpause\ttsfun.inc - 83", "contents": "ts_has_slowpause(${1:id})" },
		{ "trigger": "ts_has_superjump\ttsfun.inc - 122", "contents": "ts_has_superjump(${1:id})" },
		{ "trigger": "ts_is_dead\ttsfun.inc - 113", "contents": "ts_is_dead(${1:id})" },
		{ "trigger": "ts_is_demolition\ttsfun.inc - 115", "contents": "ts_is_demolition(${1:id})" },
		{ "trigger": "ts_is_in_slowmo\ttsfun.inc - 124", "contents": "ts_is_in_slowmo(${1:id})" },
		{ "trigger": "ts_is_killer\ttsfun.inc - 114", "contents": "ts_is_killer(${1:id})" },
		{ "trigger": "ts_is_normal\ttsfun.inc - 106", "contents": "ts_is_normal(${1:id})" },
		{ "trigger": "ts_is_running_powerup\ttsfun.inc - 149", "contents": "ts_is_running_powerup(${1:id})" },
		{ "trigger": "ts_is_specialist\ttsfun.inc - 116", "contents": "ts_is_specialist(${1:id})" },
		{ "trigger": "ts_is_theone\ttsfun.inc - 118", "contents": "ts_is_theone(${1:id})" },
		{ "trigger": "ts_is_unstoppable\ttsfun.inc - 117", "contents": "ts_is_unstoppable(${1:id})" },
		{ "trigger": "ts_is_waiting\ttsfun.inc - 112", "contents": "ts_is_waiting(${1:id})" },
		{ "trigger": "ts_resetjumps\tts_stocks.inc - 92", "contents": "ts_resetjumps(${1:id})" },
		{ "trigger": "ts_set_bullettrail\ttsfun.inc - 132", "contents": "ts_set_bullettrail(${1:id}, ${2:yesorno})" },
		{ "trigger": "ts_set_fakeslowmo\ttsfun.inc - 135", "contents": "ts_set_fakeslowmo(${1:id}, ${2:Float:time})" },
		{ "trigger": "ts_set_fakeslowpause\ttsfun.inc - 136", "contents": "ts_set_fakeslowpause(${1:id}, ${2:Float:time})" },
		{ "trigger": "ts_set_message\ttsfun.inc - 101", "contents": "ts_set_message(${1:id}, ${2:message})" },
		{ "trigger": "ts_set_physics_speed\ttsfun.inc - 146", "contents": "ts_set_physics_speed(${1:id}, ${2:Float:speed})" },
		{ "trigger": "ts_set_speed\ttsfun.inc - 142", "contents": "ts_set_speed(${1:id}, ${2:Float:speed}, ${3:Float:auradist}, ${4:Float:time})" },
		{ "trigger": "ts_setconsecutivekills\tts_stocks.inc - 97", "contents": "ts_setconsecutivekills(${1:id}, ${2:amt})" },
		{ "trigger": "ts_setpddata\ttsfun.inc - 94", "contents": "ts_setpddata(${1:knifeoffset})" },
		{ "trigger": "ts_setpwup\tts_stocks.inc - 33", "contents": "ts_setpwup(${1:id}, ${2:pwup}, ${3:amt = 0})" },
		{ "trigger": "ts_setscoremode\tts_stocks.inc - 107", "contents": "ts_setscoremode(${1:id}, ${2:mode})" },
		{ "trigger": "ts_setusercash\ttsfun.inc - 64", "contents": "ts_setusercash(${1:index}, ${2:money})" },
		{ "trigger": "ts_setuserslots\ttsfun.inc - 67", "contents": "ts_setuserslots(${1:index}, ${2:slots})" },
		{ "trigger": "ts_weaponspawn\ttsx.inc - 73", "contents": "ts_weaponspawn(${1:const weaponid[]}, ${2:const duration[]}, ${3:const extraclip[]}, ${4:const spawnflags[]}, ${5:const Float:Origin[3]})" },
		{ "trigger": "ts_wpnlogtoid\ttsfun.inc - 57", "contents": "ts_wpnlogtoid(${1:const logname[]})" },
		{ "trigger": "ts_wpnlogtoname\ttsfun.inc - 54", "contents": "ts_wpnlogtoname(${1:const logname[]}, ${2:name[]}, ${3:len})" },
		{ "trigger": "ucfirst\tstring.inc - 145", "contents": "ucfirst(${1:string[]})" },
		{ "trigger": "unlink\tfile.inc - 112", "contents": "unlink(${1:const filename[]})" },
		{ "trigger": "unpause\tamxmodx.inc - 658", "contents": "unpause(${1:const flag[]}, ${2:const param1[]=\"\"}, ${3:const param2[]=\"\"})" },
		{ "trigger": "unregister_forward\tfakemeta.inc - 137", "contents": "unregister_forward(${1:_forwardType}, ${2:registerId}, ${3:post=0})" },
		{ "trigger": "unregister_message\tmessages.inc - 64", "contents": "unregister_message(${1:iMsgId}, ${2:registeredmsg})" },
		{ "trigger": "user_has_weapon\tamxmodx.inc - 243", "contents": "user_has_weapon(${1:index}, ${2:weapon}, ${3:setweapon=-1})" },
		{ "trigger": "user_kill\tamxmodx.inc - 305", "contents": "user_kill(${1:index}, ${2:flag=0})" },
		{ "trigger": "user_silentkill\tmessage_stocks.inc - 27", "contents": "user_silentkill(${1:index})" },
		{ "trigger": "user_slap\tamxmodx.inc - 302", "contents": "user_slap(${1:index}, ${2:power}, ${3:rnddir=1})" },
		{ "trigger": "user_spawn\tamxmod.inc - 37", "contents": "user_spawn(${1:index})" },
		{ "trigger": "vaultdata_exists\tvault.inc - 26", "contents": "vaultdata_exists(${1:const key[]})" },
		{ "trigger": "vdformat\tstring.inc - 70", "contents": "vdformat(${1:buffer[]}, ${2:len}, ${3:fmt_arg}, ${4:vararg}, ${5:...})" },
		{ "trigger": "vector_distance\tvector.inc - 37", "contents": "vector_distance(${1:const Float:vVector[3]}, ${2:const Float:vVector2[3]})" },
		{ "trigger": "vector_length\tvector.inc - 34", "contents": "vector_length(${1:const Float:vVector[3]})" },
		{ "trigger": "vector_to_angle\tvector.inc - 28", "contents": "vector_to_angle(${1:const Float:fVector[3]}, ${2:Float:vReturn[3]})" },
		{ "trigger": "velocity_by_aim\tvector.inc - 25", "contents": "velocity_by_aim(${1:iIndex}, ${2:iVelocity}, ${3:Float:vRetValue[3]})" },
		{ "trigger": "vexd_find_entity\tVexdUM_stock.inc - 101", "contents": "vexd_find_entity(${1:ent}, ${2:szValue[]}, ${3:type=0})" },
		{ "trigger": "vexd_pfntouch\tVexd_Utilities.inc - 107", "contents": "vexd_pfntouch(${1:pToucher}, ${2:pTouched})" },
		{ "trigger": "vformat\tstring.inc - 61", "contents": "vformat(${1:buffer[]}, ${2:len}, ${3:const fmt[]}, ${4:vararg})" },
		{ "trigger": "wc_add\tweapon_chance.inc - 32", "contents": "wc_add(${1:const teams}, ${2:const chance}, ${3:const bool:announce})" },
		{ "trigger": "wc_format_message\tweapon_chance.inc - 66", "contents": "wc_format_message(${1:player_id}, ${2:item_id}, ${3:message[64]})" },
		{ "trigger": "wc_give_item\tweapon_chance.inc - 43", "contents": "wc_give_item(${1:player_id}, ${2:item_id})" },
		{ "trigger": "wc_has_item\tweapon_chance.inc - 54", "contents": "wc_has_item(${1:player_id}, ${2:item_id})" },
		{ "trigger": "write_angle\tmessages.inc - 26", "contents": "write_angle(${1:x})" },
		{ "trigger": "write_byte\tmessages.inc - 21", "contents": "write_byte(${1:x})" },
		{ "trigger": "write_char\tmessages.inc - 22", "contents": "write_char(${1:x})" },
		{ "trigger": "write_coord\tmessages.inc - 27", "contents": "write_coord(${1:x})" },
		{ "trigger": "write_entity\tmessages.inc - 25", "contents": "write_entity(${1:x})" },
		{ "trigger": "write_fangle\tengine.inc - 110", "contents": "write_fangle(${1:Float:angle})" },
		{ "trigger": "write_fcoord\tengine.inc - 109", "contents": "write_fcoord(${1:Float:coord})" },
		{ "trigger": "write_file\tfile.inc - 23", "contents": "write_file(${1:const file[]}, ${2:const text[]}, ${3:line = -1})" },
		{ "trigger": "write_long\tmessages.inc - 24", "contents": "write_long(${1:x})" },
		{ "trigger": "write_short\tmessages.inc - 23", "contents": "write_short(${1:x})" },
		{ "trigger": "write_string\tmessages.inc - 28", "contents": "write_string(${1:const x[]})" },
		{ "trigger": "xmod_get_maxweapons\tcsx.inc - 63", "contents": "xmod_get_maxweapons()" },
		{ "trigger": "xmod_get_stats_size\tcsx.inc - 66", "contents": "xmod_get_stats_size()" },
		{ "trigger": "xmod_get_wpnlogname\tcsx.inc - 60", "contents": "xmod_get_wpnlogname(${1:wpnindex}, ${2:name[]}, ${3:len})" },
		{ "trigger": "xmod_get_wpnname\tcsx.inc - 57", "contents": "xmod_get_wpnname(${1:wpnindex}, ${2:name[]}, ${3:len})" },
		{ "trigger": "xmod_is_custom_wpn\tdodx.inc - 129", "contents": "xmod_is_custom_wpn(${1:wpnindex})" },
		{ "trigger": "xmod_is_melee_wpn\tcsx.inc - 54", "contents": "xmod_is_melee_wpn(${1:wpnindex})" },
		{ "trigger": "xs__2rad\txs.inc - 382", "contents": "xs__2rad(${1:Float:x}, ${2:anglemode:mod})" },
		{ "trigger": "xs__task_setup\txs.inc - 1181", "contents": "xs__task_setup(${1:const param[]}, ${2:taskid})" },
		{ "trigger": "xs_abs\txs.inc - 242", "contents": "xs_abs(${1:num})" },
		{ "trigger": "xs_acos\txs.inc - 402", "contents": "xs_acos(${1:%1}, ${2:%2})" },
		{ "trigger": "xs_anglevectors\txs.inc - 763", "contents": "xs_anglevectors(${1:const Float:angles[3]}, ${2:Float:fwd[3]}, ${3:Float:right[3]}, ${4:Float:up[3]})" },
		{ "trigger": "xs_asin\txs.inc - 400", "contents": "xs_asin(${1:%1}, ${2:%2})" },
		{ "trigger": "xs_assert\txs.inc - 200", "contents": "xs_assert(${1:%1}, ${2:%2})" },
		{ "trigger": "xs_assert_dbg\txs.inc - 206", "contents": "xs_assert_dbg(${1:%1}, ${2:%2})" },
		{ "trigger": "xs_assertfunc\txs.inc - 187", "contents": "xs_assertfunc(${1:{Float}, ${2:_}:exp}, ${3:const desc[]})" },
		{ "trigger": "xs_atan\txs.inc - 404", "contents": "xs_atan(${1:%1}, ${2:%2})" },
		{ "trigger": "xs_atan2\txs.inc - 405", "contents": "xs_atan2(${1:%1}, ${2:%2})" },
		{ "trigger": "xs_concmd_name\txs.inc - 977", "contents": "xs_concmd_name(${1:cid}, ${2:namestr[]}, ${3:namelen})" },
		{ "trigger": "xs_cos\txs.inc - 403", "contents": "xs_cos(${1:%1}, ${2:%2})" },
		{ "trigger": "xs_deg2rad\txs.inc - 256", "contents": "xs_deg2rad(${1:Float:x})" },
		{ "trigger": "xs_explode\txs.inc - 858", "contents": "xs_explode(${1:const input[]}, ${2:output[][]}, ${3:delimiter}, ${4:maxelems}, ${5:elemsize})" },
		{ "trigger": "xs_fabs\txs.inc - 399", "contents": "xs_fabs(${1:1%})" },
		{ "trigger": "xs_find_freetaskid\txs.inc - 1054", "contents": "xs_find_freetaskid()" },
		{ "trigger": "xs_frand\txs.inc - 451", "contents": "xs_frand()" },
		{ "trigger": "xs_freevisibleslots\txs.inc - 986", "contents": "xs_freevisibleslots(${1:num})" },
		{ "trigger": "xs_fsign\txs.inc - 235", "contents": "xs_fsign(${1:Float:num})" },
		{ "trigger": "xs_get_maxmessages\txs.inc - 1028", "contents": "xs_get_maxmessages()" },
		{ "trigger": "xs_get_maxnum\txs.inc - 998", "contents": "xs_get_maxnum()" },
		{ "trigger": "xs_get_minnum\txs.inc - 1014", "contents": "xs_get_minnum()" },
		{ "trigger": "xs_gra2rad\txs.inc - 268", "contents": "xs_gra2rad(${1:Float:x})" },
		{ "trigger": "xs_implode\txs.inc - 886", "contents": "xs_implode(${1:output[]}, ${2:outsize}, ${3:delimiter}, ${4:const input[][]}, ${5:elemsnum})" },
		{ "trigger": "xs_irand\txs.inc - 434", "contents": "xs_irand()" },
		{ "trigger": "xs_irand_range\txs.inc - 457", "contents": "xs_irand_range(${1:pmin}, ${2:pmax})" },
		{ "trigger": "xs_is_2power\txs.inc - 249", "contents": "xs_is_2power(${1:x})" },
		{ "trigger": "xs_is_msg_valid\txs.inc - 1040", "contents": "xs_is_msg_valid(${1:msgid})" },
		{ "trigger": "xs_log\txs.inc - 155", "contents": "xs_log(${1:xs_logtypes:logtype}, ${2:{Float}, ${3:_}:...})" },
		{ "trigger": "xs_plane_3p\txs.inc - 639", "contents": "xs_plane_3p(${1:Float:plane[]}, ${2:const Float:p1[]}, ${3:const Float:p2[]}, ${4:const Float:p3[]})" },
		{ "trigger": "xs_plane_copy\txs.inc - 746", "contents": "xs_plane_copy(${1:const Float:planeIn[]}, ${2:Float:planeOut[]})" },
		{ "trigger": "xs_plane_dst2point\txs.inc - 690", "contents": "xs_plane_dst2point(${1:const Float:plane[]}, ${2:const Float:point[]})" },
		{ "trigger": "xs_plane_equal\txs.inc - 667", "contents": "xs_plane_equal(${1:const Float:plane1[]}, ${2:const Float:plane2[]})" },
		{ "trigger": "xs_plane_nearlyequal\txs.inc - 678", "contents": "xs_plane_nearlyequal(${1:const Float:plane1[]}, ${2:const Float:plane2[]})" },
		{ "trigger": "xs_plane_rayintersect\txs.inc - 700", "contents": "xs_plane_rayintersect(${1:const Float:plane[]}, ${2:const Float:rayStart[]}, ${3:const Float:rayDir[]}, ${4:Float:out[]})" },
		{ "trigger": "xs_plane_set\txs.inc - 629", "contents": "xs_plane_set(${1:Float:plane[]}, ${2:Float:a}, ${3:Float:b}, ${4:Float:c}, ${5:Float:d})" },
		{ "trigger": "xs_point_onplane\txs.inc - 728", "contents": "xs_point_onplane(${1:const Float:plane[]}, ${2:const Float:point[]})" },
		{ "trigger": "xs_projpoint_onplane\txs.inc - 735", "contents": "xs_projpoint_onplane(${1:const Float:plane[]}, ${2:const Float:point[]}, ${3:Float:out[]})" },
		{ "trigger": "xs_rad2deg\txs.inc - 262", "contents": "xs_rad2deg(${1:Float:x})" },
		{ "trigger": "xs_rad2gra\txs.inc - 274", "contents": "xs_rad2gra(${1:Float:x})" },
		{ "trigger": "xs_replace\txs.inc - 912", "contents": "xs_replace(${1:text[]}, ${2:len}, ${3:const what[]}, ${4:const with[]})" },
		{ "trigger": "xs_replace_char\txs.inc - 952", "contents": "xs_replace_char(${1:text[]}, ${2:len}, ${3:what}, ${4:with})" },
		{ "trigger": "xs_rsqrt\txs.inc - 285", "contents": "xs_rsqrt(${1:Float:x})" },
		{ "trigger": "xs_seed\txs.inc - 428", "contents": "xs_seed(${1:seed})" },
		{ "trigger": "xs_sign\txs.inc - 228", "contents": "xs_sign(${1:num})" },
		{ "trigger": "xs_sin\txs.inc - 401", "contents": "xs_sin(${1:%1}, ${2:%2})" },
		{ "trigger": "xs_sqrt\txs.inc - 309", "contents": "xs_sqrt(${1:Float:x})" },
		{ "trigger": "xs_strchr\txs.inc - 790", "contents": "xs_strchr(${1:const str[]}, ${2:chr})" },
		{ "trigger": "xs_strmid\txs.inc - 836", "contents": "xs_strmid(${1:const oldmsg[]}, ${2:newmsg[]}, ${3:start}, ${4:end}, ${5:outlen=-1})" },
		{ "trigger": "xs_strtrim\txs.inc - 805", "contents": "xs_strtrim(${1:stringtotrim[]}, ${2:charstotrim}, ${3:bool:fromleft = true})" },
		{ "trigger": "xs_tan\txs.inc - 406", "contents": "xs_tan(${1:%1}, ${2:%2})" },
		{ "trigger": "xs_task_begin\txs.inc - 1102", "contents": "xs_task_begin(${1:Float:interval}, ${2:const func[]}, ${3:id = 0}, ${4:const flags[] = \"\"}, ${5:repeat = 0})" },
		{ "trigger": "xs_task_end\txs.inc - 1152", "contents": "xs_task_end()" },
		{ "trigger": "xs_task_paramcount\txs.inc - 1197", "contents": "xs_task_paramcount()" },
		{ "trigger": "xs_task_paramfl\txs.inc - 1223", "contents": "xs_task_paramfl(${1:paramid})" },
		{ "trigger": "xs_task_paramint\txs.inc - 1212", "contents": "xs_task_paramint(${1:paramid})" },
		{ "trigger": "xs_task_paramstr\txs.inc - 1234", "contents": "xs_task_paramstr(${1:paramid}, ${2:out[]}, ${3:maxlen})" },
		{ "trigger": "xs_task_paramtype\txs.inc - 1203", "contents": "xs_task_paramtype(${1:paramid})" },
		{ "trigger": "xs_task_pushfl\txs.inc - 1133", "contents": "xs_task_pushfl(${1:Float:value})" },
		{ "trigger": "xs_task_pushint\txs.inc - 1119", "contents": "xs_task_pushint(${1:value}, ${2:bool:__isfl=false /*internal use only*/})" },
		{ "trigger": "xs_task_pushstr\txs.inc - 1139", "contents": "xs_task_pushstr(${1:const value[]})" },
		{ "trigger": "xs_task_readid\txs.inc - 1191", "contents": "xs_task_readid()" },
		{ "trigger": "xs_vec_add\txs.inc - 481", "contents": "xs_vec_add(${1:const Float:in1[]}, ${2:const Float:in2[]}, ${3:Float:out[]})" },
		{ "trigger": "xs_vec_angle\txs.inc - 583", "contents": "xs_vec_angle(${1:const Float:vec1[]}, ${2:const Float:vec2[]})" },
		{ "trigger": "xs_vec_copy\txs.inc - 574", "contents": "xs_vec_copy(${1:const Float:vecIn[]}, ${2:Float:vecOut[]})" },
		{ "trigger": "xs_vec_cross\txs.inc - 549", "contents": "xs_vec_cross(${1:const Float:vec1[]}, ${2:const Float:vec2[]}, ${3:Float:out[]})" },
		{ "trigger": "xs_vec_div_scalar\txs.inc - 522", "contents": "xs_vec_div_scalar(${1:const Float:vec[]}, ${2:Float:scalar}, ${3:Float:out[]})" },
		{ "trigger": "xs_vec_dot\txs.inc - 558", "contents": "xs_vec_dot(${1:const Float:vec1[]}, ${2:const Float:vec2[]})" },
		{ "trigger": "xs_vec_equal\txs.inc - 499", "contents": "xs_vec_equal(${1:const Float:vec1[]}, ${2:const Float:vec2[]})" },
		{ "trigger": "xs_vec_len\txs.inc - 532", "contents": "xs_vec_len(${1:const Float:vec[]})" },
		{ "trigger": "xs_vec_make2d\txs.inc - 611", "contents": "xs_vec_make2d(${1:const Float:vec[3]}, ${2:Float:out[2]})" },
		{ "trigger": "xs_vec_mul_scalar\txs.inc - 513", "contents": "xs_vec_mul_scalar(${1:const Float:vec[]}, ${2:Float:scalar}, ${3:Float:out[]})" },
		{ "trigger": "xs_vec_nearlyequal\txs.inc - 506", "contents": "xs_vec_nearlyequal(${1:const Float:vec1[]}, ${2:const Float:vec2[]})" },
		{ "trigger": "xs_vec_neg\txs.inc - 565", "contents": "xs_vec_neg(${1:const Float:vec[]}, ${2:Float:out[]})" },
		{ "trigger": "xs_vec_normalize\txs.inc - 539", "contents": "xs_vec_normalize(${1:const Float:vec[]}, ${2:Float:out[]})" },
		{ "trigger": "xs_vec_reflect\txs.inc - 590", "contents": "xs_vec_reflect(${1:const Float:vec[]}, ${2:const Float:normal[]}, ${3:Float:out[]})" },
		{ "trigger": "xs_vec_set\txs.inc - 472", "contents": "xs_vec_set(${1:Float:vec[]}, ${2:Float:x}, ${3:Float:y}, ${4:Float:z})" },
		{ "trigger": "xs_vec_sub\txs.inc - 490", "contents": "xs_vec_sub(${1:const Float:in1[]}, ${2:const Float:in2[]}, ${3:Float:out[]})" },
		{ "trigger": "xtea_crypt\txtea.inc - 39", "contents": "xtea_crypt(${1:str[]}, ${2:key[4]})" },
		{ "trigger": "xtea_crypt_str\txtea.inc - 21", "contents": "xtea_crypt_str(${1:str[]}, ${2:key[4]})" },
		{ "trigger": "xtea_decrypt\txtea.inc - 52", "contents": "xtea_decrypt(${1:str[]}, ${2:key[4]})" },
		{ "trigger": "xtea_decrypt_str\txtea.inc - 30", "contents": "xtea_decrypt_str(${1:str[]}, ${2:key[4]})" },
		{ "trigger": "xvar_exists\tamxmodx.inc - 567", "contents": "xvar_exists(${1:const name[]})" },
		{ "trigger": "zp_admin_commands_human\tzp50_admin_commands.inc - 34", "contents": "zp_admin_commands_human(${1:id}, ${2:player})" },
		{ "trigger": "zp_admin_commands_nemesis\tzp50_admin_commands.inc - 43", "contents": "zp_admin_commands_nemesis(${1:id}, ${2:player})" },
		{ "trigger": "zp_admin_commands_respawn\tzp50_admin_commands.inc - 61", "contents": "zp_admin_commands_respawn(${1:id}, ${2:player})" },
		{ "trigger": "zp_admin_commands_start_mode\tzp50_admin_commands.inc - 70", "contents": "zp_admin_commands_start_mode(${1:id}, ${2:game_mode_id})" },
		{ "trigger": "zp_admin_commands_survivor\tzp50_admin_commands.inc - 52", "contents": "zp_admin_commands_survivor(${1:id}, ${2:player})" },
		{ "trigger": "zp_admin_commands_zombie\tzp50_admin_commands.inc - 25", "contents": "zp_admin_commands_zombie(${1:id}, ${2:player})" },
		{ "trigger": "zp_admin_menu_show\tzp50_admin_menu.inc - 24", "contents": "zp_admin_menu_show(${1:id})" },
		{ "trigger": "zp_ammopacks_get\tzp50_ammopacks.inc - 24", "contents": "zp_ammopacks_get(${1:id})" },
		{ "trigger": "zp_ammopacks_set\tzp50_ammopacks.inc - 32", "contents": "zp_ammopacks_set(${1:id}, ${2:amount})" },
		{ "trigger": "zp_buy_menus_show\tzp50_buy_menus.inc - 24", "contents": "zp_buy_menus_show(${1:id})" },
		{ "trigger": "zp_class_human_get_current\tzp50_class_human.inc - 25", "contents": "zp_class_human_get_current(${1:id})" },
		{ "trigger": "zp_class_human_get_desc\tzp50_class_human.inc - 94", "contents": "zp_class_human_get_desc(${1:classid}, ${2:description[]}, ${3:len})" },
		{ "trigger": "zp_class_human_get_id\tzp50_class_human.inc - 74", "contents": "zp_class_human_get_id(${1:const name[]})" },
		{ "trigger": "zp_class_human_get_name\tzp50_class_human.inc - 84", "contents": "zp_class_human_get_name(${1:classid}, ${2:name[]}, ${3:len})" },
		{ "trigger": "zp_class_human_get_next\tzp50_class_human.inc - 33", "contents": "zp_class_human_get_next(${1:id})" },
		{ "trigger": "zp_class_human_register\tzp50_class_human.inc - 57", "contents": "zp_class_human_register(${1:const name[]}, ${2:const description[]}, ${3:health}, ${4:Float:speed}, ${5:Float:gravity})" },
		{ "trigger": "zp_class_human_register_model\tzp50_class_human.inc - 66", "contents": "zp_class_human_register_model(${1:classid}, ${2:const model[]})" },
		{ "trigger": "zp_class_human_set_next\tzp50_class_human.inc - 42", "contents": "zp_class_human_set_next(${1:id}, ${2:classid})" },
		{ "trigger": "zp_class_human_show_menu\tzp50_class_human.inc - 101", "contents": "zp_class_human_show_menu(${1:id})" },
		{ "trigger": "zp_class_nemesis_get\tzp50_class_nemesis.inc - 24", "contents": "zp_class_nemesis_get(${1:id})" },
		{ "trigger": "zp_class_nemesis_get_count\tzp50_class_nemesis.inc - 39", "contents": "zp_class_nemesis_get_count()" },
		{ "trigger": "zp_class_nemesis_set\tzp50_class_nemesis.inc - 32", "contents": "zp_class_nemesis_set(${1:id})" },
		{ "trigger": "zp_class_survivor_get\tzp50_class_survivor.inc - 24", "contents": "zp_class_survivor_get(${1:id})" },
		{ "trigger": "zp_class_survivor_get_count\tzp50_class_survivor.inc - 39", "contents": "zp_class_survivor_get_count()" },
		{ "trigger": "zp_class_survivor_set\tzp50_class_survivor.inc - 32", "contents": "zp_class_survivor_set(${1:id})" },
		{ "trigger": "zp_class_zombie_get_current\tzp50_class_zombie.inc - 24", "contents": "zp_class_zombie_get_current(${1:id})" },
		{ "trigger": "zp_class_zombie_get_desc\tzp50_class_zombie.inc - 122", "contents": "zp_class_zombie_get_desc(${1:classid}, ${2:description[]}, ${3:len})" },
		{ "trigger": "zp_class_zombie_get_id\tzp50_class_zombie.inc - 102", "contents": "zp_class_zombie_get_id(${1:const name[]})" },
		{ "trigger": "zp_class_zombie_get_kb\tzp50_class_zombie.inc - 130", "contents": "zp_class_zombie_get_kb(${1:classid})" },
		{ "trigger": "zp_class_zombie_get_max_health\tzp50_class_zombie.inc - 52", "contents": "zp_class_zombie_get_max_health(${1:id}, ${2:classid})" },
		{ "trigger": "zp_class_zombie_get_name\tzp50_class_zombie.inc - 112", "contents": "zp_class_zombie_get_name(${1:classid}, ${2:name[]}, ${3:len})" },
		{ "trigger": "zp_class_zombie_get_next\tzp50_class_zombie.inc - 32", "contents": "zp_class_zombie_get_next(${1:id})" },
		{ "trigger": "zp_class_zombie_register\tzp50_class_zombie.inc - 67", "contents": "zp_class_zombie_register(${1:const name[]}, ${2:const description[]}, ${3:health}, ${4:Float:speed}, ${5:Float:gravity})" },
		{ "trigger": "zp_class_zombie_register_claw\tzp50_class_zombie.inc - 85", "contents": "zp_class_zombie_register_claw(${1:classid}, ${2:const clawmodel[]})" },
		{ "trigger": "zp_class_zombie_register_kb\tzp50_class_zombie.inc - 94", "contents": "zp_class_zombie_register_kb(${1:classid}, ${2:Float:knockback})" },
		{ "trigger": "zp_class_zombie_register_model\tzp50_class_zombie.inc - 76", "contents": "zp_class_zombie_register_model(${1:classid}, ${2:const model[]})" },
		{ "trigger": "zp_class_zombie_set_next\tzp50_class_zombie.inc - 41", "contents": "zp_class_zombie_set_next(${1:id}, ${2:classid})" },
		{ "trigger": "zp_class_zombie_show_menu\tzp50_class_zombie.inc - 137", "contents": "zp_class_zombie_show_menu(${1:id})" },
		{ "trigger": "zp_colored_print\tzp50_colorchat.inc - 16", "contents": "zp_colored_print(${1:target}, ${2:const message[]}, ${3:any:...})" },
		{ "trigger": "zp_core_cure\tzp50_core.inc - 79", "contents": "zp_core_cure(${1:id}, ${2:attacker = 0})" },
		{ "trigger": "zp_core_force_cure\tzp50_core.inc - 90", "contents": "zp_core_force_cure(${1:id})" },
		{ "trigger": "zp_core_force_infect\tzp50_core.inc - 89", "contents": "zp_core_force_infect(${1:id})" },
		{ "trigger": "zp_core_get_human_count\tzp50_core.inc - 61", "contents": "zp_core_get_human_count()" },
		{ "trigger": "zp_core_get_zombie_count\tzp50_core.inc - 54", "contents": "zp_core_get_zombie_count()" },
		{ "trigger": "zp_core_infect\tzp50_core.inc - 70", "contents": "zp_core_infect(${1:id}, ${2:attacker = 0})" },
		{ "trigger": "zp_core_is_first_zombie\tzp50_core.inc - 31", "contents": "zp_core_is_first_zombie(${1:id})" },
		{ "trigger": "zp_core_is_last_human\tzp50_core.inc - 47", "contents": "zp_core_is_last_human(${1:id})" },
		{ "trigger": "zp_core_is_last_zombie\tzp50_core.inc - 39", "contents": "zp_core_is_last_zombie(${1:id})" },
		{ "trigger": "zp_core_is_zombie\tzp50_core.inc - 23", "contents": "zp_core_is_zombie(${1:id})" },
		{ "trigger": "zp_core_respawn_as_zombie\tzp50_core.inc - 98", "contents": "zp_core_respawn_as_zombie(${1:id}, ${2:zombie = true})" },
		{ "trigger": "zp_disinfect_user\tzombieplague.inc - 241", "contents": "zp_disinfect_user(${1:id}, ${2:silent = 0})" },
		{ "trigger": "zp_extra_item_selected\tzombieplague.inc - 475", "contents": "zp_extra_item_selected(${1:id}, ${2:itemid})" },
		{ "trigger": "zp_flashlight_get_charge\tzp50_flashlight.inc - 24", "contents": "zp_flashlight_get_charge(${1:id})" },
		{ "trigger": "zp_flashlight_set_charge\tzp50_flashlight.inc - 32", "contents": "zp_flashlight_set_charge(${1:id}, ${2:charge})" },
		{ "trigger": "zp_force_buy_extra_item\tzombieplague.inc - 280", "contents": "zp_force_buy_extra_item(${1:id}, ${2:itemid}, ${3:ignorecost = 0})" },
		{ "trigger": "zp_fw_class_human_select_pre\tzp50_class_human.inc - 114", "contents": "zp_fw_class_human_select_pre(${1:id}, ${2:classid})" },
		{ "trigger": "zp_fw_class_zombie_select_pre\tzp50_class_zombie.inc - 150", "contents": "zp_fw_class_zombie_select_pre(${1:id}, ${2:classid})" },
		{ "trigger": "zp_fw_core_cure\tzp50_core.inc - 117", "contents": "zp_fw_core_cure(${1:id}, ${2:attacker})" },
		{ "trigger": "zp_fw_core_cure_post\tzp50_core.inc - 118", "contents": "zp_fw_core_cure_post(${1:id}, ${2:attacker})" },
		{ "trigger": "zp_fw_core_cure_pre\tzp50_core.inc - 129", "contents": "zp_fw_core_cure_pre(${1:id}, ${2:attacker})" },
		{ "trigger": "zp_fw_core_infect\tzp50_core.inc - 107", "contents": "zp_fw_core_infect(${1:id}, ${2:attacker})" },
		{ "trigger": "zp_fw_core_infect_post\tzp50_core.inc - 108", "contents": "zp_fw_core_infect_post(${1:id}, ${2:attacker})" },
		{ "trigger": "zp_fw_core_infect_pre\tzp50_core.inc - 128", "contents": "zp_fw_core_infect_pre(${1:id}, ${2:attacker})" },
		{ "trigger": "zp_fw_core_last_human\tzp50_core.inc - 139", "contents": "zp_fw_core_last_human(${1:id})" },
		{ "trigger": "zp_fw_core_last_zombie\tzp50_core.inc - 138", "contents": "zp_fw_core_last_zombie(${1:id})" },
		{ "trigger": "zp_fw_deathmatch_respawn_pre\tzp50_deathmatch.inc - 15", "contents": "zp_fw_deathmatch_respawn_pre(${1:id})" },
		{ "trigger": "zp_fw_gamemodes_choose_post\tzp50_gamemodes.inc - 121", "contents": "zp_fw_gamemodes_choose_post(${1:game_mode_id}, ${2:target_player})" },
		{ "trigger": "zp_fw_gamemodes_choose_pre\tzp50_gamemodes.inc - 113", "contents": "zp_fw_gamemodes_choose_pre(${1:game_mode_id}, ${2:skipchecks})" },
		{ "trigger": "zp_fw_gamemodes_end\tzp50_gamemodes.inc - 137", "contents": "zp_fw_gamemodes_end(${1:game_mode_id})" },
		{ "trigger": "zp_fw_gamemodes_start\tzp50_gamemodes.inc - 128", "contents": "zp_fw_gamemodes_start(${1:game_mode_id})" },
		{ "trigger": "zp_fw_grenade_frost_unfreeze\tzp50_grenade_frost.inc - 14", "contents": "zp_fw_grenade_frost_unfreeze(${1:id})" },
		{ "trigger": "zp_fw_items_select_post\tzp50_items.inc - 95", "contents": "zp_fw_items_select_post(${1:id}, ${2:itemid}, ${3:ignorecost})" },
		{ "trigger": "zp_fw_items_select_pre\tzp50_items.inc - 86", "contents": "zp_fw_items_select_pre(${1:id}, ${2:itemid}, ${3:ignorecost})" },
		{ "trigger": "zp_gamemodes_get_allow_infect\tzp50_gamemodes.inc - 102", "contents": "zp_gamemodes_get_allow_infect()" },
		{ "trigger": "zp_gamemodes_get_chosen\tzp50_gamemodes.inc - 47", "contents": "zp_gamemodes_get_chosen()" },
		{ "trigger": "zp_gamemodes_get_count\tzp50_gamemodes.inc - 88", "contents": "zp_gamemodes_get_count()" },
		{ "trigger": "zp_gamemodes_get_current\tzp50_gamemodes.inc - 54", "contents": "zp_gamemodes_get_current()" },
		{ "trigger": "zp_gamemodes_get_default\tzp50_gamemodes.inc - 40", "contents": "zp_gamemodes_get_default()" },
		{ "trigger": "zp_gamemodes_get_id\tzp50_gamemodes.inc - 62", "contents": "zp_gamemodes_get_id(${1:const name[]})" },
		{ "trigger": "zp_gamemodes_get_name\tzp50_gamemodes.inc - 72", "contents": "zp_gamemodes_get_name(${1:game_mode_id}, ${2:name[]}, ${3:len})" },
		{ "trigger": "zp_gamemodes_register\tzp50_gamemodes.inc - 25", "contents": "zp_gamemodes_register(${1:const name[]})" },
		{ "trigger": "zp_gamemodes_set_allow_infect\tzp50_gamemodes.inc - 95", "contents": "zp_gamemodes_set_allow_infect(${1:allow = true})" },
		{ "trigger": "zp_gamemodes_set_default\tzp50_gamemodes.inc - 33", "contents": "zp_gamemodes_set_default(${1:game_mode_id})" },
		{ "trigger": "zp_gamemodes_start\tzp50_gamemodes.inc - 81", "contents": "zp_gamemodes_start(${1:game_mode_id}, ${2:target_player = RANDOM_TARGET_PLAYER})" },
		{ "trigger": "zp_get_extra_item_id\tzombieplague.inc - 401", "contents": "zp_get_extra_item_id(${1:const name[]})" },
		{ "trigger": "zp_get_human_count\tzombieplague.inc - 345", "contents": "zp_get_human_count()" },
		{ "trigger": "zp_get_nemesis_count\tzombieplague.inc - 352", "contents": "zp_get_nemesis_count()" },
		{ "trigger": "zp_get_survivor_count\tzombieplague.inc - 359", "contents": "zp_get_survivor_count()" },
		{ "trigger": "zp_get_user_ammo_packs\tzombieplague.inc - 167", "contents": "zp_get_user_ammo_packs(${1:id})" },
		{ "trigger": "zp_get_user_batteries\tzombieplague.inc - 193", "contents": "zp_get_user_batteries(${1:id})" },
		{ "trigger": "zp_get_user_first_zombie\tzombieplague.inc - 118", "contents": "zp_get_user_first_zombie(${1:id})" },
		{ "trigger": "zp_get_user_last_human\tzombieplague.inc - 134", "contents": "zp_get_user_last_human(${1:id})" },
		{ "trigger": "zp_get_user_last_zombie\tzombieplague.inc - 126", "contents": "zp_get_user_last_zombie(${1:id})" },
		{ "trigger": "zp_get_user_nemesis\tzombieplague.inc - 102", "contents": "zp_get_user_nemesis(${1:id})" },
		{ "trigger": "zp_get_user_next_class\tzombieplague.inc - 150", "contents": "zp_get_user_next_class(${1:id})" },
		{ "trigger": "zp_get_user_nightvision\tzombieplague.inc - 209", "contents": "zp_get_user_nightvision(${1:id})" },
		{ "trigger": "zp_get_user_survivor\tzombieplague.inc - 110", "contents": "zp_get_user_survivor(${1:id})" },
		{ "trigger": "zp_get_user_zombie\tzombieplague.inc - 94", "contents": "zp_get_user_zombie(${1:id})" },
		{ "trigger": "zp_get_user_zombie_class\tzombieplague.inc - 142", "contents": "zp_get_user_zombie_class(${1:id})" },
		{ "trigger": "zp_get_zombie_class_id\tzombieplague.inc - 409", "contents": "zp_get_zombie_class_id(${1:const name[]})" },
		{ "trigger": "zp_get_zombie_class_info\tzombieplague.inc - 419", "contents": "zp_get_zombie_class_info(${1:classid}, ${2:info[]}, ${3:len})" },
		{ "trigger": "zp_get_zombie_count\tzombieplague.inc - 338", "contents": "zp_get_zombie_count()" },
		{ "trigger": "zp_get_zombie_maxhealth\tzombieplague.inc - 185", "contents": "zp_get_zombie_maxhealth(${1:id})" },
		{ "trigger": "zp_has_round_started\tzombieplague.inc - 303", "contents": "zp_has_round_started()" },
		{ "trigger": "zp_infect_user\tzombieplague.inc - 230", "contents": "zp_infect_user(${1:id}, ${2:infector = 0}, ${3:silent = 0}, ${4:rewards = 0})" },
		{ "trigger": "zp_is_nemesis_round\tzombieplague.inc - 310", "contents": "zp_is_nemesis_round()" },
		{ "trigger": "zp_is_plague_round\tzombieplague.inc - 331", "contents": "zp_is_plague_round()" },
		{ "trigger": "zp_is_survivor_round\tzombieplague.inc - 317", "contents": "zp_is_survivor_round()" },
		{ "trigger": "zp_is_swarm_round\tzombieplague.inc - 324", "contents": "zp_is_swarm_round()" },
		{ "trigger": "zp_items_force_buy\tzp50_items.inc - 72", "contents": "zp_items_force_buy(${1:id}, ${2:itemid}, ${3:ignorecost = false})" },
		{ "trigger": "zp_items_get_cost\tzp50_items.inc - 55", "contents": "zp_items_get_cost(${1:itemid})" },
		{ "trigger": "zp_items_get_id\tzp50_items.inc - 37", "contents": "zp_items_get_id(${1:const name[]})" },
		{ "trigger": "zp_items_get_name\tzp50_items.inc - 47", "contents": "zp_items_get_name(${1:itemid}, ${2:name[]}, ${3:len})" },
		{ "trigger": "zp_items_register\tzp50_items.inc - 29", "contents": "zp_items_register(${1:const name[]}, ${2:cost})" },
		{ "trigger": "zp_items_show_menu\tzp50_items.inc - 62", "contents": "zp_items_show_menu(${1:id})" },
		{ "trigger": "zp_log\tzp50_log.inc - 10", "contents": "zp_log(${1:const message_fmt[]}, ${2:any:...})" },
		{ "trigger": "zp_make_user_nemesis\tzombieplague.inc - 251", "contents": "zp_make_user_nemesis(${1:id})" },
		{ "trigger": "zp_make_user_survivor\tzombieplague.inc - 261", "contents": "zp_make_user_survivor(${1:id})" },
		{ "trigger": "zp_override_user_model\tzombieplague.inc - 293", "contents": "zp_override_user_model(${1:id}, ${2:const newmodel[]}, ${3:modelindex = 0})" },
		{ "trigger": "zp_register_extra_item\tzombieplague.inc - 375", "contents": "zp_register_extra_item(${1:const name[]}, ${2:cost}, ${3:teams})" },
		{ "trigger": "zp_register_zombie_class\tzombieplague.inc - 393", "contents": "zp_register_zombie_class(${1:const name[]}, ${2:const info[]}, ${3:const model[]}, ${4:const clawmodel[]}, ${5:hp}, ${6:speed}, ${7:Float:gravity}, ${8:Float:knockback})" },
		{ "trigger": "zp_respawn_user\tzombieplague.inc - 270", "contents": "zp_respawn_user(${1:id}, ${2:team})" },
		{ "trigger": "zp_round_ended\tzombieplague.inc - 435", "contents": "zp_round_ended(${1:winteam})" },
		{ "trigger": "zp_round_started\tzombieplague.inc - 428", "contents": "zp_round_started(${1:gamemode}, ${2:id})" },
		{ "trigger": "zp_set_user_ammo_packs\tzombieplague.inc - 175", "contents": "zp_set_user_ammo_packs(${1:id}, ${2:amount})" },
		{ "trigger": "zp_set_user_batteries\tzombieplague.inc - 201", "contents": "zp_set_user_batteries(${1:id}, ${2:charge})" },
		{ "trigger": "zp_set_user_nightvision\tzombieplague.inc - 217", "contents": "zp_set_user_nightvision(${1:id}, ${2:set})" },
		{ "trigger": "zp_set_user_zombie_class\tzombieplague.inc - 159", "contents": "zp_set_user_zombie_class(${1:id}, ${2:classid})" },
		{ "trigger": "zp_user_humanize_attempt\tzombieplague.inc - 464", "contents": "zp_user_humanize_attempt(${1:id}, ${2:survivor})" },
		{ "trigger": "zp_user_humanized_post\tzombieplague.inc - 454", "contents": "zp_user_humanized_post(${1:id}, ${2:survivor})" },
		{ "trigger": "zp_user_humanized_pre\tzombieplague.inc - 453", "contents": "zp_user_humanized_pre(${1:id}, ${2:survivor})" },
		{ "trigger": "zp_user_infect_attempt\tzombieplague.inc - 463", "contents": "zp_user_infect_attempt(${1:id}, ${2:infector}, ${3:nemesis})" },
		{ "trigger": "zp_user_infected_post\tzombieplague.inc - 445", "contents": "zp_user_infected_post(${1:id}, ${2:infector}, ${3:nemesis})" },
		{ "trigger": "zp_user_infected_pre\tzombieplague.inc - 444", "contents": "zp_user_infected_pre(${1:id}, ${2:infector}, ${3:nemesis})" },
		{ "trigger": "zp_user_last_human\tzombieplague.inc - 498", "contents": "zp_user_last_human(${1:id})" },
		{ "trigger": "zp_user_last_zombie\tzombieplague.inc - 491", "contents": "zp_user_last_zombie(${1:id})" },
		{ "trigger": "zp_user_unfrozen\tzombieplague.inc - 482", "contents": "zp_user_unfrozen(${1:id})" }, "ADMIN_ADMIN",
		"ADMIN_ALL",
		"ADMIN_BAN",
		"ADMIN_CFG",
		"ADMIN_CHAT",
		"ADMIN_CVAR",
		"ADMIN_IMMUNITY",
		"ADMIN_KICK",
		"ADMIN_LEVEL_A",
		"ADMIN_LEVEL_B",
		"ADMIN_LEVEL_C",
		"ADMIN_LEVEL_D",
		"ADMIN_LEVEL_E",
		"ADMIN_LEVEL_F",
		"ADMIN_LEVEL_G",
		"ADMIN_LEVEL_H",
		"ADMIN_MAP",
		"ADMIN_MENU",
		"ADMIN_PASSWORD",
		"ADMIN_PERMBAN",
		"ADMIN_RCON",
		"ADMIN_RESERVATION",
		"ADMIN_SLAY",
		"ADMIN_SUPREME",
		"ADMIN_UNBAN",
		"ADMIN_USER",
		"ADMIN_VOTE",
		"AFRICA",
		"ALLIES",
		"AMMO_30CAL",
		"AMMO_ALTRIFLE",
		"AMMO_GREN",
		"AMMO_HEAVY",
		"AMMO_MG42",
		"AMMO_PISTOL",
		"AMMO_RIFLE",
		"AMMO_ROCKET",
		"AMMO_SMG",
		"AMMO_SPRING",
		"AMOUNT_BLIND_FULLY",
		"AMOUNT_BLIND_PARTIALLY",
		"AMXMODX",
		"AMXMOD_BCOMPAT",
		"AMXX_VERSION",
		"AMXX_VERSION_NUM",
		"AMX_ERR_BOUNDS",
		"AMX_ERR_DIVIDE",
		"AMX_ERR_GENERAL",
		"AMX_ERR_HEAPLOW",
		"AMX_ERR_MEMACCESS",
		"AMX_ERR_NATIVE",
		"AMX_ERR_NONE",
		"AMX_ERR_NOTFOUND",
		"AMX_ERR_PARAMS",
		"AMX_ERR_STACKERR",
		"AMX_ERR_STACKLOW",
		"AMX_FLAG_BROWSE",
		"AMX_FLAG_BYTEOPC",
		"AMX_FLAG_COMPACT",
		"AMX_FLAG_DEBUG",
		"AMX_FLAG_JITC",
		"AMX_FLAG_NOCHECKS",
		"AMX_FLAG_NTVREG",
		"AMX_FLAG_OLDFILE",
		"AMX_FLAG_RELOC",
		"ANGLEVECTORS_FORWARD",
		"ANGLEVECTORS_RIGHT",
		"ANGLEVECTORS_UP",
		"ANGLEVECTOR_FORWARD",
		"ANGLEVECTOR_RIGHT",
		"ANGLEVECTOR_UP",
		"ANYMAL_OWNER_GLOBAL",
		"ANY_TYPE_ARRAY",
		"ANY_TYPE_BOOL",
		"ANY_TYPE_CUSTOM",
		"ANY_TYPE_FLOAT",
		"ANY_TYPE_INT",
		"ANY_TYPE_NONE",
		"ANY_TYPE_POINTER",
		"ANY_TYPE_STRING",
		"ANY_TYPE_VECTOR",
		"ARG_ANGLE",
		"ARG_BYTE",
		"ARG_CHAR",
		"ARG_COORD",
		"ARG_ENTITY",
		"ARG_LONG",
		"ARG_SHORT",
		"ARG_STRING",
		"ASIA",
		"ASSAULT_RIFLE",
		"ATTN_IDLE",
		"ATTN_NONE",
		"ATTN_NORM",
		"ATTN_STATIC",
		"AXIS",
		"Attack_FinalFlash",
		"Attack_GalletGun",
		"Attack_GenericBeam",
		"Attack_Kamehameha",
		"Attack_Kametorpedo",
		"Attack_Renzoku",
		"Attack_SpiritBomb",
		"Attack_Throw",
		"BHA",
		"BLOCK_BYTE",
		"BLOCK_CHAR",
		"BLOCK_INT",
		"BLOCK_NOT",
		"BLOCK_ONCE",
		"BLOCK_SET",
		"BLOCK_SHORT",
		"BLUE",
		"BLUE",
		"BLUE",
		"BUFFER_SIZE",
		"Blue",
		"Blue",
		"CAMERA_3RDPERSON",
		"CAMERA_NONE",
		"CAMERA_TOPDOWN",
		"CAMERA_UPLEFT",
		"CA_allies_numcap",
		"CA_axis_numcap",
		"CA_can_cap",
		"CA_edict",
		"CA_sprite",
		"CA_target",
		"CA_timetocap",
		"CD_AmmoCells",
		"CD_AmmoNails",
		"CD_AmmoRockets",
		"CD_AmmoShells",
		"CD_DeadFlag",
		"CD_FOV",
		"CD_Flags",
		"CD_Health",
		"CD_ID",
		"CD_MaxSpeed",
		"CD_Origin",
		"CD_PhysInfo",
		"CD_PunchAngle",
		"CD_PushMsec",
		"CD_Velocity",
		"CD_ViewModel",
		"CD_ViewOfs",
		"CD_WaterJumpTime",
		"CD_WaterLevel",
		"CD_WaterType",
		"CD_WeaponAnim",
		"CD_Weapons",
		"CD_bInDuck",
		"CD_fUser1",
		"CD_fUser2",
		"CD_fUser3",
		"CD_fUser4",
		"CD_flDuckTime",
		"CD_flNextAttack",
		"CD_flSwimTime",
		"CD_flTimeStepSound",
		"CD_iUser1",
		"CD_iUser2",
		"CD_iUser3",
		"CD_iUser4",
		"CD_tfState",
		"CD_vUser1",
		"CD_vUser2",
		"CD_vUser3",
		"CD_vUser4",
		"CFG_DONE",
		"CFG_READ",
		"CFG_RELOAD",
		"CHAN_AUTO",
		"CHAN_BODY",
		"CHAN_ITEM",
		"CHAN_NETWORKVOICE_BASE",
		"CHAN_NETWORKVOICE_END",
		"CHAN_STATIC",
		"CHAN_STREAM",
		"CHAN_VOICE",
		"CHAN_WEAPON",
		"CLASS_COMMANDER",
		"CLASS_DEAD",
		"CLASS_FADE",
		"CLASS_FILE",
		"CLASS_GESTATE",
		"CLASS_GORGE",
		"CLASS_HEAVY",
		"CLASS_JETPACK",
		"CLASS_LERK",
		"CLASS_MARINE",
		"CLASS_NOTEAM",
		"CLASS_ONOS",
		"CLASS_SKULK",
		"CLASS_UNKNOWN",
		"CLIENT_FLAG_1",
		"CLIENT_FLAG_2",
		"CLIENT_FLAG_3",
		"CLIENT_FLAG_4",
		"CMDTARGET_ALLOW_SELF",
		"CMDTARGET_NO_BOTS",
		"CMDTARGET_OBEY_IMMUNITY",
		"CMDTARGET_ONLY_ALIVE",
		"CONSTANT_ENTITY1",
		"CONSTANT_ENTITY2",
		"CONTENTS_CLIP",
		"CONTENTS_CURRENT_0",
		"CONTENTS_CURRENT_180",
		"CONTENTS_CURRENT_270",
		"CONTENTS_CURRENT_90",
		"CONTENTS_CURRENT_DOWN",
		"CONTENTS_CURRENT_UP",
		"CONTENTS_EMPTY",
		"CONTENTS_LADDER",
		"CONTENTS_LAVA",
		"CONTENTS_ORIGIN",
		"CONTENTS_SKY",
		"CONTENTS_SLIME",
		"CONTENTS_SOLID",
		"CONTENTS_TRANSLUCENT",
		"CONTENTS_WATER",
		"CONTENT_FLYFIELD",
		"CONTENT_FOG",
		"CONTENT_GRAVITY_FLYFIELD",
		"CONTINENT_ERROR",
		"CP_allies_capsound",
		"CP_area",
		"CP_axis_capsound",
		"CP_can_touch",
		"CP_default_owner",
		"CP_edict",
		"CP_icon_allies",
		"CP_icon_axis",
		"CP_icon_neutral",
		"CP_index",
		"CP_model_allies",
		"CP_model_axis",
		"CP_model_body_allies",
		"CP_model_body_axis",
		"CP_model_body_neutral",
		"CP_model_neutral",
		"CP_name",
		"CP_origin_x",
		"CP_origin_y",
		"CP_owner",
		"CP_points_for_cap",
		"CP_pointvalue",
		"CP_reset_capsound",
		"CP_targetname",
		"CP_team_points",
		"CP_visible",
		"CROWBAR",
		"CSDM_DISABLE",
		"CSDM_DROP_CONTINUE",
		"CSDM_DROP_IGNORE",
		"CSDM_DROP_REMOVE",
		"CSDM_ENABLE",
		"CSDM_FFA_DISABLE",
		"CSDM_FFA_ENABLE",
		"CSDM_OPTION_SAYRESPAWN",
		"CSDM_SET_DEFAULT",
		"CSDM_SET_DISABLED",
		"CSDM_SET_ENABLED",
		"CSDM_VERSION",
		"CSW_AK47",
		"CSW_AUG",
		"CSW_AWP",
		"CSW_C4",
		"CSW_DEAGLE",
		"CSW_DEFUSER",
		"CSW_ELITE",
		"CSW_FAMAS",
		"CSW_FIVESEVEN",
		"CSW_FLASHBANG",
		"CSW_G3SG1",
		"CSW_GALI",
		"CSW_GALIL",
		"CSW_GLOCK18",
		"CSW_HEGRENADE",
		"CSW_KNIFE",
		"CSW_M249",
		"CSW_M3",
		"CSW_M4A1",
		"CSW_MAC10",
		"CSW_MP5NAVY",
		"CSW_NVGS",
		"CSW_P228",
		"CSW_P90",
		"CSW_PRIMAMMO",
		"CSW_SCOUT",
		"CSW_SECAMMO",
		"CSW_SG550",
		"CSW_SG552",
		"CSW_SHIELD",
		"CSW_SMOKEGRENADE",
		"CSW_TMP",
		"CSW_UMP45",
		"CSW_USP",
		"CSW_VEST",
		"CSW_VESTHELM",
		"CSW_XM1014",
		"CS_ARMOR_KEVLAR",
		"CS_ARMOR_NONE",
		"CS_ARMOR_VESTHELM",
		"CS_CT_GIGN",
		"CS_CT_GSG9",
		"CS_CT_SAS",
		"CS_CT_URBAN",
		"CS_CT_VIP",
		"CS_DONTCHANGE",
		"CS_KNIFE_MAXSPEED",
		"CS_MAPZONE_BOMBTARGET",
		"CS_MAPZONE_BUY",
		"CS_MAPZONE_ESCAPE",
		"CS_MAPZONE_HOSTAGE_RESCUE",
		"CS_MAPZONE_VIP_SAFETY",
		"CS_RESET_ZOOM",
		"CS_SET_AUGSG552_ZOOM",
		"CS_SET_FIRST_ZOOM",
		"CS_SET_NO_ZOOM",
		"CS_SET_SECOND_ZOOM",
		"CS_TEAM_CT",
		"CS_TEAM_SPECTATOR",
		"CS_TEAM_T",
		"CS_TEAM_UNASSIGNED",
		"CS_T_ARCTIC",
		"CS_T_GUERILLA",
		"CS_T_LEET",
		"CS_T_TERROR",
		"CZ_CT_SPETSNAZ",
		"CZ_T_MILITIA",
		"Character_Buu",
		"Character_Cell",
		"Character_Frieza",
		"Character_Gohan",
		"Character_Goku",
		"Character_Krillin",
		"Character_Piccolo",
		"Character_Trunks",
		"Character_Vegeta",
		"AdminProp_Access",
		"AdminProp_Auth",
		"AdminProp_Flags",
		"AdminProp_Password",
		"Array",
		"ColorChat",
		"ColorChat_Version",
		"Continent",
		"CsTeams",
		"CvarBound_Lower",
		"CvarBound_Upper",
		"CvarReturn_AlreadyBounded",
		"CvarReturn_AlreadyLocked",
		"CvarReturn_AlreadySet",
		"CvarReturn_DuplicatedHook",
		"CvarStatus_HasMaxValue",
		"CvarStatus_HasMinValue",
		"CvarStatus_HookActive",
		"CvarStatus_HookRegistered",
		"CvarStatus_LockActive",
		"CvarStatus_LockRegistered",
		"CvarStatus_NewCvar",
		"DAMAGE_AIM",
		"DAMAGE_NO",
		"DAMAGE_YES",
		"DBC",
		"DBDriver",
		"DBQ",
		"DEAD_DEAD",
		"DEAD_DISCARDBODY",
		"DEAD_DYING",
		"DEAD_NO",
		"DEAD_RESPAWNABLE",
		"DEFAULT_ARMOR",
		"DLLFunc_AddToFullPack",
		"DLLFunc_Blocked",
		"DLLFunc_ClientCommand",
		"DLLFunc_ClientConnect",
		"DLLFunc_ClientDisconnect",
		"DLLFunc_ClientKill",
		"DLLFunc_ClientPutInServer",
		"DLLFunc_ClientUserInfoChanged",
		"DLLFunc_CmdEnd",
		"DLLFunc_CmdStart",
		"DLLFunc_CreateBaseline",
		"DLLFunc_CreateInstBaselines",
		"DLLFunc_GameInit",
		"DLLFunc_GetGameDescription",
		"DLLFunc_GetHullBounds",
		"DLLFunc_KeyValue",
		"DLLFunc_PM_FindTextureType",
		"DLLFunc_ParmsChangeLevel",
		"DLLFunc_ParmsNewLevel",
		"DLLFunc_PlayerPostThink",
		"DLLFunc_PlayerPreThink",
		"DLLFunc_RegisterEncoders",
		"DLLFunc_ServerDeactivate",
		"DLLFunc_SetAbsBox",
		"DLLFunc_Spawn",
		"DLLFunc_SpectatorConnect",
		"DLLFunc_SpectatorDisconnect",
		"DLLFunc_SpectatorThink",
		"DLLFunc_StartFrame",
		"DLLFunc_Sys_Error",
		"DLLFunc_Think",
		"DLLFunc_Touch",
		"DLLFunc_UpdateClientData",
		"DLLFunc_Use",
		"DLLFunc_pfnAllowLagCompensation",
		"DMG_ACID",
		"DMG_ALWAYSGIB",
		"DMG_BLAST",
		"DMG_BULLET",
		"DMG_BURN",
		"DMG_CLUB",
		"DMG_CRUSH",
		"DMG_DROWN",
		"DMG_DROWNRECOVER",
		"DMG_ENERGYBEAM",
		"DMG_FALL",
		"DMG_FREEZE",
		"DMG_GENERIC",
		"DMG_MORTAR",
		"DMG_NERVEGAS",
		"DMG_NEVERGIB",
		"DMG_PARALYZE",
		"DMG_POISON",
		"DMG_RADIATION",
		"DMG_SHOCK",
		"DMG_SLASH",
		"DMG_SLOWBURN",
		"DMG_SLOWFREEZE",
		"DMG_SONIC",
		"DMG_TIMEBASED",
		"DODC_30CAL",
		"DODC_BAR",
		"DODC_BAZOOKA",
		"DODC_BREN",
		"DODC_CARBINE",
		"DODC_ENFIELD",
		"DODC_FG42",
		"DODC_GARAND",
		"DODC_GREASE",
		"DODC_K43",
		"DODC_KAR",
		"DODC_MARKSMAN",
		"DODC_MG34",
		"DODC_MG42",
		"DODC_MP40",
		"DODC_MP44",
		"DODC_PANZERJAGER",
		"DODC_PIAT",
		"DODC_SCHARFSCHUTZE",
		"DODC_SCOPED_FG42",
		"DODC_SNIPER",
		"DODC_STEN",
		"DODC_THOMPSON",
		"DODMAX_WEAPONS",
		"DODWT_GRENADE",
		"DODWT_MELEE",
		"DODWT_OTHER",
		"DODWT_PRIMARY",
		"DODWT_SECONDARY",
		"DODW_30_CAL",
		"DODW_AMERKNIFE",
		"DODW_BAR",
		"DODW_BAZOOKA",
		"DODW_BREN",
		"DODW_BRITKNIFE",
		"DODW_COLT",
		"DODW_ENFIELD",
		"DODW_ENFIELD_BAYONET",
		"DODW_FG42",
		"DODW_FOLDING_CARBINE",
		"DODW_GARAND",
		"DODW_GARAND_BUTT",
		"DODW_GERKNIFE",
		"DODW_GREASEGUN",
		"DODW_HANDGRENADE",
		"DODW_HANDGRENADE_EX",
		"DODW_K43",
		"DODW_K43_BUTT",
		"DODW_KAR",
		"DODW_KAR_BAYONET",
		"DODW_LUGER",
		"DODW_M1_CARBINE",
		"DODW_MG34",
		"DODW_MG42",
		"DODW_MILLS_BOMB",
		"DODW_MORTAR",
		"DODW_MP40",
		"DODW_PANZERSCHRECK",
		"DODW_PIAT",
		"DODW_SCOPED_ENFIELD",
		"DODW_SCOPED_FG42",
		"DODW_SCOPED_KAR",
		"DODW_SPADE",
		"DODW_SPRINGFIELD",
		"DODW_STEN",
		"DODW_STG44",
		"DODW_STICKGRENADE",
		"DODW_STICKGRENADE_EX",
		"DODW_THOMPSON",
		"DODW_WEBLEY",
		"DONT_IGNORE_MONSTERS",
		"DPACK_CELL",
		"DPACK_INVALID",
		"DPACK_STRING",
		"DRC_CMD_BANNER",
		"DRC_CMD_CAMERA",
		"DRC_CMD_EVENT",
		"DRC_CMD_FADE",
		"DRC_CMD_LAST",
		"DRC_CMD_MESSAGE",
		"DRC_CMD_MODE",
		"DRC_CMD_NONE",
		"DRC_CMD_SHAKE",
		"DRC_CMD_SOUND",
		"DRC_CMD_START",
		"DRC_CMD_STATUS",
		"DRC_CMD_STUFFTEXT",
		"DRC_CMD_TIMESCALE",
		"DRC_FLAG_DRAMATIC",
		"DRC_FLAG_FACEPLAYER",
		"DRC_FLAG_FINAL",
		"DRC_FLAG_INTRO",
		"DRC_FLAG_NO_RANDOM",
		"DRC_FLAG_PRIO_MASK",
		"DRC_FLAG_SIDE",
		"DRC_FLAG_SLOWMOTION",
		"DYNAMITE",
		"D_LONG",
		"D_SHORT",
		"D_ZERO",
		"Direction_Backward",
		"Direction_Down",
		"Direction_Forward",
		"Direction_Left",
		"Direction_Right",
		"Direction_Up",
		"DontChange",
		"EFLAG_SLERP",
		"EF_BRIGHTFIELD",
		"EF_BRIGHTLIGHT",
		"EF_DIMLIGHT",
		"EF_INVLIGHT",
		"EF_LIGHT",
		"EF_MUZZLEFLASH",
		"EF_NODRAW",
		"EF_NOINTERP",
		"ESFC_BUU",
		"ESFC_CELL",
		"ESFC_FRIEZA",
		"ESFC_GOHAN",
		"ESFC_GOKU",
		"ESFC_KRILLIN",
		"ESFC_NOCLASS",
		"ESFC_PICCOLO",
		"ESFC_TRUNKS",
		"ESFC_VEGETA",
		"ESFW_BIGBANG",
		"ESFW_BODYPART",
		"ESFW_BURNINGATTACK",
		"ESFW_CANDY",
		"ESFW_DEATHBALL",
		"ESFW_DESTRUCTODISC",
		"ESFW_DRAGONBALL",
		"ESFW_EYELASER",
		"ESFW_FINALFLASH",
		"ESFW_FINGERLASER",
		"ESFW_FINISHINGBUSTER",
		"ESFW_FLAMETHROWER",
		"ESFW_FRIEZADISC",
		"ESFW_GALLITGUN",
		"ESFW_GENERICBEAM",
		"ESFW_KAMEHAMEHA",
		"ESFW_KAMETORPEDO",
		"ESFW_KIBLAST",
		"ESFW_MASENKO",
		"ESFW_MELEE",
		"ESFW_MOUTHBLAST",
		"ESFW_NONE",
		"ESFW_POWERBEAM",
		"ESFW_REGENERATION",
		"ESFW_RENZOKU",
		"ESFW_SCATTERBEAM",
		"ESFW_SCATTERSHOT",
		"ESFW_SENSU",
		"ESFW_SHIELDATTACK",
		"ESFW_SOLARFLARE",
		"ESFW_SPECIALBEAMCANNON",
		"ESFW_SPIRITBOMB",
		"ESFW_SWORD",
		"ESFW_TELEKINESIS",
		"ESF_CHARGING",
		"ESF_CLASS_BUU",
		"ESF_CLASS_CELL",
		"ESF_CLASS_FRIEZA",
		"ESF_CLASS_GOHAN",
		"ESF_CLASS_GOKU",
		"ESF_CLASS_KRILLIN",
		"ESF_CLASS_NONE",
		"ESF_CLASS_PICCOLO",
		"ESF_CLASS_TRUNKS",
		"ESF_CLASS_VEGETA",
		"ESF_CONTROLLING",
		"ESF_SHOOTING",
		"ESF_SHOT",
		"ES_AimEnt",
		"ES_Angles",
		"ES_AnimTime",
		"ES_BaseVelocity",
		"ES_Blending",
		"ES_Body",
		"ES_ColorMap",
		"ES_Controller",
		"ES_Effects",
		"ES_EndPos",
		"ES_EntityType",
		"ES_FOV",
		"ES_Frame",
		"ES_FrameRate",
		"ES_Friction",
		"ES_GaitSequence",
		"ES_Gravity",
		"ES_Health",
		"ES_ImpactTime",
		"ES_Maxs",
		"ES_MessageNum",
		"ES_Mins",
		"ES_ModelIndex",
		"ES_MoveType",
		"ES_MsgTime",
		"ES_Number",
		"ES_OldButtons",
		"ES_OnGround",
		"ES_Origin",
		"ES_Owner",
		"ES_PlayerClass",
		"ES_RenderAmt",
		"ES_RenderColor",
		"ES_RenderFx",
		"ES_RenderMode",
		"ES_Scale",
		"ES_Sequence",
		"ES_Skin",
		"ES_Solid",
		"ES_Spectator",
		"ES_StartPos",
		"ES_StartTime",
		"ES_Team",
		"ES_UseHull",
		"ES_Velocity",
		"ES_WeaponAnim",
		"ES_WeaponModel",
		"ES_eFlags",
		"ES_fUser1",
		"ES_fUser2",
		"ES_fUser3",
		"ES_fUser4",
		"ES_flFallVelocity",
		"ES_iStepLeft",
		"ES_iUser1",
		"ES_iUser2",
		"ES_iUser3",
		"ES_iUser4",
		"ES_vUser1",
		"ES_vUser2",
		"ES_vUser3",
		"ES_vUser4",
		"ET_CONTINUE",
		"ET_IGNORE",
		"ET_STOP",
		"ET_STOP2",
		"EUROPE",
		"EV_BYTE_blending1",
		"EV_BYTE_blending2",
		"EV_BYTE_controller1",
		"EV_BYTE_controller2",
		"EV_BYTE_controller3",
		"EV_BYTE_controller4",
		"EV_ENT_aiment",
		"EV_ENT_chain",
		"EV_ENT_dmg_inflictor",
		"EV_ENT_enemy",
		"EV_ENT_euser1",
		"EV_ENT_euser2",
		"EV_ENT_euser3",
		"EV_ENT_euser4",
		"EV_ENT_groundentity",
		"EV_ENT_owner",
		"EV_ENT_pContainingEntity",
		"EV_FL_air_finished",
		"EV_FL_animtime",
		"EV_FL_armortype",
		"EV_FL_armorvalue",
		"EV_FL_dmg",
		"EV_FL_dmg_save",
		"EV_FL_dmg_take",
		"EV_FL_dmgtime",
		"EV_FL_flFallVelocity",
		"EV_FL_fov",
		"EV_FL_frags",
		"EV_FL_frame",
		"EV_FL_framerate",
		"EV_FL_friction",
		"EV_FL_fuser1",
		"EV_FL_fuser2",
		"EV_FL_fuser3",
		"EV_FL_fuser4",
		"EV_FL_gravity",
		"EV_FL_health",
		"EV_FL_ideal_yaw",
		"EV_FL_idealpitch",
		"EV_FL_impacttime",
		"EV_FL_ltime",
		"EV_FL_max_health",
		"EV_FL_maxspeed",
		"EV_FL_nextthink",
		"EV_FL_pain_finished",
		"EV_FL_pitch_speed",
		"EV_FL_radsuit_finished",
		"EV_FL_renderamt",
		"EV_FL_scale",
		"EV_FL_speed",
		"EV_FL_starttime",
		"EV_FL_takedamage",
		"EV_FL_teleport_time",
		"EV_FL_yaw_speed",
		"EV_INT_bInDuck",
		"EV_INT_body",
		"EV_INT_button",
		"EV_INT_colormap",
		"EV_INT_deadflag",
		"EV_INT_effects",
		"EV_INT_fixangle",
		"EV_INT_flDuckTime",
		"EV_INT_flSwimTime",
		"EV_INT_flTimeStepSound",
		"EV_INT_flags",
		"EV_INT_gaitsequence",
		"EV_INT_gamestate",
		"EV_INT_groupinfo",
		"EV_INT_iStepLeft",
		"EV_INT_impulse",
		"EV_INT_iuser1",
		"EV_INT_iuser2",
		"EV_INT_iuser3",
		"EV_INT_iuser4",
		"EV_INT_light_level",
		"EV_INT_modelindex",
		"EV_INT_movetype",
		"EV_INT_oldbuttons",
		"EV_INT_playerclass",
		"EV_INT_pushmsec",
		"EV_INT_renderfx",
		"EV_INT_rendermode",
		"EV_INT_sequence",
		"EV_INT_skin",
		"EV_INT_solid",
		"EV_INT_spawnflags",
		"EV_INT_team",
		"EV_INT_waterlevel",
		"EV_INT_watertype",
		"EV_INT_weaponanim",
		"EV_INT_weapons",
		"EV_SZ_classname",
		"EV_SZ_globalname",
		"EV_SZ_message",
		"EV_SZ_model",
		"EV_SZ_netname",
		"EV_SZ_noise",
		"EV_SZ_noise1",
		"EV_SZ_noise2",
		"EV_SZ_noise3",
		"EV_SZ_target",
		"EV_SZ_targetname",
		"EV_SZ_viewmodel",
		"EV_SZ_weaponmodel",
		"EV_VEC_absmax",
		"EV_VEC_absmin",
		"EV_VEC_angles",
		"EV_VEC_avelocity",
		"EV_VEC_basevelocity",
		"EV_VEC_clbasevelocity",
		"EV_VEC_endpos",
		"EV_VEC_maxs",
		"EV_VEC_mins",
		"EV_VEC_movedir",
		"EV_VEC_oldorigin",
		"EV_VEC_origin",
		"EV_VEC_punchangle",
		"EV_VEC_rendercolor",
		"EV_VEC_size",
		"EV_VEC_startpos",
		"EV_VEC_v_angle",
		"EV_VEC_velocity",
		"EV_VEC_view_ofs",
		"EV_VEC_vuser1",
		"EV_VEC_vuser2",
		"EV_VEC_vuser3",
		"EV_VEC_vuser4",
		"EXTRAOFFSET",
		"EXTRAOFFSET_WEAPONBOX",
		"EXTRAOFFSET_WEAPONS",
		"Empty_Handle",
		"EngFunc_AlertMessage",
		"EngFunc_AllocString",
		"EngFunc_AngleVectors",
		"EngFunc_AnimationAutomove",
		"EngFunc_BuildSoundMsg",
		"EngFunc_CanSkipPlayer",
		"EngFunc_ChangeLevel",
		"EngFunc_ChangePitch",
		"EngFunc_ChangeYaw",
		"EngFunc_CheckVisibility",
		"EngFunc_ClientPrintf",
		"EngFunc_CreateEntity",
		"EngFunc_CreateFakeClient",
		"EngFunc_CreateInstBaseline",
		"EngFunc_CreateNamedEntity",
		"EngFunc_CrosshairAngle",
		"EngFunc_DecalIndex",
		"EngFunc_DropToFloor",
		"EngFunc_EmitAmbientSound",
		"EngFunc_EmitSound",
		"EngFunc_EntIsOnFloor",
		"EngFunc_EntitiesInPVS",
		"EngFunc_FadeClientVolume",
		"EngFunc_FindClientInPVS",
		"EngFunc_FindEntityByString",
		"EngFunc_FindEntityInSphere",
		"EngFunc_FreeEntPrivateData",
		"EngFunc_GetAimVector",
		"EngFunc_GetAttachment",
		"EngFunc_GetBonePosition",
		"EngFunc_GetClientListening",
		"EngFunc_GetCurrentPlayer",
		"EngFunc_GetEntityIllum",
		"EngFunc_GetInfoKeyBuffer",
		"EngFunc_GetPhysicsInfoString",
		"EngFunc_GetPhysicsKeyValue",
		"EngFunc_InfoKeyValue",
		"EngFunc_LightStyle",
		"EngFunc_MakeStatic",
		"EngFunc_MakeVectors",
		"EngFunc_MessageBegin",
		"EngFunc_ModelFrames",
		"EngFunc_ModelIndex",
		"EngFunc_MoveToOrigin",
		"EngFunc_NumberOfEntities",
		"EngFunc_ParticleEffect",
		"EngFunc_PlaybackEvent",
		"EngFunc_PointContents",
		"EngFunc_PrecacheEvent",
		"EngFunc_PrecacheGeneric",
		"EngFunc_PrecacheModel",
		"EngFunc_PrecacheSound",
		"EngFunc_RegUserMsg",
		"EngFunc_RemoveEntity",
		"EngFunc_RunPlayerMove",
		"EngFunc_ServerPrint",
		"EngFunc_SetClientKeyValue",
		"EngFunc_SetClientListening",
		"EngFunc_SetClientMaxspeed",
		"EngFunc_SetGroupMask",
		"EngFunc_SetKeyValue",
		"EngFunc_SetModel",
		"EngFunc_SetOrigin",
		"EngFunc_SetPhysicsKeyValue",
		"EngFunc_SetSize",
		"EngFunc_SetView",
		"EngFunc_StaticDecal",
		"EngFunc_SzFromIndex",
		"EngFunc_Time",
		"EngFunc_TraceHull",
		"EngFunc_TraceLine",
		"EngFunc_TraceModel",
		"EngFunc_TraceMonsterHull",
		"EngFunc_TraceSphere",
		"EngFunc_TraceTexture",
		"EngFunc_TraceToss",
		"EngFunc_VecToAngles",
		"EngFunc_VecToYaw",
		"EngFunc_WalkMove",
		"EngFunc_WriteAngle",
		"EngFunc_WriteCoord",
		"Explosion_Blue",
		"Explosion_Green",
		"Explosion_Orange",
		"Explosion_Purple",
		"Explosion_Red",
		"Explosion_White",
		"Explosion_Yellow",
		"Explosions_Total",
		"FCAP_ACROSS_TRANSITION",
		"FCAP_CONTINUOUS_USE",
		"FCAP_CUSTOMSAVE",
		"FCAP_DIRECTIONAL_USE",
		"FCAP_DONT_SAVE",
		"FCAP_IMPULSE_USE",
		"FCAP_MASTER",
		"FCAP_MUST_SPAWN",
		"FCAP_ONOFF_USE",
		"FCVAR_ARCHIVE",
		"FCVAR_CLIENTDLL",
		"FCVAR_EXTDLL",
		"FCVAR_PRINTABLEONLY",
		"FCVAR_PROTECTED",
		"FCVAR_SERVER",
		"FCVAR_SPONLY",
		"FCVAR_UNLOGGED",
		"FCVAR_USERINFO",
		"FEV_CLIENT",
		"FEV_GLOBAL",
		"FEV_HOSTONLY",
		"FEV_NOTHOST",
		"FEV_RELIABLE",
		"FEV_SERVER",
		"FEV_UPDATE",
		"FFADE_IN",
		"FFADE_MODULATE",
		"FFADE_OUT",
		"FFADE_STAYOUT",
		"FLAG_1",
		"FLAG_2",
		"FLAG_3",
		"FLAG_4",
		"FLAG_AUTHID",
		"FLAG_CASE_SENSITIVE",
		"FLAG_IP",
		"FLAG_KICK",
		"FLAG_NOPASS",
		"FLAG_TAG",
		"FL_ALWAYSTHINK",
		"FL_BASEVELOCITY",
		"FL_CLIENT",
		"FL_CONVEYOR",
		"FL_CUSTOMENTITY",
		"FL_DORMANT",
		"FL_DUCKING",
		"FL_FAKECLIENT",
		"FL_FLOAT",
		"FL_FLY",
		"FL_FROZEN",
		"FL_GODMODE",
		"FL_GRAPHED",
		"FL_IMMUNE_LAVA",
		"FL_IMMUNE_SLIME",
		"FL_IMMUNE_WATER",
		"FL_INWATER",
		"FL_KILLME",
		"FL_MONSTER",
		"FL_MONSTERCLIP",
		"FL_NOTARGET",
		"FL_ONGROUND",
		"FL_ONTRAIN",
		"FL_PARTIALGROUND",
		"FL_PROXY",
		"FL_SKIPLOCALHOST",
		"FL_SPECTATOR",
		"FL_SWIM",
		"FL_WATERJUMP",
		"FL_WORLDBRUSH",
		"FMRES_HANDLED",
		"FMRES_IGNORED",
		"FMRES_OVERRIDE",
		"FMRES_SUPERCEDE",
		"FMV_CELL",
		"FMV_FLOAT",
		"FMV_STRING",
		"FM_AddToFullPack",
		"FM_AlertMessage",
		"FM_AllocString",
		"FM_AllowLagCompensation",
		"FM_AngleVectors",
		"FM_AnimationAutomove",
		"FM_Blocked",
		"FM_BuildSoundMsg",
		"FM_CVarGetFloat",
		"FM_CVarGetString",
		"FM_CVarSetFloat",
		"FM_CVarSetString",
		"FM_CanSkipPlayer",
		"FM_ChangeLevel",
		"FM_ChangePitch",
		"FM_ChangeYaw",
		"FM_CheckVisibility",
		"FM_ClientCommand",
		"FM_ClientConnect",
		"FM_ClientDisconnect",
		"FM_ClientKill",
		"FM_ClientPrintf",
		"FM_ClientPutInServer",
		"FM_ClientUserInfoChanged",
		"FM_CmdEnd",
		"FM_CmdStart",
		"FM_CreateBaseline",
		"FM_CreateEntity",
		"FM_CreateFakeClient",
		"FM_CreateInstBaseline",
		"FM_CreateInstBaselines",
		"FM_CreateNamedEntity",
		"FM_CrosshairAngle",
		"FM_DecalIndex",
		"FM_DropToFloor",
		"FM_EmitAmbientSound",
		"FM_EmitSound",
		"FM_EntIsOnFloor",
		"FM_EntitiesInPVS",
		"FM_FadeClientVolume",
		"FM_FindClientInPVS",
		"FM_FindEntityByString",
		"FM_FindEntityInSphere",
		"FM_FreeEntPrivateData",
		"FM_GameShutdown",
		"FM_GetAimVector",
		"FM_GetAttachment",
		"FM_GetBonePosition",
		"FM_GetCurrentPlayer",
		"FM_GetEntityIllum",
		"FM_GetGameDescription",
		"FM_GetInfoKeyBuffer",
		"FM_GetPhysicsInfoString",
		"FM_GetPhysicsKeyValue",
		"FM_GetPlayerAuthId",
		"FM_GetPlayerWONId",
		"FM_InfoKeyValue",
		"FM_IsMapValid",
		"FM_KeyValue",
		"FM_LightStyle",
		"FM_MakeStatic",
		"FM_MakeVectors",
		"FM_MessageBegin",
		"FM_MessageEnd",
		"FM_ModelFrames",
		"FM_ModelIndex",
		"FM_MoveToOrigin",
		"FM_NULLENT",
		"FM_NumberOfEntities",
		"FM_OnFreeEntPrivateData",
		"FM_PM_FindTextureType",
		"FM_ParmsChangeLevel",
		"FM_ParmsNewLevel",
		"FM_ParticleEffect",
		"FM_PlaybackEvent",
		"FM_PlayerPostThink",
		"FM_PlayerPreThink",
		"FM_PointContents",
		"FM_PrecacheEvent",
		"FM_PrecacheGeneric",
		"FM_PrecacheModel",
		"FM_PrecacheSound",
		"FM_RegUserMsg",
		"FM_RegisterEncoders",
		"FM_RemoveEntity",
		"FM_RunPlayerMove",
		"FM_ServerDeactivate",
		"FM_ServerPrint",
		"FM_SetAbsBox",
		"FM_SetClientKeyValue",
		"FM_SetClientMaxspeed",
		"FM_SetGroupMask",
		"FM_SetKeyValue",
		"FM_SetModel",
		"FM_SetOrigin",
		"FM_SetPhysicsKeyValue",
		"FM_SetSize",
		"FM_SetView",
		"FM_ShouldCollide",
		"FM_SpectatorConnect",
		"FM_SpectatorDisconnect",
		"FM_SpectatorThink",
		"FM_StartFrame",
		"FM_StaticDecal",
		"FM_Sys_Error",
		"FM_SzFromIndex",
		"FM_Think",
		"FM_Time",
		"FM_Touch",
		"FM_TraceHull",
		"FM_TraceLine",
		"FM_TraceModel",
		"FM_TraceMonsterHull",
		"FM_TraceSphere",
		"FM_TraceTexture",
		"FM_TraceToss",
		"FM_UpdateClientData",
		"FM_Use",
		"FM_VecToAngles",
		"FM_VecToYaw",
		"FM_Voice_GetClientListening",
		"FM_Voice_SetClientListening",
		"FM_WalkMove",
		"FM_WriteAngle",
		"FM_WriteByte",
		"FM_WriteChar",
		"FM_WriteCoord",
		"FM_WriteEntity",
		"FM_WriteLong",
		"FM_WriteShort",
		"FM_WriteString",
		"FORWARD_ALL",
		"FORWARD_ONLY_NEW",
		"FORWARD_ONLY_OLD",
		"FP_ARRAY",
		"FP_CELL",
		"FP_FLOAT",
		"FP_STRING",
		"FRAME_FIRST",
		"FRAME_LAST",
		"FRC_BLOCK",
		"FRC_CONTINUE",
		"FRC_MAKE_FULLY",
		"FRC_MAKE_PARTIALLY",
		"FTP_CONNECTING",
		"FTP_DISCONNECTED",
		"FTP_IDLE",
		"FTP_LIST",
		"FTP_PASS",
		"FTP_READYFORDATA",
		"FTP_RETR",
		"FTP_STOR",
		"FTP_USER",
		"FTRACE_SIMPLEBOX",
		"FT_NEW",
		"FT_OLD",
		"FUSE_RESET",
		"FUSE_SET",
		"Float",
		"GL_cdAudioTrack",
		"GL_coop",
		"GL_deathmatch",
		"GL_force_retouch",
		"GL_found_secrets",
		"GL_frametime",
		"GL_mapname",
		"GL_maxClients",
		"GL_maxEntities",
		"GL_msg_entity",
		"GL_pSaveData",
		"GL_pStringBase",
		"GL_serverflags",
		"GL_startspot",
		"GL_teamplay",
		"GL_time",
		"GL_trace_allsolid",
		"GL_trace_endpos",
		"GL_trace_ent",
		"GL_trace_flags",
		"GL_trace_fraction",
		"GL_trace_hitgroup",
		"GL_trace_inopen",
		"GL_trace_inwater",
		"GL_trace_plane_dist",
		"GL_trace_plane_normal",
		"GL_trace_startsolid",
		"GL_v_forward",
		"GL_v_right",
		"GL_v_up",
		"GL_vecLandmarkOffset",
		"GREEN",
		"GREEN",
		"GREEN",
		"GREY",
		"GREY",
		"Green",
		"Grey",
		"HAM_ERR_END",
		"HAM_FUNC_NOT_CONFIGURED",
		"HAM_HANDLED",
		"HAM_IGNORED",
		"HAM_INVALID_FUNC",
		"HAM_LAST_ENTRY_DONT_USE_ME_LOL",
		"HAM_OK",
		"HAM_OVERRIDE",
		"HAM_SUPERCEDE",
		"HASH_EMULATE",
		"HASH_KEY_SIZE",
		"HASH_X_TYPE_ARRAY",
		"HASH_X_TYPE_CELL",
		"HASH_X_TYPE_NONE",
		"HASH_X_TYPE_STRING",
		"HELPER_INC",
		"HEXCHARS",
		"HIT_CHEST",
		"HIT_GENERIC",
		"HIT_HEAD",
		"HIT_LEFTARM",
		"HIT_LEFTLEG",
		"HIT_RIGHTARM",
		"HIT_RIGHTLEG",
		"HIT_STOMACH",
		"HIVETRAIT_DC",
		"HIVETRAIT_MC",
		"HIVETRAIT_NONE",
		"HIVETRAIT_SC",
		"HIW_AK47",
		"HIW_AKS74U",
		"HIW_BERETTA",
		"HIW_FLASHBANG",
		"HIW_GLOCK",
		"HIW_M11",
		"HIW_M11SD",
		"HIW_M16A2",
		"HIW_M4A1",
		"HIW_MP5A4",
		"HIW_MP5SD5",
		"HIW_NATOGREN",
		"HIW_PSG1",
		"HIW_REMINGTON",
		"HIW_SPAS12",
		"HIW_TANGOGREN",
		"HIW_ZASTAVA",
		"HLI_ANTIDOTE",
		"HLI_BATTERY",
		"HLI_HEALTHKIT",
		"HLI_SECURITY",
		"HLW_ALLWEAPONS",
		"HLW_CHAINGUN",
		"HLW_CROSSBOW",
		"HLW_CROWBAR",
		"HLW_EGON",
		"HLW_GAUSS",
		"HLW_GLOCK",
		"HLW_HANDGRENADE",
		"HLW_HORNETGUN",
		"HLW_MP5",
		"HLW_NONE",
		"HLW_PYTHON",
		"HLW_RPG",
		"HLW_SATCHEL",
		"HLW_SHOTGUN",
		"HLW_SNARK",
		"HLW_SUIT",
		"HLW_TRIPMINE",
		"HL_MAX_TEAMS",
		"HULL_HEAD",
		"HULL_HUMAN",
		"HULL_LARGE",
		"HULL_POINT",
		"Ham_Activate",
		"Ham_AddPlayerItem",
		"Ham_AddPoints",
		"Ham_AddPointsToTeam",
		"Ham_AlertSound",
		"Ham_BarnacleVictimBitten",
		"Ham_BarnacleVictimReleased",
		"Ham_BecomeDead",
		"Ham_BestVisibleEnemy",
		"Ham_Blocked",
		"Ham_BloodColor",
		"Ham_BodyTarget",
		"Ham_BuildNearestRoute",
		"Ham_CS_Item_CanDrop",
		"Ham_CS_Item_GetMaxSpeed",
		"Ham_CS_Player_Blind",
		"Ham_CS_Player_GetAutoaimVector",
		"Ham_CS_Player_IsBot",
		"Ham_CS_Player_OnTouchingWeapon",
		"Ham_CS_Player_ResetMaxSpeed",
		"Ham_CS_Restart",
		"Ham_CS_RoundRespawn",
		"Ham_CS_Weapon_SendWeaponAnim",
		"Ham_CanPlaySentence",
		"Ham_CanPlaySequence",
		"Ham_Center",
		"Ham_ChangeYaw",
		"Ham_CheckAmmo",
		"Ham_CheckEnemy",
		"Ham_CheckMeleeAttack1",
		"Ham_CheckMeleeAttack2",
		"Ham_CheckRangeAttack1",
		"Ham_CheckRangeAttack2",
		"Ham_Classify",
		"Ham_CoverRadius",
		"Ham_DOD_AreaSendStatus",
		"Ham_DOD_AreaSetIndex",
		"Ham_DOD_GetState",
		"Ham_DOD_GetStateEnt",
		"Ham_DOD_Item_CanDrop",
		"Ham_DOD_Item_DropGren",
		"Ham_DOD_Item_SetDmgTime",
		"Ham_DOD_Item_SpawnDeploy",
		"Ham_DOD_RoundRespawn",
		"Ham_DOD_RoundRespawnEnt",
		"Ham_DOD_RoundStore",
		"Ham_DOD_SetScriptReset",
		"Ham_DOD_Weapon_Aim",
		"Ham_DOD_Weapon_ChangeFOV",
		"Ham_DOD_Weapon_GetFOV",
		"Ham_DOD_Weapon_IsUseable",
		"Ham_DOD_Weapon_IsWaterSniping",
		"Ham_DOD_Weapon_RemoveStamina",
		"Ham_DOD_Weapon_Special",
		"Ham_DOD_Weapon_UpdateZoomSpeed",
		"Ham_DOD_Weapon_ZoomIn",
		"Ham_DOD_Weapon_ZoomOut",
		"Ham_DOD_Weapon_flAim",
		"Ham_DamageDecal",
		"Ham_DeathNotice",
		"Ham_DeathSound",
		"Ham_ESF_AddAttacks",
		"Ham_ESF_AddBeamBoxCrosshair",
		"Ham_ESF_AddBlindFX",
		"Ham_ESF_CanBlock",
		"Ham_ESF_CanJump",
		"Ham_ESF_CanPrimaryFire",
		"Ham_ESF_CanRaiseKi",
		"Ham_ESF_CanRaiseStamina",
		"Ham_ESF_CanSecondaryFire",
		"Ham_ESF_CanStartFly",
		"Ham_ESF_CanStartPowerup",
		"Ham_ESF_CanStopFly",
		"Ham_ESF_CanTeleport",
		"Ham_ESF_CanTurbo",
		"Ham_ESF_CanWallJump",
		"Ham_ESF_CheckLightning",
		"Ham_ESF_CheckTimeBasedDamage",
		"Ham_ESF_CheckWallJump",
		"Ham_ESF_ClientRemoveWeapon",
		"Ham_ESF_DisablePSBar",
		"Ham_ESF_DisableWallJump",
		"Ham_ESF_DoesPrimaryAttack",
		"Ham_ESF_DoesSecondaryAttack",
		"Ham_ESF_DrawChargeBar",
		"Ham_ESF_DrawPSBar",
		"Ham_ESF_DrawPSWinBonus",
		"Ham_ESF_EmitClassSound",
		"Ham_ESF_EmitNullSound",
		"Ham_ESF_EmitSound",
		"Ham_ESF_EnableWallJump",
		"Ham_ESF_FreezeControls",
		"Ham_ESF_GetMaxSpeed",
		"Ham_ESF_GetMoveForward",
		"Ham_ESF_GetMoveRight",
		"Ham_ESF_GetMoveUp",
		"Ham_ESF_GetPowerLevel",
		"Ham_ESF_GetTeleportDir",
		"Ham_ESF_GetWallJumpAnim",
		"Ham_ESF_GetWallJumpAnim2",
		"Ham_ESF_HideWeapon",
		"Ham_ESF_IncreasePL",
		"Ham_ESF_IncreaseStrength",
		"Ham_ESF_IsBuddy",
		"Ham_ESF_IsEnvModel",
		"Ham_ESF_IsFighter",
		"Ham_ESF_IsFlyMoveType",
		"Ham_ESF_IsMoveBack",
		"Ham_ESF_IsSuperJump",
		"Ham_ESF_IsWalkMoveType",
		"Ham_ESF_LockCrosshair",
		"Ham_ESF_PlayAnimation",
		"Ham_ESF_RemoveAllOtherWeapons",
		"Ham_ESF_RemoveBeamBoxCrosshair",
		"Ham_ESF_RemoveBlindFX",
		"Ham_ESF_RemoveSpecialModes",
		"Ham_ESF_ResetWallJumpVars",
		"Ham_ESF_RotateCrosshair",
		"Ham_ESF_SendClientsCustomModel",
		"Ham_ESF_SetAnimation",
		"Ham_ESF_SetDeathAnimation",
		"Ham_ESF_SetFlyMoveType",
		"Ham_ESF_SetMaxPowerLevel",
		"Ham_ESF_SetModel",
		"Ham_ESF_SetPowerLevel",
		"Ham_ESF_SetWalkMoveType",
		"Ham_ESF_SetWallJumpAnimation",
		"Ham_ESF_StartBlock",
		"Ham_ESF_StartFly",
		"Ham_ESF_StopAniTrigger",
		"Ham_ESF_StopBlock",
		"Ham_ESF_StopFly",
		"Ham_ESF_StopSwoop",
		"Ham_ESF_StopTurbo",
		"Ham_ESF_TakeBean",
		"Ham_ESF_TakeDamage2",
		"Ham_ESF_UnFreezeControls",
		"Ham_ESF_UnLockCrosshair",
		"Ham_ESF_UnRotateCrosshair",
		"Ham_ESF_UpdateHealth",
		"Ham_ESF_UpdateKi",
		"Ham_ESF_WaterMove",
		"Ham_ESF_Weapon_HolsterMeleed",
		"Ham_EarPosition",
		"Ham_EyePosition",
		"Ham_FBecomeProne",
		"Ham_FCanActiveIdle",
		"Ham_FCanCheckAttacks",
		"Ham_FInViewCone",
		"Ham_FValidateHintType",
		"Ham_FVecInViewCone",
		"Ham_FVecVisible",
		"Ham_FVisible",
		"Ham_FadeMonster",
		"Ham_FindCover",
		"Ham_GetDeathActivity",
		"Ham_GetDelay",
		"Ham_GetIdealState",
		"Ham_GetNextTarget",
		"Ham_GetStoppedActivity",
		"Ham_GetToggleState",
		"Ham_GibMonster",
		"Ham_GiveAmmo",
		"Ham_HasAlienGibs",
		"Ham_HasHumanGibs",
		"Ham_HasTarget",
		"Ham_HearingSensitivity",
		"Ham_IRelationship",
		"Ham_ISoundMask",
		"Ham_IdleSound",
		"Ham_IgnoreConditions",
		"Ham_Illumination",
		"Ham_IsAlive",
		"Ham_IsBSPModel",
		"Ham_IsInWorld",
		"Ham_IsMoving",
		"Ham_IsNetClient",
		"Ham_IsPlayer",
		"Ham_IsSneaking",
		"Ham_IsTriggered",
		"Ham_Item_AddDuplicate",
		"Ham_Item_AddToPlayer",
		"Ham_Item_AttachToPlayer",
		"Ham_Item_CanDeploy",
		"Ham_Item_CanHolster",
		"Ham_Item_Deploy",
		"Ham_Item_Drop",
		"Ham_Item_GetWeaponPtr",
		"Ham_Item_Holster",
		"Ham_Item_ItemSlot",
		"Ham_Item_Kill",
		"Ham_Item_PostFrame",
		"Ham_Item_PreFrame",
		"Ham_Item_PrimaryAmmoIndex",
		"Ham_Item_SecondaryAmmoIndex",
		"Ham_Item_UpdateClientData",
		"Ham_Item_UpdateItemInfo",
		"Ham_Keyvalue",
		"Ham_Killed",
		"Ham_Look",
		"Ham_MonsterInit",
		"Ham_MonsterInitDead",
		"Ham_MonsterThink",
		"Ham_Move",
		"Ham_MyMonsterPointer",
		"Ham_MySquadMonsterPointer",
		"Ham_NS_AwardKill",
		"Ham_NS_GetAdrenalineFactor",
		"Ham_NS_GetAnimationForActivity",
		"Ham_NS_GetAuthenticationMask",
		"Ham_NS_GetCanUseWeapon",
		"Ham_NS_GetHull",
		"Ham_NS_GetMaxWalkSpeed",
		"Ham_NS_GetNamedItem",
		"Ham_NS_GetPlayerClass",
		"Ham_NS_GetPointValue",
		"Ham_NS_InitPlayerFromSpawn",
		"Ham_NS_NeedsTeamUpdate",
		"Ham_NS_PackDeadPlayerItems",
		"Ham_NS_PlayerClassChanged",
		"Ham_NS_ResetEntity",
		"Ham_NS_SaveDataForReset",
		"Ham_NS_SendTeamUpdate",
		"Ham_NS_SendWeaponUpdate",
		"Ham_NS_SetBoneController",
		"Ham_NS_SetTeamID",
		"Ham_NS_StartObserver",
		"Ham_NS_StopObserver",
		"Ham_NS_Suicide",
		"Ham_NS_UpdateOnRemove",
		"Ham_NS_Weapon_DefaultDeploy",
		"Ham_NS_Weapon_DefaultReload",
		"Ham_NS_Weapon_GetDeployTime",
		"Ham_NS_Weapon_GetIsWeapPriming",
		"Ham_NS_Weapon_GetIsWeaponPrimed",
		"Ham_NS_Weapon_GetWeapPrimeTime",
		"Ham_NS_Weapon_PrimeWeapon",
		"Ham_ObjectCaps",
		"Ham_OnControls",
		"Ham_OverrideReset",
		"Ham_PainSound",
		"Ham_PlayScriptedSentence",
		"Ham_PlaySentence",
		"Ham_Player_Duck",
		"Ham_Player_GetGunPosition",
		"Ham_Player_ImpulseCommands",
		"Ham_Player_Jump",
		"Ham_Player_PostThink",
		"Ham_Player_PreThink",
		"Ham_Player_ShouldFadeOnDeath",
		"Ham_Player_UpdateClientData",
		"Ham_Precache",
		"Ham_PrescheduleThink",
		"Ham_ReflectGauss",
		"Ham_RemovePlayerItem",
		"Ham_ReportAIState",
		"Ham_Respawn",
		"Ham_RunAI",
		"Ham_ScheduleChange",
		"Ham_SentenceStop",
		"Ham_SetActivity",
		"Ham_SetObjectCollisionBox",
		"Ham_SetToggleState",
		"Ham_SetYawSpeed",
		"Ham_ShouldAdvanceRoute",
		"Ham_Spawn",
		"Ham_StartSneaking",
		"Ham_Stop",
		"Ham_StopFollowing",
		"Ham_StopSneaking",
		"Ham_TFC_CalcEmpDmgRad",
		"Ham_TFC_Concuss",
		"Ham_TFC_DB_GetItemName",
		"Ham_TFC_EmpExplode",
		"Ham_TFC_EmpRemove",
		"Ham_TFC_EngineerUse",
		"Ham_TFC_Finished",
		"Ham_TFC_RadiusDamage",
		"Ham_TFC_RadiusDamage2",
		"Ham_TFC_TakeConcussionBlast",
		"Ham_TFC_TakeEmpBlast",
		"Ham_TS_BreakableRespawn",
		"Ham_TS_CanUsedThroughWalls",
		"Ham_TS_EnableObjective",
		"Ham_TS_GiveSlowMul",
		"Ham_TS_GoSlow",
		"Ham_TS_InSlow",
		"Ham_TS_IsObjective",
		"Ham_TS_OnFreeEntPrivateData",
		"Ham_TS_RespawnWait",
		"Ham_TS_ShouldCollide",
		"Ham_TakeDamage",
		"Ham_TakeHealth",
		"Ham_TeamId",
		"Ham_Think",
		"Ham_Touch",
		"Ham_TraceAttack",
		"Ham_TraceBleed",
		"Ham_UpdateOwner",
		"Ham_Use",
		"Ham_Weapon_AddWeapon",
		"Ham_Weapon_ExtractAmmo",
		"Ham_Weapon_ExtractClipAmmo",
		"Ham_Weapon_IsUsable",
		"Ham_Weapon_PlayEmptySound",
		"Ham_Weapon_PrimaryAttack",
		"Ham_Weapon_Reload",
		"Ham_Weapon_ResetEmptySound",
		"Ham_Weapon_RetireWeapon",
		"Ham_Weapon_SecondaryAttack",
		"Ham_Weapon_SendWeaponAnim",
		"Ham_Weapon_ShouldWeaponIdle",
		"Ham_Weapon_UseDecrement",
		"Ham_Weapon_WeaponIdle",
		"Handle",
		"Hash",
		"HashX",
		"IDSAH",
		"IDSH",
		"IDS_BH_SP",
		"IDS_BH_XP",
		"IDS_DMG_D",
		"IDS_DMG_T",
		"IDS_GRAVITY",
		"IDS_HEALTH",
		"IDS_HEARTBEAT",
		"IDS_SPEED",
		"IDS_VISIBLITY",
		"IGNORE_GLASS",
		"IGNORE_MISSILE",
		"IGNORE_MONSTERS",
		"INVALID_HANDLE",
		"INVALID_PLUGIN_ID",
		"IN_ALT1",
		"IN_ATTACK",
		"IN_ATTACK2",
		"IN_BACK",
		"IN_CANCEL",
		"IN_DUCK",
		"IN_FORWARD",
		"IN_JUMP",
		"IN_LEFT",
		"IN_MOVELEFT",
		"IN_MOVERIGHT",
		"IN_RELOAD",
		"IN_RIGHT",
		"IN_RUN",
		"IN_SCORE",
		"IN_USE",
		"IPM_ANYMAL_AUTH",
		"IPM_ANYMAL_DBD",
		"IPM_ANYMAL_IDS",
		"IPM_ANYMAL_IDS_C",
		"IPM_ANYMAL_MB",
		"IPM_ANYMAL_MM",
		"IPM_ANYMAL_SFX",
		"IPM_BLOODHUNT",
		"ITEM_DISABLED",
		"ITEM_ENABLED",
		"ITEM_IGNORE",
		"Invalid_Array",
		"Invalid_NDim",
		"Invalid_SQLVault",
		"Invalid_TravTrie",
		"Invalid_Trie",
		"KV_ClassName",
		"KV_KeyName",
		"KV_Value",
		"KV_fHandled",
		"KZ_TD_DISABLED",
		"KZ_TD_OVERSCREEN",
		"KZ_TD_ROUNDTIME",
		"KZ_TD_STATUSTEXT",
		"LANG_FILE",
		"LANG_PLAYER",
		"LANG_SERVER",
		"LOG_AMXX",
		"LOG_CHAT",
		"LOG_FILE",
		"LibType_Class",
		"LibType_Library",
		"MAGNUM",
		"MASK_ADRENALINE",
		"MASK_ALIEN_EMBRYO",
		"MASK_ALIEN_MOVEMENT",
		"MASK_ARMOR1",
		"MASK_ARMOR2",
		"MASK_ARMOR3",
		"MASK_BASEBUILD0",
		"MASK_BASEBUILD1",
		"MASK_BASEBUILD2",
		"MASK_BASEBUILD3",
		"MASK_BASEBUILD4",
		"MASK_BASEBUILD5",
		"MASK_BASEBUILD6",
		"MASK_BASEBUILD7",
		"MASK_BUILDABLE",
		"MASK_CARAPACE",
		"MASK_CELERITY",
		"MASK_CLOAKING",
		"MASK_DEFENSE2",
		"MASK_DEFENSE3",
		"MASK_DETECTED",
		"MASK_DIGESTING",
		"MASK_ELECTRICITY",
		"MASK_ENSNARED",
		"MASK_FOCUS",
		"MASK_HEAVYARMOR",
		"MASK_JETPACK",
		"MASK_MOTION",
		"MASK_MOVEMENT2",
		"MASK_MOVEMENT3",
		"MASK_NONE",
		"MASK_PARASITED",
		"MASK_PLAYER_STUNNED",
		"MASK_PRIMALSCREAM",
		"MASK_RECYCLING",
		"MASK_REDEMPTION",
		"MASK_REGENERATION",
		"MASK_SCENTOFFEAR",
		"MASK_SELECTABLE",
		"MASK_SENSORY2",
		"MASK_SENSORY3",
		"MASK_SENSORY_NEARBY",
		"MASK_SIGHTED",
		"MASK_SILENCE",
		"MASK_TOPDOWN",
		"MASK_UMBRA",
		"MASK_WALLSTICKING",
		"MASK_WEAPONS1",
		"MASK_WEAPONS2",
		"MASK_WEAPONS3",
		"MAXSLOTS",
		"MAXSPEED_BARRIER_MAX",
		"MAXSPEED_BARRIER_MIN",
		"MAXWEAPS",
		"MAX_BINARY_DIGITS",
		"MAX_DECIMAL_DIGITS",
		"MAX_DIRECTOR_CMD_PARAMETERS",
		"MAX_DIRECTOR_CMD_STRING",
		"MAX_DOWNLOADS",
		"MAX_HEXADECIMAL_DIGITS",
		"MAX_KEY_LEN",
		"MAX_ORIGINS",
		"MAX_PRIMARY",
		"MAX_SECONDARY",
		"MAX_SIDES",
		"MAX_VAL_LEN",
		"MAX_WEAPONS",
		"MBH",
		"MENUPAD_NONE",
		"MENUPAD_PAGE",
		"MENU_BACK",
		"MENU_EXIT",
		"MENU_KEY_0",
		"MENU_KEY_1",
		"MENU_KEY_2",
		"MENU_KEY_3",
		"MENU_KEY_4",
		"MENU_KEY_5",
		"MENU_KEY_6",
		"MENU_KEY_7",
		"MENU_KEY_8",
		"MENU_KEY_9",
		"MENU_MORE",
		"MEXIT_ALL",
		"MEXIT_NEVER",
		"MEXIT_NORMAL",
		"MIN_DISTANCE",
		"MI_ALLIES_PARAS",
		"MI_ALLIES_TEAM",
		"MI_AXIS_PARAS",
		"MODE_INFECTION",
		"MODE_MULTI",
		"MODE_NEMESIS",
		"MODE_PLAGUE",
		"MODE_SURVIVOR",
		"MODE_SWARM",
		"MOVETYPE_BOUNCE",
		"MOVETYPE_BOUNCEMISSILE",
		"MOVETYPE_FLY",
		"MOVETYPE_FLYMISSILE",
		"MOVETYPE_FOLLOW",
		"MOVETYPE_NOCLIP",
		"MOVETYPE_NONE",
		"MOVETYPE_PUSH",
		"MOVETYPE_PUSHSTEP",
		"MOVETYPE_STEP",
		"MOVETYPE_TOSS",
		"MOVETYPE_WALK",
		"MPROP_BACKNAME",
		"MPROP_EXIT",
		"MPROP_EXITNAME",
		"MPROP_NEXTNAME",
		"MPROP_NOCOLORS",
		"MPROP_NUMBER_COLOR",
		"MPROP_ORDER",
		"MPROP_PADMENU",
		"MPROP_PERPAGE",
		"MPROP_TITLE",
		"MSG_ALL",
		"MSG_BROADCAST",
		"MSG_INIT",
		"MSG_ONE",
		"MSG_ONE_UNRELIABLE",
		"MSG_PAS",
		"MSG_PAS_R",
		"MSG_PVS",
		"MSG_PVS_R",
		"MSG_SPEC",
		"M_PI",
		"MapType_AutoDetect",
		"MapType_Bomb",
		"MapType_Hostage",
		"MapType_PrisonEscape",
		"MapType_VipAssasination",
		"NFVT_ARRAY",
		"NFVT_BOOL",
		"NFVT_CELLARRAY",
		"NFVT_CELLARRAY2",
		"NFVT_FLOAT",
		"NFVT_INT",
		"NFVT_STRING",
		"NFVT_VECTOR",
		"NFV_IF_NOT_EXIST",
		"NFV_NONE",
		"NFV_NO_QUOTES",
		"NFV_NO_REPLACE_QUOTE",
		"NFV_OVERWRITE",
		"NFV_SAVETYPE",
		"NFV_TAKEALL",
		"NFV_WILDCARD",
		"NORMAL",
		"NORMAL",
		"NORTH_AMERICA",
		"NSGame_AlienVAlien",
		"NSGame_CantTell",
		"NSGame_MarineVAlien",
		"NSGame_MarineVMarine",
		"NSGame_Unknown",
		"NSGameplay",
		"NSPS_FL_COLLIDE",
		"NSPS_FL_CONSTRAIN_PITCH",
		"NSPS_FL_FACE_UP",
		"NSPS_FL_FADE_IN",
		"NSPS_FL_FADE_OUT",
		"NSPS_FL_HI_DETAIL",
		"NSPS_FL_PARTICLE_DENSITY",
		"NSPS_FL_START_ON",
		"NSPS_FL_USE_GRAVITY",
		"NSPS_FL_USE_TRI",
		"NSPS_GS_BLOB",
		"NSPS_GS_BOX",
		"NSPS_GS_CONE",
		"NSPS_GS_CYLINDER",
		"NSPS_GS_DISC",
		"NSPS_GS_LINE",
		"NSPS_GS_NONE",
		"NSPS_GS_PLANE",
		"NSPS_GS_POINT",
		"NSPS_GS_RECTANGLE",
		"NSPS_GS_TRIANGLE",
		"NSPS_R_ADDITIVE",
		"NSPS_R_GLOW",
		"NSPS_R_NORMAL",
		"NSPS_R_TRANSALPHA",
		"NSPS_R_TRANSCOLOR",
		"NSPS_R_TRANSTEXTURE",
		"NSPS_VS_BLOB",
		"NSPS_VS_BOX",
		"NSPS_VS_POINT",
		"NSPS_VS_SPHERE",
		"NSTZB_ZB3",
		"NSTZB_ZBS",
		"NSTZB_ZBU",
		"NST_ANI_FASTRUN_BEGIN",
		"NST_ANI_FASTRUN_END",
		"NST_ANI_FASTRUN_IDLE",
		"NST_ANI_KNIFE_ATTACK",
		"NST_ANI_LAUNCHER_CHANGE",
		"NST_ANI_LAUNCHER_SHOOT",
		"NST_ANI_LAUNCHER_SHOOT_LAST",
		"NST_ANI_LIGHT_ATTACK",
		"NST_ANI_M134_FIRE_AFTER",
		"NST_ANI_M134_FIRE_CHANGE",
		"NST_ANI_M134_FIRE_READY",
		"NST_ANI_M134_IDLE_CHANGE",
		"NST_ANI_SHOTGUN_RELOAD",
		"NST_ANI_SIGHT_BEGIN",
		"NST_ANI_SIGHT_END",
		"NST_MENUWPN_MAIN",
		"NST_MENUWPN_MYWPN",
		"NST_MENUWPN_SHOP",
		"NST_MOD_CSDM_SINGLE",
		"NST_MOD_CSDM_TEAM",
		"NST_MOD_DEFAULT",
		"NST_MOD_GHOST",
		"NST_MOD_HMS",
		"NST_MOD_ZB3",
		"NST_MOD_ZBS",
		"NST_MOD_ZBU",
		"NST_MYWPN_SETTING_FILE",
		"NST_WPN_AUTHOR",
		"NST_WPN_DATA_DAMAGE",
		"NST_WPN_DATA_DEPLOY",
		"NST_WPN_DATA_FASTRUN",
		"NST_WPN_DATA_GRAVITY",
		"NST_WPN_DATA_HASWEAPON",
		"NST_WPN_DATA_KNOCKBACK",
		"NST_WPN_DATA_RECOIL",
		"NST_WPN_DATA_RELOAD",
		"NST_WPN_DATA_SPEED",
		"NST_WPN_HE",
		"NST_WPN_INI_READ",
		"NST_WPN_INI_SAVE",
		"NST_WPN_KNIFE",
		"NST_WPN_LANG_FILE",
		"NST_WPN_NAME_HE",
		"NST_WPN_NAME_KNIFE",
		"NST_WPN_NAME_PISTOLS",
		"NST_WPN_NAME_RIFLES",
		"NST_WPN_PISTOLS",
		"NST_WPN_RIFLES",
		"NST_WPN_SETTING_FILE",
		"NST_WPN_TYPEDAMAGE_NADE",
		"NST_WPN_TYPEDAMAGE_NONE",
		"NST_WPN_VERSION",
		"NS_CONST_INC",
		"NS_INC",
		"NULL",
		"OCEANIA",
		"OFFSET_ACTIVEITEM",
		"OFFSET_AMMO_9MM",
		"OFFSET_AMMO_ARGRENADE",
		"OFFSET_AMMO_CROSSBOW",
		"OFFSET_AMMO_HEGRENADE",
		"OFFSET_AMMO_HORNET",
		"OFFSET_AMMO_PYTHON",
		"OFFSET_AMMO_RPG",
		"OFFSET_AMMO_SATCHEL",
		"OFFSET_AMMO_SHOTGUN",
		"OFFSET_AMMO_SNARK",
		"OFFSET_AMMO_TRIPMINE",
		"OFFSET_AMMO_URANIUM",
		"OFFSET_AMT1",
		"OFFSET_AMT2",
		"OFFSET_CONSECUTIVE_KILLS",
		"OFFSET_CURPWUP",
		"OFFSET_DATASTART",
		"OFFSET_DEATHS",
		"OFFSET_ENTRYCOUNT",
		"OFFSET_EXTRA",
		"OFFSET_HUD",
		"OFFSET_JUMPS",
		"OFFSET_KUNGFU",
		"OFFSET_LONGJUMP",
		"OFFSET_PWUP",
		"OFFSET_PWUP1",
		"OFFSET_PWUP2",
		"OFFSET_TIMESTAMP",
		"OFFSET_WEAPONBOX",
		"OFFSET_WEAPONCLIP",
		"OFFSET_WEAPONID",
		"OrpheuFunction",
		"OrpheuHook",
		"OrpheuHookPhase",
		"OrpheuHookPost",
		"OrpheuHookPre",
		"OrpheuHookReturn",
		"OrpheuIgnored",
		"OrpheuOverride",
		"OrpheuStruct",
		"OrpheuStructAmmoInfo",
		"OrpheuStructDLL_FUNCTIONS",
		"OrpheuStructEngineFuncs",
		"OrpheuStructItemInfo",
		"OrpheuStructKeyValueData",
		"OrpheuStructMonsterEvent",
		"OrpheuStructMovevars",
		"OrpheuStructPhysent",
		"OrpheuStructPlayerMove",
		"OrpheuStructPmplane",
		"OrpheuStructPmtrace",
		"OrpheuStructSchedule",
		"OrpheuStructTask",
		"OrpheuStructTraceResult",
		"OrpheuStructType",
		"OrpheuStructUsercmd",
		"OrpheuStructWeaponData",
		"OrpheuSupercede",
		"PISTOL",
		"PITCH_HIGH",
		"PITCH_LOW",
		"PITCH_NORM",
		"PLUGIN_CONTINUE",
		"PLUGIN_HANDLED",
		"PLUGIN_HANDLED_MAIN",
		"PREFIX",
		"PS_DEPLOY",
		"PS_NOPRONE",
		"PS_PRONE",
		"PS_PRONEDEPLOY",
		"PUNISH_ATTACK",
		"PUNISH_FLASH",
		"PUNISH_KILL",
		"Particle",
		"RANDOM_TARGET_PLAYER",
		"RED",
		"RED",
		"RED",
		"REGEX_MATCH_FAIL",
		"REGEX_NO_MATCH",
		"REGEX_OK",
		"REGEX_PATTERN_FAIL",
		"REMOTE_BOMB",
		"RESULT_FAILED",
		"RESULT_NONE",
		"RESULT_OK",
		"RawPS",
		"Recovery_Kicked",
		"Recovery_Lying",
		"Recovery_Thrown",
		"Recovery_Tumbled",
		"Red",
		"Red",
		"Regex",
		"Result",
		"RoundEndType_Draw",
		"RoundEndType_Objective",
		"RoundEndType_TeamExtermination",
		"RoundEndType_Timer",
		"SECONDS_IN_DAY",
		"SECONDS_IN_HOUR",
		"SECONDS_IN_MINUTE",
		"SECONDS_IN_WEEK",
		"SEEK_CUR",
		"SEEK_END",
		"SEEK_SET",
		"SERVERTYPE_DEDICATED",
		"SERVERTYPE_HLTV",
		"SERVERTYPE_LISTEN",
		"SF_AUTO_FIREONCE",
		"SF_BEAM_DECALS",
		"SF_BEAM_RANDOM",
		"SF_BEAM_RING",
		"SF_BEAM_SHADEIN",
		"SF_BEAM_SHADEOUT",
		"SF_BEAM_SPARKEND",
		"SF_BEAM_SPARKSTART",
		"SF_BEAM_STARTON",
		"SF_BEAM_TEMPORARY",
		"SF_BEAM_TOGGLE",
		"SF_BLOOD_DECAL",
		"SF_BLOOD_PLAYER",
		"SF_BLOOD_RANDOM",
		"SF_BLOOD_STREAM",
		"SF_BREAK_CROWBAR",
		"SF_BREAK_PRESSURE",
		"SF_BREAK_TOUCH",
		"SF_BREAK_TRIGGER_ONLY",
		"SF_BRUSH_ROTATE_BACKWARDS",
		"SF_BRUSH_ROTATE_INSTANT",
		"SF_BRUSH_ROTATE_LARGERADIUS",
		"SF_BRUSH_ROTATE_MEDIUMRADIUS",
		"SF_BRUSH_ROTATE_SMALLRADIUS",
		"SF_BRUSH_ROTATE_X_AXIS",
		"SF_BRUSH_ROTATE_Y_AXIS",
		"SF_BRUSH_ROTATE_Z_AXIS",
		"SF_BTARGET_ON",
		"SF_BTARGET_USE",
		"SF_BUBBLES_STARTOFF",
		"SF_BUTTON_DONTMOVE",
		"SF_BUTTON_SPARK_IF_OFF",
		"SF_BUTTON_TOGGLE",
		"SF_BUTTON_TOUCH_ONLY",
		"SF_CAMERA_PLAYER_POSITION",
		"SF_CAMERA_PLAYER_TAKECONTROL",
		"SF_CAMERA_PLAYER_TARGET",
		"SF_CHANGELEVEL_USEONLY",
		"SF_CONVEYOR_NOTSOLID",
		"SF_CONVEYOR_VISUAL",
		"SF_CORNER_FIREONCE",
		"SF_CORNER_TELEPORT",
		"SF_CORNER_WAITFORTRIG",
		"SF_DECAL_NOTINDEATHMATCH",
		"SF_DETONATE",
		"SF_DOOR_NOMONSTERS",
		"SF_DOOR_NO_AUTO_RETURN",
		"SF_DOOR_ONEWAY",
		"SF_DOOR_PASSABLE",
		"SF_DOOR_ROTATE_BACKWARDS",
		"SF_DOOR_ROTATE_X",
		"SF_DOOR_ROTATE_Y",
		"SF_DOOR_ROTATE_Z",
		"SF_DOOR_SILENT",
		"SF_DOOR_START_OPEN",
		"SF_DOOR_USE_ONLY",
		"SF_ENDSECTION_USEONLY",
		"SF_ENVEXPLOSION_NODAMAGE",
		"SF_ENVEXPLOSION_NODECAL",
		"SF_ENVEXPLOSION_NOFIREBALL",
		"SF_ENVEXPLOSION_NOSMOKE",
		"SF_ENVEXPLOSION_NOSPARKS",
		"SF_ENVEXPLOSION_REPEATABLE",
		"SF_ENVTEXT_ALLPLAYERS",
		"SF_FADE_IN",
		"SF_FADE_MODULATE",
		"SF_FADE_ONLYONE",
		"SF_FUNNEL_REVERSE",
		"SF_GAMECOUNT_FIREONCE",
		"SF_GAMECOUNT_RESET",
		"SF_GIBSHOOTER_REPEATABLE",
		"SF_GLOBAL_SET",
		"SF_LIGHT_START_OFF",
		"SF_MESSAGE_ALL",
		"SF_MESSAGE_ONCE",
		"SF_MOMENTARY_DOOR",
		"SF_MONSTER_FADECORPSE",
		"SF_MONSTER_FALL_TO_GROUND",
		"SF_MONSTER_GAG",
		"SF_MONSTER_HITMONSTERCLIP",
		"SF_MONSTER_PREDISASTER",
		"SF_MONSTER_PRISONER",
		"SF_MONSTER_TURRET_AUTOACTIVATE",
		"SF_MONSTER_TURRET_STARTINACTIVE",
		"SF_MONSTER_WAIT_FOR_SCRIPT",
		"SF_MONSTER_WAIT_TILL_SEEN",
		"SF_MONSTER_WAIT_UNTIL_PROVOKED",
		"SF_MULTIMAN_CLONE",
		"SF_MULTIMAN_THREAD",
		"SF_MULTI_INIT",
		"SF_NORESPAWN",
		"SF_PATH_ALTERNATE",
		"SF_PATH_ALTREVERSE",
		"SF_PATH_DISABLED",
		"SF_PATH_DISABLE_TRAIN",
		"SF_PATH_FIREONCE",
		"SF_PENDULUM_AUTO_RETURN",
		"SF_PENDULUM_PASSABLE",
		"SF_PKILL_FIREONCE",
		"SF_PLAT_TOGGLE",
		"SF_PLAYEREQUIP_USEONLY",
		"SF_PTEAM_FIREONCE",
		"SF_PTEAM_GIB",
		"SF_PTEAM_KILL",
		"SF_PUSH_BREAKABLE",
		"SF_RELAY_FIREONCE",
		"SF_RENDER_MASKAMT",
		"SF_RENDER_MASKCOLOR",
		"SF_RENDER_MASKFX",
		"SF_RENDER_MASKMODE",
		"SF_ROTBUTTON_NOTSOLID",
		"SF_SCORE_NEGATIVE",
		"SF_SCORE_TEAM",
		"SF_SHAKE_DISRUPT",
		"SF_SHAKE_EVERYONE",
		"SF_SHAKE_INAIR",
		"SF_SPRITE_ONCE",
		"SF_SPRITE_STARTON",
		"SF_SPRITE_TEMPORARY",
		"SF_SUIT_SHORTLOGON",
		"SF_TANK_ACTIVE",
		"SF_TANK_ALIENS",
		"SF_TANK_CANCONTROL",
		"SF_TANK_HUMANS",
		"SF_TANK_LINEOFSIGHT",
		"SF_TANK_PLAYER",
		"SF_TANK_SOUNDON",
		"SF_TEAMMASTER_ANYTEAM",
		"SF_TEAMMASTER_FIREONCE",
		"SF_TEAMSET_CLEARTEAM",
		"SF_TEAMSET_FIREONCE",
		"SF_TRACKTRAIN_FORWARDONLY",
		"SF_TRACKTRAIN_NOCONTROL",
		"SF_TRACKTRAIN_NOPITCH",
		"SF_TRACKTRAIN_PASSABLE",
		"SF_TRACK_ACTIVATETRAIN",
		"SF_TRACK_DONT_MOVE",
		"SF_TRACK_RELINK",
		"SF_TRACK_ROTMOVE",
		"SF_TRACK_STARTBOTTOM",
		"SF_TRAIN_PASSABLE",
		"SF_TRAIN_START_ON",
		"SF_TRAIN_WAIT_RETRIGGER",
		"SF_TRIGGER_ALLOWMONSTERS",
		"SF_TRIGGER_HURT_CLIENTONLYFIRE",
		"SF_TRIGGER_HURT_CLIENTONLYTOUCH",
		"SF_TRIGGER_HURT_NO_CLIENTS",
		"SF_TRIGGER_HURT_START_OFF",
		"SF_TRIGGER_HURT_TARGETONCE",
		"SF_TRIGGER_NOCLIENTS",
		"SF_TRIGGER_PUSHABLES",
		"SF_TRIGGER_PUSH_START_OFF",
		"SF_TRIG_PUSH_ONCE",
		"SF_WALL_START_OFF",
		"SF_WORLD_DARK",
		"SF_WORLD_FORCETEAM",
		"SF_WORLD_TITLE",
		"SHOTGUN",
		"SLOT_C4",
		"SLOT_GRENADE",
		"SLOT_KNIFE",
		"SLOT_PRIMARY",
		"SLOT_SECONDARY",
		"SND_CHANGE_PITCH",
		"SND_CHANGE_VOL",
		"SND_SPAWNING",
		"SND_STOP",
		"SOCKET_TCP",
		"SOCKET_UDP",
		"SOLID_BBOX",
		"SOLID_BSP",
		"SOLID_NOT",
		"SOLID_SLIDEBOX",
		"SOLID_TRIGGER",
		"SOURCEMOD",
		"SOUTH_AMERICA",
		"SPAWNFLAG_DROIDONLY",
		"SPAWNFLAG_NOMESSAGE",
		"SPAWNFLAG_NOTOUCH",
		"SPAWNFLAG_USEONLY",
		"SPEAK_ALL",
		"SPEAK_LISTENALL",
		"SPEAK_MUTED",
		"SPEAK_NORMAL",
		"SPECTATOR",
		"SQError_AlreadyConnected",
		"SQError_CouldNotConnect",
		"SQError_InvalidFunction",
		"SQError_InvalidIP",
		"SQError_InvalidParams",
		"SQError_InvalidQueryType",
		"SQError_MaxConnections",
		"SQError_NoError",
		"SQLVAULT_FUNC_ATTRIB",
		"SQLVAULT_VAR_ATTRIB",
		"SQL_FAILED",
		"SQL_NumRows",
		"SQL_OK",
		"SQ_Players",
		"SQ_Server",
		"SS_MAX_LOOPS",
		"SS_MIN_DISTANCE",
		"SS_VERSION",
		"STAMINA_RESET",
		"STAMINA_SET",
		"STRPAD_LEFT",
		"STRPAD_RIGHT",
		"STRTYPE_ALPHA",
		"STRTYPE_NUM",
		"STRTYPE_SPACE",
		"STUNT_DIVE",
		"STUNT_DUCK",
		"STUNT_FLIP",
		"STUNT_GETUP",
		"STUNT_NONE",
		"STUNT_ROLL",
		"ST_BACKFLIP",
		"ST_DIVE",
		"ST_DIVE_LEFT",
		"ST_DIVE_RIGHT",
		"ST_FRONTFLIP",
		"SURVIVORS",
		"SVC_ADDANGLE",
		"SVC_CDTRACK",
		"SVC_CENTERPRINT",
		"SVC_CHOKE",
		"SVC_CLIENTDATA",
		"SVC_CROSSHAIRANGLE",
		"SVC_CUSTOMIZATION",
		"SVC_CUTSCENE",
		"SVC_DAMAGE",
		"SVC_DECALNAME",
		"SVC_DELTADESCRIPTION",
		"SVC_DELTAPACKETENTITIES",
		"SVC_DIRECTOR",
		"SVC_DISCONNECT",
		"SVC_EVENT",
		"SVC_EVENT_RELIABLE",
		"SVC_FILETXFERFAILED",
		"SVC_FINALE",
		"SVC_FOUNDSECRET",
		"SVC_HLTV",
		"SVC_INTERMISSION",
		"SVC_KILLEDMONSTER",
		"SVC_LIGHTSTYLE",
		"SVC_NEWMOVEVARS",
		"SVC_NEWUSERMSG",
		"SVC_NOP",
		"SVC_PACKETENTITIES",
		"SVC_PARTICLE",
		"SVC_PINGS",
		"SVC_PRINT",
		"SVC_RESOURCELIST",
		"SVC_RESOURCEREQUEST",
		"SVC_RESTORE",
		"SVC_ROOMTYPE",
		"SVC_SENDEXTRAINFO",
		"SVC_SERVERINFO",
		"SVC_SETANGLE",
		"SVC_SETPAUSE",
		"SVC_SETVIEW",
		"SVC_SIGNONNUM",
		"SVC_SOUND",
		"SVC_SOUNDFADE",
		"SVC_SPAWNBASELINE",
		"SVC_SPAWNSTATIC",
		"SVC_SPAWNSTATICSOUND",
		"SVC_STOPSOUND",
		"SVC_STUFFTEXT",
		"SVC_TEMPENTITY",
		"SVC_TIME",
		"SVC_TIMESCALE",
		"SVC_UPDATEUSERINFO",
		"SVC_VERSION",
		"SVC_VOICEDATA",
		"SVC_VOICEINIT",
		"SVC_WEAPONANIM",
		"Sort_Ascending",
		"Sort_Descending",
		"Sql",
		"TEAM_COLOR",
		"TEAM_COLOR",
		"TEAM_CT",
		"TEAM_SPECTATOR",
		"TEAM_TERRORIST",
		"TEAM_UNASSIGNED",
		"TEFIRE_FLAG_ALLFLOAT",
		"TEFIRE_FLAG_ALPHA",
		"TEFIRE_FLAG_LOOP",
		"TEFIRE_FLAG_PLANAR",
		"TEFIRE_FLAG_SOMEFLOAT",
		"TE_ARMOR_RICOCHET",
		"TE_BEAMCYLINDER",
		"TE_BEAMDISK",
		"TE_BEAMENTPOINT",
		"TE_BEAMENTS",
		"TE_BEAMFOLLOW",
		"TE_BEAMPOINTS",
		"TE_BEAMRING",
		"TE_BEAMSPRITE",
		"TE_BEAMTORUS",
		"TE_BLOOD",
		"TE_BLOODSPRITE",
		"TE_BLOODSTREAM",
		"TE_BOX",
		"TE_BREAKMODEL",
		"TE_BSPDECAL",
		"TE_BUBBLES",
		"TE_BUBBLETRAIL",
		"TE_DECAL",
		"TE_DECALHIGH",
		"TE_DLIGHT",
		"TE_ELIGHT",
		"TE_EXPLFLAG_NOADDITIVE",
		"TE_EXPLFLAG_NODLIGHTS",
		"TE_EXPLFLAG_NONE",
		"TE_EXPLFLAG_NOPARTICLES",
		"TE_EXPLFLAG_NOSOUND",
		"TE_EXPLODEMODEL",
		"TE_EXPLOSION",
		"TE_EXPLOSION2",
		"TE_FIREFIELD",
		"TE_FIZZ",
		"TE_GLOWSPRITE",
		"TE_GUNSHOT",
		"TE_GUNSHOTDECAL",
		"TE_IMPLOSION",
		"TE_KILLBEAM",
		"TE_KILLPLAYERATTACHMENTS",
		"TE_LARGEFUNNEL",
		"TE_LAVASPLASH",
		"TE_LIGHTNING",
		"TE_LINE",
		"TE_MODEL",
		"TE_MULTIGUNSHOT",
		"TE_PARTICLEBURST",
		"TE_PLAYERATTACHMENT",
		"TE_PLAYERDECAL",
		"TE_PLAYERSPRITES",
		"TE_PROJECTILE",
		"TE_SHOWLINE",
		"TE_SMOKE",
		"TE_SPARKS",
		"TE_SPRAY",
		"TE_SPRITE",
		"TE_SPRITETRAIL",
		"TE_SPRITE_SPRAY",
		"TE_STREAK_SPLASH",
		"TE_TAREXPLOSION",
		"TE_TELEPORT",
		"TE_TEXTMESSAGE",
		"TE_TRACER",
		"TE_USERTRACER",
		"TE_WORLDDECAL",
		"TE_WORLDDECALHIGH",
		"TFCMAX_WEAPONS",
		"TFC_AMMO_BULLETS",
		"TFC_AMMO_CELLS",
		"TFC_AMMO_NADE1",
		"TFC_AMMO_NADE2",
		"TFC_AMMO_ROCKETS",
		"TFC_AMMO_SHELLS",
		"TFC_GOALITEM_BLUE",
		"TFC_GOALITEM_GREEN",
		"TFC_GOALITEM_RED",
		"TFC_GOALITEM_YELLOW",
		"TFC_PC_CIVILIAN",
		"TFC_PC_DEMOMAN",
		"TFC_PC_ENGENEER",
		"TFC_PC_ENGINEER",
		"TFC_PC_HWGUY",
		"TFC_PC_MEDIC",
		"TFC_PC_PYRO",
		"TFC_PC_SCOUT",
		"TFC_PC_SNIPER",
		"TFC_PC_SOLDIER",
		"TFC_PC_SPY",
		"TFC_WPN_AC",
		"TFC_WPN_AUTORIFLE",
		"TFC_WPN_AXE",
		"TFC_WPN_CALTROP",
		"TFC_WPN_CONCUSSIONGRENADE",
		"TFC_WPN_EMPGRENADE",
		"TFC_WPN_FLAMES",
		"TFC_WPN_FLAMETHROWER",
		"TFC_WPN_GASGRENADE",
		"TFC_WPN_GL",
		"TFC_WPN_IC",
		"TFC_WPN_KNIFE",
		"TFC_WPN_MEDIKIT",
		"TFC_WPN_MIRVGRENADE",
		"TFC_WPN_NAILGRENADE",
		"TFC_WPN_NAPALMGRENADE",
		"TFC_WPN_NG",
		"TFC_WPN_NONE",
		"TFC_WPN_NORMALGRENADE",
		"TFC_WPN_PL",
		"TFC_WPN_RAILGUN",
		"TFC_WPN_RPG",
		"TFC_WPN_SENTRYGUN",
		"TFC_WPN_SHOTGUN",
		"TFC_WPN_SNIPERRIFLE",
		"TFC_WPN_SPANNER",
		"TFC_WPN_SUPERNG",
		"TFC_WPN_SUPERSHOTGUN",
		"TFC_WPN_TIMER",
		"TFC_WPN_TRANQ",
		"TFC_WPN_UNK18",
		"TFC_WPN_UNK19",
		"TIMEOUT",
		"TIMEOUT_EXHAUSTIVE",
		"TIMEOUT_EXTENSIVE",
		"TQUERY_CONNECT_FAILED",
		"TQUERY_QUERY_FAILED",
		"TQUERY_SUCCESS",
		"TRAVTRIE_MAX_KEY_LEN",
		"TR_AllSolid",
		"TR_ENT_pHit",
		"TR_EndPos",
		"TR_FL_flFraction",
		"TR_FL_flPlaneDist",
		"TR_Fraction",
		"TR_Hit",
		"TR_Hitgroup",
		"TR_INT_fAllSolid",
		"TR_INT_fInOpen",
		"TR_INT_fInWater",
		"TR_INT_fStartSolid",
		"TR_INT_iHitgroup",
		"TR_InOpen",
		"TR_InWater",
		"TR_PlaneDist",
		"TR_PlaneNormal",
		"TR_StartSolid",
		"TR_VEC_vecEndPos",
		"TR_VEC_vecPlaneNormal",
		"TR_flFraction",
		"TR_flPlaneDist",
		"TR_iHitgroup",
		"TR_pHit",
		"TR_vecEndPos",
		"TR_vecPlaneNormal",
		"TSA_FLASHLIGHT",
		"TSA_LASERSIGHT",
		"TSA_SCOPE",
		"TSA_SILENCER",
		"TSITEM_KUNGFU",
		"TSITEM_SUPERJUMP",
		"TSKF_DOUBLEKILL",
		"TSKF_ISSPEC",
		"TSKF_KILLEDSPEC",
		"TSKF_SLIDINGKILL",
		"TSKF_STUNTKILL",
		"TSMAX_WEAPONS",
		"TSMSG_DEAD",
		"TSMSG_DEMOLITION",
		"TSMSG_KILLER",
		"TSMSG_NORMAL",
		"TSMSG_SPECIALIST",
		"TSMSG_THEONE",
		"TSMSG_UNSTOPPABLE",
		"TSMSG_WAITING",
		"TSPWUP_ARMOR",
		"TSPWUP_DFIRERATE",
		"TSPWUP_GRENADE",
		"TSPWUP_HEALTH",
		"TSPWUP_INFAMMO",
		"TSPWUP_KUNGFU",
		"TSPWUP_NONE",
		"TSPWUP_OFS_KUNGFU",
		"TSPWUP_OFS_SUPERJUMP",
		"TSPWUP_RANDOM",
		"TSPWUP_SLOWMO",
		"TSPWUP_SLOWPAUSE",
		"TSPWUP_SUPERJUMP",
		"TSW_57",
		"TSW_A57",
		"TSW_ABERETTAS",
		"TSW_AK47",
		"TSW_AMK23",
		"TSW_AUG",
		"TSW_AUZI",
		"TSW_BERETTA",
		"TSW_C4",
		"TSW_CKNIFE",
		"TSW_CONTENDER",
		"TSW_DEAGLE",
		"TSW_GCOLTS",
		"TSW_GLOCK18",
		"TSW_GLOCK20",
		"TSW_KATANA",
		"TSW_KUNG_FU",
		"TSW_M16A4",
		"TSW_M3",
		"TSW_M4A1",
		"TSW_M60E3",
		"TSW_M61GRENADE",
		"TSW_M82A1",
		"TSW_MK1",
		"TSW_MK23",
		"TSW_MOSSBERG",
		"TSW_MP5K",
		"TSW_MP5SD",
		"TSW_MP7",
		"TSW_RBULL",
		"TSW_SAWED_OFF",
		"TSW_SKNIFE",
		"TSW_SPAS",
		"TSW_TKNIFE",
		"TSW_TMP",
		"TSW_UMP",
		"TSW_UNK1",
		"TSW_USAS",
		"TSW_UZI",
		"TeamWinning_Ct",
		"TeamWinning_None",
		"TeamWinning_Terrorist",
		"TransKey",
		"TransKey_Bad",
		"TravTrie",
		"UC_Buttons",
		"UC_ForwardMove",
		"UC_ImpactIndex",
		"UC_ImpactPosition",
		"UC_Impulse",
		"UC_LerpMsec",
		"UC_LightLevel",
		"UC_Msec",
		"UC_SideMove",
		"UC_UpMove",
		"UC_ViewAngles",
		"UC_WeaponSelect",
		"VALVE",
		"VOL_NORM",
		"WALKMOVE_CHECKONLY",
		"WALKMOVE_NORMAL",
		"WALKMOVE_WORLDONLY",
		"WC_TEAMS_ALL",
		"WC_TEAMS_CT",
		"WC_TEAMS_T",
		"WEAPON_ACIDROCKET",
		"WEAPON_BILEBOMB",
		"WEAPON_BITE",
		"WEAPON_BITE2",
		"WEAPON_BLINK",
		"WEAPON_CHARGE",
		"WEAPON_CLAWS",
		"WEAPON_DEVOUR",
		"WEAPON_DIVINEWIND",
		"WEAPON_GRENADE",
		"WEAPON_GRENADE_GUN",
		"WEAPON_HEALINGSPRAY",
		"WEAPON_HMG",
		"WEAPON_KNIFE",
		"WEAPON_LEAP",
		"WEAPON_LMG",
		"WEAPON_MAX",
		"WEAPON_METABOLIZE",
		"WEAPON_MINE",
		"WEAPON_NONE",
		"WEAPON_PARASITE",
		"WEAPON_PISTOL",
		"WEAPON_PRIMALSCREAM",
		"WEAPON_SHOTGUN",
		"WEAPON_SPIKE",
		"WEAPON_SPIT",
		"WEAPON_SPORES",
		"WEAPON_STOMP",
		"WEAPON_SUIT",
		"WEAPON_SWIPE",
		"WEAPON_UMBRA",
		"WEAPON_WEBSPINNER",
		"WEAPON_WELDER",
		"WIN_HUMANS",
		"WIN_NO_ONE",
		"WIN_ZOMBIES",
		"XMF_DAMAGE",
		"XMF_DAMAGE",
		"XMF_DEATH",
		"XMF_DEATH",
		"XMF_SCORE",
		"XS_AMX",
		"XS_AMXX",
		"XS_DEBUG",
		"XS_FLEQ_TOLERANCE",
		"XS_LIBFUNC_ATTRIB",
		"XS_LIBVAR_ATTRIB",
		"XS_LOGBUFFER_SIZE",
		"XS_PITCH",
		"XS_PLANE_A",
		"XS_PLANE_B",
		"XS_PLANE_C",
		"XS_PLANE_D",
		"XS_PLATFORM",
		"XS_REPLACEBUF_SIZE",
		"XS_ROLL",
		"XS_TASK_MANAGEDIDS",
		"XS_TASK_MAXPARAMS",
		"XS_TASK_MAXPARAMSIZE",
		"XS_YAW",
		"XS__IL_RMULT",
		"XS__LIBRELEASE",
		"XS__MAX_ENGINE_MESSAGES",
		"XS__MAX_POSSIBLE_MESSAGES",
		"XY_RANGE",
		"XY_RANGE_EXHAUSTIVE",
		"XY_RANGE_EXTENSIVE",
		"YELLOW",
		"ZOMBIES",
		"ZOMBIE_CLAWS",
		"ZP_CLASS_AVAILABLE",
		"ZP_CLASS_DONT_SHOW",
		"ZP_CLASS_NOT_AVAILABLE",
		"ZP_INVALID_GAME_MODE",
		"ZP_INVALID_HUMAN_CLASS",
		"ZP_INVALID_ITEM",
		"ZP_INVALID_ZOMBIE_CLASS",
		"ZP_ITEM_AVAILABLE",
		"ZP_ITEM_DONT_SHOW",
		"ZP_ITEM_NOT_AVAILABLE",
		"ZP_NO_GAME_MODE",
		"ZP_PLUGIN_HANDLED",
		"ZP_TEAM_ANY",
		"ZP_TEAM_HUMAN",
		"ZP_TEAM_NEMESIS",
		"ZP_TEAM_SURVIVOR",
		"ZP_TEAM_ZOMBIE",
		"ZP_VERSION_NUM",
		"ZP_VERSION_STRING",
		"Z_RANGE",
		"Z_RANGE_EXHAUSTIVE",
		"Z_RANGE_EXTENSIVE",
		"any",
		"at_aiconsole",
		"at_console",
		"at_error",
		"at_logged",
		"at_notice",
		"at_warning",
		"bool",
		"bot_buttons",
		"bot_float_end",
		"bot_float_start",
		"bot_forward_move",
		"bot_impulse",
		"bot_int_end",
		"bot_int_start",
		"bot_side_move",
		"bot_up_move",
		"break",
		"case",
		"cellbytes",
		"cellbytes",
		"chat_all",
		"chat_radio",
		"chat_team",
		"chr_engine_included",
		"classname",
		"continue",
		"cs_team_changer_included",
		"default",
		"degrees",
		"do",
		"else",
		"engprint_center",
		"engprint_chat",
		"engprint_console",
		"enum",
		"false",
		"find_entity",
		"floatround_ceil",
		"floatround_floor",
		"floatround_round",
		"floatround_tozero",
		"for",
		"force_exactfile",
		"force_model_samebounds",
		"force_model_specifybounds",
		"gESFClassNames",
		"g_flOffsets",
		"g_szStarts",
		"glb_cdAudioTrack",
		"glb_coop",
		"glb_deathmatch",
		"glb_end_edict",
		"glb_end_float",
		"glb_end_int",
		"glb_end_pchar",
		"glb_end_string",
		"glb_end_vector",
		"glb_force_retouch",
		"glb_found_secrets",
		"glb_frametime",
		"glb_mapname",
		"glb_maxClients",
		"glb_maxEntities",
		"glb_msg_entity",
		"glb_pStringBase",
		"glb_serverflags",
		"glb_start_edict",
		"glb_start_float",
		"glb_start_int",
		"glb_start_pchar",
		"glb_start_string",
		"glb_start_vector",
		"glb_startspot",
		"glb_teamplay",
		"glb_time",
		"glb_trace_allsolid",
		"glb_trace_endpos",
		"glb_trace_ent",
		"glb_trace_flags",
		"glb_trace_fraction",
		"glb_trace_hitgroup",
		"glb_trace_inopen",
		"glb_trace_inwater",
		"glb_trace_plane_dist",
		"glb_trace_plane_normal",
		"glb_trace_startsolid",
		"glb_v_forward",
		"glb_v_right",
		"glb_v_up",
		"glb_vecLandmarkOffset",
		"goto",
		"grades",
		"hexchars",
		"kRenderFxClampMinScale",
		"kRenderFxDeadPlayer",
		"kRenderFxDistort",
		"kRenderFxExplode",
		"kRenderFxFadeFast",
		"kRenderFxFadeSlow",
		"kRenderFxFlickerFast",
		"kRenderFxFlickerSlow",
		"kRenderFxGlowShell",
		"kRenderFxHologram",
		"kRenderFxNoDissipation",
		"kRenderFxNone",
		"kRenderFxPulseFast",
		"kRenderFxPulseFastWide",
		"kRenderFxPulseSlow",
		"kRenderFxPulseSlowWide",
		"kRenderFxSolidFast",
		"kRenderFxSolidSlow",
		"kRenderFxStrobeFast",
		"kRenderFxStrobeFaster",
		"kRenderFxStrobeSlow",
		"kRenderGlow",
		"kRenderNormal",
		"kRenderTransAdd",
		"kRenderTransAlpha",
		"kRenderTransColor",
		"kRenderTransTexture",
		"module_badload",
		"module_loaded",
		"module_noattach",
		"module_noinfo",
		"module_none",
		"module_noquery",
		"module_old",
		"module_query",
		"native",
		"new",
		"nst_mywpn_res_bottom_none",
		"nst_mywpn_res_bottom_search",
		"nst_mywpn_res_bottom_set",
		"nst_mywpn_res_img_none",
		"nst_mywpn_res_img_search",
		"nst_mywpn_res_img_set",
		"nst_mywpn_res_name_none",
		"nst_mywpn_res_name_search",
		"nst_mywpn_res_name_set",
		"nst_mywpn_res_team_none",
		"nst_mywpn_res_team_search",
		"nst_mywpn_res_team_set",
		"nst_mywpn_res_url",
		"nst_mywpn_res_url_ct",
		"nst_mywpn_res_url_ter",
		"pev_absmax",
		"pev_absmin",
		"pev_absolute_end",
		"pev_aiment",
		"pev_air_finished",
		"pev_angles",
		"pev_animtime",
		"pev_armortype",
		"pev_armorvalue",
		"pev_avelocity",
		"pev_bInDuck",
		"pev_basevelocity",
		"pev_blending",
		"pev_blending_0",
		"pev_blending_1",
		"pev_body",
		"pev_button",
		"pev_byte_end",
		"pev_byte_start",
		"pev_bytearray_end",
		"pev_bytearray_start",
		"pev_chain",
		"pev_classname",
		"pev_clbasevelocity",
		"pev_colormap",
		"pev_controller",
		"pev_controller_0",
		"pev_controller_1",
		"pev_controller_2",
		"pev_controller_3",
		"pev_deadflag",
		"pev_dmg",
		"pev_dmg_inflictor",
		"pev_dmg_save",
		"pev_dmg_take",
		"pev_dmgtime",
		"pev_edict2_start",
		"pev_edict_end",
		"pev_edict_start",
		"pev_effects",
		"pev_endpos",
		"pev_enemy",
		"pev_euser1",
		"pev_euser2",
		"pev_euser3",
		"pev_euser4",
		"pev_fixangle",
		"pev_flDuckTime",
		"pev_flFallVelocity",
		"pev_flSwimTime",
		"pev_flTimeStepSound",
		"pev_flags",
		"pev_float_end",
		"pev_float_start",
		"pev_fov",
		"pev_frags",
		"pev_frame",
		"pev_framerate",
		"pev_friction",
		"pev_fuser1",
		"pev_fuser2",
		"pev_fuser3",
		"pev_fuser4",
		"pev_gaitsequence",
		"pev_gamestate",
		"pev_globalname",
		"pev_gravity",
		"pev_groundentity",
		"pev_groupinfo",
		"pev_health",
		"pev_iStepLeft",
		"pev_ideal_yaw",
		"pev_idealpitch",
		"pev_impacttime",
		"pev_impulse",
		"pev_int_end",
		"pev_int_start",
		"pev_iuser1",
		"pev_iuser2",
		"pev_iuser3",
		"pev_iuser4",
		"pev_light_level",
		"pev_ltime",
		"pev_max_health",
		"pev_maxs",
		"pev_maxspeed",
		"pev_message",
		"pev_mins",
		"pev_model",
		"pev_modelindex",
		"pev_movedir",
		"pev_movetype",
		"pev_netname",
		"pev_nextthink",
		"pev_noise",
		"pev_noise1",
		"pev_noise2",
		"pev_noise3",
		"pev_oldbuttons",
		"pev_oldorigin",
		"pev_origin",
		"pev_owner",
		"pev_pContainingEntity",
		"pev_pain_finished",
		"pev_pitch_speed",
		"pev_playerclass",
		"pev_punchangle",
		"pev_pushmsec",
		"pev_radsuit_finished",
		"pev_renderamt",
		"pev_rendercolor",
		"pev_renderfx",
		"pev_rendermode",
		"pev_scale",
		"pev_sequence",
		"pev_size",
		"pev_skin",
		"pev_solid",
		"pev_spawnflags",
		"pev_speed",
		"pev_startpos",
		"pev_starttime",
		"pev_string2_begin",
		"pev_string2_end",
		"pev_string_end",
		"pev_string_start",
		"pev_takedamage",
		"pev_target",
		"pev_targetname",
		"pev_team",
		"pev_teleport_time",
		"pev_v_angle",
		"pev_vecarray_end",
		"pev_vecarray_start",
		"pev_velocity",
		"pev_view_ofs",
		"pev_viewmodel",
		"pev_viewmodel2",
		"pev_vuser1",
		"pev_vuser2",
		"pev_vuser3",
		"pev_vuser4",
		"pev_waterlevel",
		"pev_watertype",
		"pev_weaponanim",
		"pev_weaponmodel",
		"pev_weaponmodel2",
		"pev_weapons",
		"pev_yaw_speed",
		"print_center",
		"print_chat",
		"print_console",
		"print_notify",
		"proprint_center",
		"proprint_chat",
		"proprint_console",
		"public",
		"radian",
		"return",
		"switch",
		"target",
		"targetname",
		"timeunit_days",
		"timeunit_hours",
		"timeunit_minutes",
		"timeunit_seconds",
		"timeunit_weeks",
		"toolsx_included",
		"travTrieIter",
		"true",
		"usercmd_buttons",
		"usercmd_float_end",
		"usercmd_float_start",
		"usercmd_forwardmove",
		"usercmd_impact_index",
		"usercmd_impact_position",
		"usercmd_impulse",
		"usercmd_int_end",
		"usercmd_int_start",
		"usercmd_lerp_msec",
		"usercmd_lightlevel",
		"usercmd_msec",
		"usercmd_sidemove",
		"usercmd_upmove",
		"usercmd_vec_end",
		"usercmd_vec_start",
		"usercmd_viewangles",
		"usercmd_weaponselect",
		"while",
		"xs__ITaskParamCount",
		"xs__ITaskParamType",
		"xs__ITaskParamValue",
		"xs__TaskParamCount",
		"xs__TaskParamType",
		"xs__TaskParamValue",
		"xs__assertionfailed",
		"xs_error",
		"xs_fatalerror",
		"xs_float",
		"xs_int",
		"xs_invalid",
		"xs_logtypes_count",
		"xs_message",
		"xs_string",
		"xs_warning"
	]
}
